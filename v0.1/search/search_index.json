{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>  lintkit is a framework for building linters/code checking rules  </p> <ul> <li>Multiple formats: Python-first, but supports YAML, JSON and TOML</li> <li>Comprehensive: <code>noqa</code> comments,     file skips and standardized pretty output</li> <li>Quick: Create and run custom rules in a few lines of code</li> <li>Flexible: Rules over file(s), their subelements and more     (see Files tutorial\u00a0\u29c9)</li> <li>Minimal: Gentle learning curve - <code>&lt;1000</code> lines of code,     tutorials\u00a0\u29c9,     API reference\u00a0\u29c9</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<p>Tip</p> <p>Check out more examples (here\u00a0\u29c9) to get a better feel of <code>lintkit</code>.</p> <p>Below are ~<code>20</code> lines of code implementing custom linter with two rules and running it on three files:</p> <pre><code>import lintkit\n\n# Set the name of the linter\nlintkit.settings.name = \"NOUTILS\"\n\nclass _NoUtils(lintkit.check.Regex, lintkit.loader.Python, lintkit.rule.Node):\n    def regex(self):\n        # Regex to match util(s) variations in function/class name\n        return r\"_?[Uu]til(s|ities)?\"\n\n    def values(self):\n        # Yield class or function names from a Python file\n        data = self.getitem(\"nodes_map\")\n        for node in data[self.ast_class()]:\n            yield lintkit.Value.from_python(node.name, node)\n\n    def message(self, _):\n        return f\"{self.ast_class()} name contains util(s) word\"\n\n# Concrete rules and their codes\n# Disabling linter using noqas supported out of the box!\nclass ClassNoUtils(_NoUtils, code=0):  # noqa: NOUTILS0\n    # ast type we want to focus on in this rule\n    def ast_class(self):\n        return ast.ClassDef\n\nclass FunctionNoUtils(_NoUtils, code=1):  # noqa: NOUTILS0\n    def ast_class(self):\n        return ast.FunctionDef\n\nlintkit.run(\"linter.py\", \"file1.py\", \"file2.py\")\n\n# Example output\n#/path/file1.py:23:17 NOUTILS0: ClassDef name contains util(s) word\n#/path/file2.py:73:21 NOUTILS1: FunctionDef name contains util(s) word\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Tip</p> <p>You can use your favorite package manager like <code>uv</code>\u00a0\u29c9, <code>hatch</code>\u00a0\u29c9 or <code>pdm</code>\u00a0\u29c9 instead of <code>pip</code>.</p> <pre><code>&gt; pip install lintkit\n</code></pre> <p>Note</p> <p><code>lintkit</code> provides extras (<code>rich</code>, <code>toml</code>, <code>yaml</code> and <code>all</code> containing everything) to provide additional functionality.</p> <pre><code># To create rules utilizing YAML\n&gt; pip install lintkit[rich, yaml]\n</code></pre>"},{"location":"#learn","title":"Learn","text":"<p>Check out the following links to learn more about <code>lintkit</code>:</p> <ul> <li>Tutorials\u00a0\u29c9</li> <li>API Reference\u00a0\u29c9</li> </ul>"},{"location":"#contribute","title":"Contribute","text":"<p>We welcome your contributions! Start here:</p> <ul> <li>Code of Conduct</li> <li>Contributing Guide</li> <li>Roadmap</li> <li>Changelog</li> <li>Report security vulnerabilities</li> <li>Open an Issue\u00a0\u29c9</li> </ul>"},{"location":"#legal","title":"Legal","text":"<ul> <li>This project is licensed under the Apache 2.0 License - see     the LICENSE file for details.</li> <li>This project is copyrighted by open-nudge - the     appropriate copyright notice is included in each file.</li> </ul>"},{"location":"ADOPTERS/","title":"Adopters of lintkit","text":"<p>This page lists organizations, companies and projects using lintkit.</p> <p>Important</p> <p>If you are using lintkit and want to be featured here, open a new issue using adopters template\u00a0\u29c9.</p>"},{"location":"ADOPTERS/#organizations","title":"Organizations","text":""},{"location":"ADOPTERS/#companies","title":"Companies","text":""},{"location":"ADOPTERS/#projects","title":"Projects","text":""},{"location":"ANNOUNCEMENTS/","title":"Announcements","text":""},{"location":"CHANGELOG/","title":"Changelog","text":"<p>See releases\u00a0\u29c9 for detailed changelog.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socioeconomic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,     and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall     community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of     any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,     without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a     professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at open-nudge. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant\u00a0\u29c9, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\u00a0\u29c9.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder\u00a0\u29c9.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq\u00a0\u29c9. Translations are available at https://www.contributor-covenant.org/translations\u00a0\u29c9.</p>"},{"location":"CONTRIBUTING/","title":"Contributing guide","text":""},{"location":"CONTRIBUTING/#table-of-contents","title":"Table of contents","text":"<ul> <li>General</li> <li>Non-code contributions</li> <li>Code contributions<ul> <li>Prerequisites</li> <li>Environment setup</li> <li>Source code</li> <li>Making changes</li> <li>Committing changes</li> <li>Creating a Pull Request</li> <li>Merging Pull Requests</li> </ul> </li> <li>Coding style</li> <li>Releases</li> </ul>"},{"location":"CONTRIBUTING/#general","title":"General","text":"<p>We welcome all contributions from the community. Adhere to Code of Conduct at all times.</p>"},{"location":"CONTRIBUTING/#non-code-contributions","title":"Non-code contributions","text":"<p>We welcome non-code contributions as well. If you have any suggestions, ideas, or want to report a bug, follow these steps:</p> <ol> <li>Verify open issues\u00a0\u29c9     to see if someone reposrted similar issue or requested a similar feature.</li> <li>If the issue exists, upvote it and share more information     in a comment (use cases, examples and so on).</li> <li>If the issue does not exist, create a new one from the     Issues Templates\u00a0\u29c9     tab.</li> <li>Follow the appropriate template for the issue</li> </ol>"},{"location":"CONTRIBUTING/#code-contributions","title":"Code contributions","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ol> <li>Read ROADMAP to understand the project's goals.</li> <li>Read Developer's Certificate of Origin (DCO) in DCO.md     (you must sign-off your PRs).</li> <li>Read LICENSE.</li> <li>Follow the steps in Non-code contributions     and report a bug or request a feature.</li> <li>Fork the repository     (see here\u00a0\u29c9     for more information).</li> </ol>"},{"location":"CONTRIBUTING/#environment-setup","title":"Environment setup","text":"<p>Prerequisites (one time setup):</p> <ol> <li>Check you have Python 3.x installation available (as <code>python3</code> or <code>python</code>)</li> <li>Install <code>pdm</code> (see official installation instructions\u00a0\u29c9)</li> <li>Enable <code>pep582</code> globally (see official instructions\u00a0\u29c9)</li> </ol> <p>Change to the cloned directory and run:</p> <pre><code>pdm setup\n</code></pre> <p>Caution</p> <p>This project uses PEP582\u00a0\u29c9 to manage dependencies. Check <code>__pypackages__/README.md</code> for more information.</p> <p>Tip</p> <p>Check here\u00a0\u29c9 for more information on IDE configuration with PEP582.</p>"},{"location":"CONTRIBUTING/#source-code","title":"Source code","text":"<p>After the setup, you will, probably, contribute to the following directories:</p> <ul> <li><code>src/</code>\u00a0\u29c9     with the source code of the project</li> <li><code>tests/</code>\u00a0\u29c9     with the project's tests</li> </ul> <p>Check project documentation\u00a0\u29c9 and <code>code</code>/<code>docs</code> in these folders for more information.</p>"},{"location":"CONTRIBUTING/#making-changes","title":"Making changes","text":"<p>Keep the following in mind:</p> <ul> <li>Tests matter - use <code>hypothesis</code> (or similar) for property-based     testing if possible.</li> <li>Any changes need 100% test coverage - if not possible,     explain why in the comments or PR description and exclude these lines).</li> <li>Your changes should pass pre-commit hooks\u00a0\u29c9.</li> </ul> <p>Note</p> <p>Pre-commit hooks automatically fix your code, therefore you might have to recommit multiple time before the commit is accepted.</p>"},{"location":"CONTRIBUTING/#committing-changes","title":"Committing changes","text":"<p>Please follow the simplified Conventional Commits\u00a0\u29c9 standard in every commit, for example:</p> <pre><code>git commit -s -S -m \"feat: add new feature\"\n</code></pre> <ul> <li>You can only use <code>fix</code>, <code>feat</code>, <code>fix!</code>, <code>feat!</code> types,     we do not accept any other types (e.g. <code>chore</code>, <code>refactor</code>, <code>docs</code> and     others).</li> <li>Your commits should be atomic and should not contain many changes.</li> <li>Your commits have to be signed-off (use <code>-s</code> flag in <code>git commit</code> as in     the example above). Please see the DCO for more information.</li> <li>Your commits have to be signed (use <code>-S</code> flag in <code>git commit</code> as in     the example above). Please see the Signing commits\u00a0\u29c9     for more information.</li> </ul> <p>Tip</p> <p>You can use <code>pdm commit-guided</code> for interactive commit adhering to the guide.</p> <p>Tip</p> <p>You can use <code>pdm commit</code> (same as <code>git commit -s -S</code>).</p> <p>Tip</p> <p>You can use <code>pdm commit-fast</code>, a faster version of <code>commit-guided</code>.</p> <p>Note</p> <p>Signing and commit messages are automatically checked by the pre-commit hooks and CI/CD pipeline.</p>"},{"location":"CONTRIBUTING/#creating-a-pull-request","title":"Creating a pull request","text":"<p>Follow GitHub Flow\u00a0\u29c9; <code>main</code> branch should always be in the releasable state.</p> <p>Small pull requests are encouraged. If, for some reason, you cannot make small a pull request, describe the reasons in the <code>pull request</code> description.</p> <p>Pull requests have to be:</p> <ul> <li>Contain <code>type</code> akin to the commits;     Same rules apply (only <code>fix</code>, <code>feat</code>, <code>fix!</code>, <code>feat!</code> allowed)</li> <li>Linked to the <code>issue</code> via <code>Closes #XXX</code>     (where <code>XXX</code> is the issue number) in the description.</li> <li>Target the <code>main</code> branch.</li> <li>Contain descriptive header and (optionally) description.</li> </ul> <p>Tip</p> <p>Type of the pull request should be the largest of all commits (<code>feat!</code> &gt; <code>fix!</code> &gt; <code>feat</code> &gt; <code>fix</code>)</p> <p>Other features:</p> <ul> <li>Pull requests will be automatically labeled based on the type of the commit     (in some cases, you might want to manually add the label from the existing ones).</li> <li>Stale pull requests (no changes for 7 days) will be automatically closed     (can be reopened later).</li> <li>Pull requests will be automatically checked by the CI/CD pipeline.</li> </ul> <p>Warning</p> <p>Once you submit a PR, do not rebase it (easier to review the changes).</p>"},{"location":"CONTRIBUTING/#merging-pull-requests","title":"Merging pull requests","text":"<p>Maintainers will merge your pull request only after the CI/CD checks pass. In general, if <code>pre-commit</code> checks pass, no major changes should be necessary.</p> <p>Note</p> <p>We use <code>Squash and Merge</code> strategy for merging pull requests, individual commits should not matter if they follow the guidelines.</p> <p>If you need help with this part of the process, tag one of the maintainers in the PR.</p>"},{"location":"CONTRIBUTING/#coding-style","title":"Coding style","text":"<p><code>pre-commit</code> hooks check most of the guidelines, but maintainers reserve the right to ask for changes in the code style if necessary.</p> <p>In special cases you might want to ignore a certain style rule, if so, describe the reason in the comment.</p>"},{"location":"CONTRIBUTING/#releases","title":"Releases","text":"<p>After maintainers merged your PR, your changes will be automatically included in the next release.</p> <ul> <li>We release new versions of the project after each change according     to the Semantic Versioning\u00a0\u29c9 specification.</li> <li>CHANGELOG links to the release notes.</li> <li>We show certain releases to the public     by a blog post or a similar announcement (see ANNOUNCEMENTS).</li> <li>Public releases comprise of a few merged pull requests and are     performed under maintainers' discretion.</li> </ul>"},{"location":"DCO/","title":"Developer Certificate of Origin","text":"<p>Version 1.1</p> <p>Copyright (C) 2004, 2006 The Linux Foundation and its contributors.</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p> <p>Developer's Certificate of Origin 1.1</p> <p>By making a contribution to this project, I certify that:</p> <p>(a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or</p> <p>(b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or</p> <p>\u00a9 The contribution was provided directly to me by some other person who certified (a), (b) or \u00a9 and I have not modified it.</p> <p>(d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.</p>"},{"location":"GOVERNANCE/","title":"Governance","text":"<p>This document describes the roles and responsibilities of the maintainers.</p>"},{"location":"GOVERNANCE/#decision-process","title":"Decision process","text":"<ul> <li>We welcome all contributors and maintainers,     see CONTRIBUTING.md on any project-related topics.</li> <li>open-nudge reserves the right to make final     decisions on the project (the roadmap, features, releases,     general project direction and so on)</li> </ul>"},{"location":"GOVERNANCE/#roles","title":"Roles","text":"<ul> <li>External contributors - anyone who is not a maintainer (can submit PRs,     issues, and so on)</li> <li>Maintainers - people who have write access to the repository (can merge     PRs, open/close issues and so on)</li> <li>Specific roles (e.g. release manager, security leader) are under     the discretion of open-nudge</li> </ul>"},{"location":"GOVERNANCE/#questions","title":"Questions","text":"<p>In case of specific questions, open a new discussion or contact one of the maintainers directly.</p>"},{"location":"LICENSE/","title":"License","text":"<p>Apache License Version 2.0, January 2004 http://www.apache.org/licenses/</p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices stating that You changed the files; and</p> <p>\u00a9 You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <p>To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.</p> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"ROADMAP/","title":"Roadmap","text":"<ul> <li>Gathering user feedback</li> <li>Extending <code>lintkit.loader</code> module with tailored functionality     for various large frameworks (e.g.     <code>GitHub Actions</code>\u00a0\u29c9 or     <code>kubernetes</code>\u00a0\u29c9</li> </ul>"},{"location":"SECURITY-DEPENDENCY/","title":"Environment dependencies policy","text":""},{"location":"SECURITY-DEPENDENCY/#purpose","title":"Purpose","text":"<p>This policy describes how <code>lintkit</code> maintainers consume third-party packages.</p>"},{"location":"SECURITY-DEPENDENCY/#scope","title":"Scope","text":"<p>This policy applies to all <code>lintkit</code> maintainers and all third-party packages used in the <code>lintkit</code> project.</p>"},{"location":"SECURITY-DEPENDENCY/#policy","title":"Policy","text":"<p><code>lintkit</code> contributors must follow these guidelines when consuming third-party packages:</p>"},{"location":"SECURITY-DEPENDENCY/#general","title":"General","text":"<ul> <li>Only use third-party packages necessary for the functionality of     <code>lintkit</code>.</li> <li>Use maintained third-party packages with a reasonably good reputation.</li> <li>Prefer small, single-purpose packages over large, complex ones.</li> <li>Implement small functionalities within the project instead of     using a third-party package (unless the third-party package is lightweight,     well-maintained and has a good reputation).</li> <li>Avoid using third-party packages with known security vulnerabilities.</li> <li>Before sending changes with new dependencies, make sure all automated     tests pass (<code>pre-commit</code> checks and continuous integration pipelines)</li> </ul>"},{"location":"SECURITY-DEPENDENCY/#versioning","title":"Versioning","text":"<ul> <li>Use package manager to manage third-party dependencies.</li> <li>Lock all of the dependencies (including developer tools) before     merging the changes.</li> <li>Specify only <code>major</code> versions for all stable third-party packages     (version <code>1.x.y</code> or above) unless <code>minor</code> or <code>patch</code> versions     are required for compatibility or functionality.</li> <li>Specify <code>major</code>, <code>minor</code>, and <code>patch</code> versions for all pre-release     third-party packages (version <code>0.x.y</code>).</li> <li>Use the latest <code>major</code> version of all third-party packages whenever possible.</li> </ul>"},{"location":"SECURITY-DEPENDENCY/#procedure","title":"Procedure","text":"<p>When adding a new third-party package to <code>lintkit</code>, contributors must follow these steps:</p> <ol> <li>Is the package necessary for the functionality     of <code>lintkit</code>?</li> <li>How stable is the package? Is it a pre-release version (<code>0.x.y</code>) or a stable     version (<code>1.x.y</code> or above)?</li> <li>Research the package. Is it well-maintained? Does it have a good reputation?</li> <li>Choose a compatible version of the package.     Use the latest version whenever possible.</li> <li>Update the <code>pyproject.toml</code> and lock the dependencies.</li> </ol>"},{"location":"SECURITY-DEPENDENCY/#archived-or-deprecated-packages","title":"Archived or deprecated packages","text":"<p>When a third-party package is discontinued, the <code>lintkit</code> maintainers must ensure replacement of the package with a suitable alternative.</p>"},{"location":"SECURITY-DEPENDENCY/#enforcement","title":"Enforcement","text":"<p>This policy is enforced by the <code>lintkit</code> maintainers. Maintainers are expected to review each other's code changes to ensure that they comply with this policy.</p>"},{"location":"SECURITY-DEPENDENCY/#exceptions","title":"Exceptions","text":"<p>Exceptions to this policy may be granted by the <code>lintkit</code> maintainers/leaders on a case-by-case basis.</p>"},{"location":"SECURITY-DEPENDENCY/#credits","title":"Credits","text":"<p>This policy was adapted from the Kubescape Community\u00a0\u29c9 and Project Capsule\u00a0\u29c9</p>"},{"location":"SECURITY-SELF-ASSESSMENT/","title":"Security self-assessment of lintkit","text":"<p>Source: https://tag-security.cncf.io/community/assessments/guide/self-assessment/</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Metadata<ul> <li>Security links</li> </ul> </li> <li>Overview<ul> <li>Background</li> <li>Actors</li> <li>Actions</li> <li>Goals</li> <li>Non-goals</li> </ul> </li> <li>Self-assessment use</li> <li>Security functions and features</li> <li>Project compliance</li> <li>Secure development practices<ul> <li>Deployment pipeline</li> <li>Communication channels</li> <li>Ecosystem</li> </ul> </li> <li>Security issue resolution<ul> <li>Responsible disclosure practice</li> <li>Incident response</li> </ul> </li> <li>Appendix</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#metadata","title":"Metadata","text":"Category Resource Assessment Stage Incomplete Creator open-nudge Software https://github.com/open-nudge/lintkit\u00a0\u29c9 Website https://open-nudge.github.io/lintkit\u00a0\u29c9 Security Provider No Languages Python SBOM https://github.com/open-nudge/lintkit/releases\u00a0\u29c9"},{"location":"SECURITY-SELF-ASSESSMENT/#security-links","title":"Security links","text":"Category Resource Security File https://github.com/open-nudge/lintkit/blob/main/SECURITY.md\u00a0\u29c9 Security Insights https://github.com/open-nudge/lintkit/blob/main/SECURITY-INSIGHTS.yml\u00a0\u29c9 Dependencies https://github.com/open-nudge/lintkit/blob/main/pyproject.toml\u00a0\u29c9 Release Artifacts https://github.com/open-nudge/lintkit/releases\u00a0\u29c9"},{"location":"SECURITY-SELF-ASSESSMENT/#overview","title":"Overview","text":"<p>Build your own linter in minutes - from Python code to config files (YAML, JSON, TOML)</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#background","title":"Background","text":"<p>Framework for building linters/linting rules for multiple file types (e.g. <code>Python</code>, <code>YAML</code>, <code>TOML</code> or <code>JSON</code>).</p> <p>Written in Python, can target tools/libraries/frameworks, as long as their data is parse'able by <code>lintkit</code>.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#actors","title":"Actors","text":"<ul> <li>opennudge\u00a0\u29c9 - organization providing core     security features</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#actions","title":"Actions","text":"<ul> <li>Core security features are provided by     opentemplate\u00a0\u29c9 </li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#goals","title":"Goals","text":"<p>Comprehensive framework for creating new linters focused on <code>Python</code>, but providing functionality for other file formats.</p> <p>Possibly extendable and tailorable to different frameworks (e.g. Kubernetes manifests or GitHub Actions).</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#non-goals","title":"Non-goals","text":"<p>Authoritative source of code quality assessments. Linters should be user created and taken on a per-linter basis.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#self-assessment-use","title":"Self-assessment use","text":"<p>This self-assessment was automatically generated by the opentemplate\u00a0\u29c9  template to provide basic security information about the project. It should be extended by adding project-specific security information.</p> <p>Important</p> <p>opennudge\u00a0\u29c9 does not intend to provide a security audit of the project or function as an independent assessment or attestation of its security posture.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#security-functions-and-features","title":"Security functions and features","text":"Component Applicability Description of Importance template Critical Base GitHub template of the repository provided by <code>opennudge</code>. Used to provide initial security posture (pipelines, pre-commit, practices, hardening etc.) See open-nudge/lintkit\u00a0\u29c9 for more information"},{"location":"SECURITY-SELF-ASSESSMENT/#project-compliance","title":"Project compliance","text":"<p>Project tries to comply with the following security standards:</p> <ul> <li>SLSA\u00a0\u29c9 - L3+ if the project is public or coming     from a GitHub Enterprise Account with Advanced Security, L2 otherwise</li> <li>The project is currently not third-party audited or verified</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#secure-development-practices","title":"Secure development practices","text":""},{"location":"SECURITY-SELF-ASSESSMENT/#deployment-pipeline","title":"Deployment pipeline","text":"<p>Core of the deployment pipeline is based on the following tools:</p> <ul> <li>opentemplate\u00a0\u29c9 :     see  open-nudge/opentemplate\u00a0\u29c9     for more information</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#communication-channels","title":"Communication channels","text":"<p>You can reach out to us by Private Security Reporting\u00a0\u29c9 or by:</p> <ul> <li>means of communication provided at the account level here\u00a0\u29c9</li> <li>opening an issue in the repository (somebody will get back to you)</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#ecosystem","title":"Ecosystem","text":"<p>This project is a part of the Python ecosystem.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#security-issue-resolution","title":"Security issue resolution","text":"<p>The <code>open-nudge/lintkit</code>\u00a0\u29c9 security policy is maintained in the <code>SECURITY.md</code>\u00a0\u29c9 file.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#responsible-disclosure-practice","title":"Responsible disclosure practice","text":"<p>The <code>open-nudge/lintkit</code>\u00a0\u29c9 accepts vulnerability reports as outlined in the security policy defined in <code>SECURITY.md</code>\u00a0\u29c9 file.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#incident-response","title":"Incident response","text":"<p>As defined in <code>SECURITY.md</code>\u00a0\u29c9, usually response should take up to a few working days, if not please reach out at <code>security@opennudge.com</code>.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#appendix","title":"Appendix","text":"<ul> <li>Project is largely aligned with the     Open Source Security Foundation best practices\u00a0\u29c9</li> <li>Some false negatives regarding the best practices were spotted     (e.g. not using fuzzing), consult <code>scorecard.yml</code> for more information</li> </ul>"},{"location":"SECURITY/","title":"Security","text":"<p>Report any security vulnerabilities you find according to these guidelines.</p>"},{"location":"SECURITY/#general","title":"General","text":"<ul> <li>Please adhere to Code of Conduct at all times.</li> </ul>"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a vulnerability","text":"<ul> <li>If you discover a vulnerability, report it directly to the code     maintainers, preferably using GitHub's     Private Vulnerability Reporting\u00a0\u29c9.</li> <li>If you cannot find a way to report it, or have received no     response after repeated attempts,     contact the creators directly\u00a0\u29c9.</li> </ul> <p>Thank you.</p>"},{"location":"SECURITY/#security-measures","title":"Security measures","text":"<p>This project strives to implement Open Source Security Foundation\u00a0\u29c9 (OSSF) Best Practices\u00a0\u29c9.</p> <p>Some of the security measures undertaken in this project include:</p> <ul> <li>OSSF Scorecard\u00a0\u29c9</li> <li>Security file</li> <li>Security Insights Specification\u00a0\u29c9     as defined here\u00a0\u29c9</li> <li>Security Self Assessment</li> <li>Security Dependencies Policy</li> <li>Renovate Bot\u00a0\u29c9     for automated dependency updates</li> <li>Software Bills Of Material (SBOMs)\u00a0\u29c9</li> <li>Sigstore signing\u00a0\u29c9     as seen here\u00a0\u29c9</li> <li>GitHub Actions CI/CD pipelines with minimal permissions</li> <li>GitHub Actions CI/CD pipelines hardened via Harden Runner\u00a0\u29c9</li> <li>Pre-commit hooks\u00a0\u29c9 for local code quality     and security verification</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>lintkit<ul> <li>available</li> <li>check</li> <li>error</li> <li>loader</li> <li>output</li> <li>registry</li> <li>rule</li> <li>settings</li> <li>type_definitions</li> </ul> </li> </ul>"},{"location":"reference/lintkit/","title":"Lintkit","text":"<p>Official <code>lintkit</code> API documentation.</p>"},{"location":"reference/lintkit/#lintkit--general","title":"General","text":"<p><code>lintkit</code> is a Python library allowing you to quickly create custom linters, while being flexible enough to be used in a complex settings.</p> Warning <p>Start with tutorials to get a feel of the framework.</p>"},{"location":"reference/lintkit/#lintkit--core-modules","title":"Core modules","text":"<p>When creating custom linter(s) you will be (likely) interested in these core modules:</p> <ul> <li><code>lintkit.settings</code> - global settings     (e.g. name, how <code>noqa</code>s should be named etc.)</li> <li><code>lintkit.rule</code> - core class for creating linting rules</li> <li><code>lintkit.loader</code> - file loaders mixins (e.g. <code>python</code> or <code>YAML</code>),     tailoring rules to data</li> <li><code>lintkit.check</code> - what is <code>check</code>ed by a rule</li> </ul> <p>and the following functionalities from <code>lintkit</code>:</p> <ul> <li><code>Value</code> - define rule output in a reusable manner</li> <li><code>run</code> - run all (or subset of) rules on a given set of     files</li> </ul> Tip <p>Roam around the docs to get a better feel of what's available.</p>"},{"location":"reference/lintkit/#lintkit.__version__","title":"lintkit.__version__  <code>module-attribute</code>","text":"<pre><code>__version__ = version('lintkit')\n</code></pre> <p>Current lintkit version.</p>"},{"location":"reference/lintkit/#lintkit.Value","title":"lintkit.Value","text":"<pre><code>Value(value=None, start_line=None, start_column=None, end_line=None, end_column=None, comment=None, **kwargs)\n</code></pre> <p>               Bases: <code>ObjectProxy</code>, <code>Generic[T]</code></p> <p><code>Value</code> used by rules for verification.</p> Note <p>Instance of this type should always be returned from <code>lintkit.rule.Rule.values</code></p> Tip <p>You should use objects of this class just like you would use the <code>value</code> directly. as it is a \"perfect proxy\". Its other functionalities are used internally (e.g. <code>Pointer</code>)</p> <p>Can be essentially anything (e.g. <code>dict</code> from parsed <code>JSON</code>, <code>string</code> value from that <code>dict</code> or some other rule created value).</p> <p>It is later used by the pipeline to verify whether this value complies with the <code>Rule</code> itself.</p> Tip <p>Use creation static methods ( <code>lintkit.Value.from_python</code>, <code>lintkit.Value.from_toml</code>, or <code>lintkit.Value.from_json</code> ) when returning values from rules inheriting from <code>lintkit.loader.Python</code>, <code>lintkit.loader.TOML</code> or <code>lintkit.loader.JSON</code> respectively.</p> Caution <p><code>YAML</code> is already wrapped by <code>lintkit.Value</code> during when using <code>lintkit.loader.YAML</code>, no need to process them within <code>values</code> function.</p> Note <p>This <code>class</code> acts as a \"perfect proxy\" for end users by utilising <code>wrapt</code>\u00a0\u29c9 (which means wrapped <code>value</code> should be usable just like the original one).</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>Any</code> <p>Value to check against the rules.</p> <code>comment</code> <code>str | None</code> <p>Source code comment related to the object, if any. Used internally</p> <code>start_line</code> <code>Pointer</code> <p>Line number (represented as a <code>Pointer</code>). Used internally</p> <code>start_column</code> <code>Pointer</code> <p>Column number (represented as a <code>Pointer</code>). Used internally</p> <code>end_line</code> <code>Pointer</code> <p>End line number (represented as a <code>Pointer</code>). Used internally</p> <code>end_column</code> <code>Pointer</code> <p>End column number (represented as a <code>Pointer</code>). Used internally</p> Source code in <code>src/lintkit/_value.py</code> <pre><code>def __init__(  # noqa: PLR0913\n    self,\n    value: T = None,\n    start_line: Pointer | None = None,\n    start_column: Pointer | None = None,\n    end_line: Pointer | None = None,\n    end_column: Pointer | None = None,\n    comment: str | None = None,\n    **kwargs: typing.Any,\n) -&gt; None:\n    super().__init__(value)\n\n    if start_line is None:\n        start_line = Pointer()\n    if start_column is None:\n        start_column = Pointer()\n    if end_line is None:\n        end_line = Pointer()\n    if end_column is None:\n        end_column = Pointer()\n\n    self._self_start_line: Pointer = start_line\n    self._self_start_column: Pointer = start_column\n    self._self_end_line: Pointer = end_line\n    self._self_end_column: Pointer = end_column\n    self._self_comment: str | None = comment\n    self._self_metadata: dict[str, typing.Any] = kwargs\n</code></pre>"},{"location":"reference/lintkit/#lintkit.Value.from_python","title":"lintkit.Value.from_python  <code>staticmethod</code>","text":"<pre><code>from_python(value, node)\n</code></pre> <p>Create a <code>Value</code> from Python's <code>ast.AST</code> node.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>Some <code>Python</code> plain object.</p> required <code>node</code> <code>AST</code> <p>Python's <code>ast</code>\u00a0\u29c9 <code>Node</code> which corresponds to the <code>value</code>.</p> required <p>Returns:</p> Type Description <code>Value[T]</code> <p>Provided value with its respective Python node.</p> Source code in <code>src/lintkit/_value.py</code> <pre><code>@staticmethod\ndef from_python(value: T, node: ast.AST) -&gt; Value[T]:\n    \"\"\"Create a `Value` from Python's `ast.AST` node.\n\n    Arguments:\n        value:\n            Some `Python` plain object.\n        node:\n            Python's [`ast`](https://docs.python.org/3/library/ast.html)\n            `Node` which corresponds to the `value`.\n\n    Returns:\n        Provided value with its respective Python node.\n\n    \"\"\"\n    return Value(\n        value=value,\n        start_line=_optional_get(node, \"lineno\"),\n        start_column=_optional_get(node, \"col_offset\"),\n        end_line=_optional_get(node, \"end_lineno\"),\n        end_column=_optional_get(node, \"end_col_offset\"),\n    )\n</code></pre>"},{"location":"reference/lintkit/#lintkit.Value.from_json","title":"lintkit.Value.from_json  <code>staticmethod</code>","text":"<pre><code>from_json(value)\n</code></pre> <p>Create a <code>Value</code> from <code>JSON</code> values.</p> Note <p>As <code>JSON</code> does not support comments, only <code>value</code> is necessary.</p> Warning <p>Due to no comments, all ignore lines are currently ignored and only file exclusions are available.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>Some object, usually plain <code>Python</code> after parsing <code>JSON</code> via standard <code>json</code>\u00a0\u29c9 library.</p> required <p>Returns:</p> Type Description <code>Value[T]</code> <p><code>JSON</code> parsed data as a <code>Value</code></p> Source code in <code>src/lintkit/_value.py</code> <pre><code>@staticmethod\ndef from_json(value: T) -&gt; Value[T]:\n    \"\"\"Create a `Value` from `JSON` values.\n\n    Note:\n        As `JSON` does not support comments,\n        only `value` is necessary.\n\n    Warning:\n        Due to no comments, all ignore lines\n        are currently ignored and __only file exclusions__\n        are available.\n\n    Arguments:\n        value:\n            Some object, usually plain `Python` after parsing\n            `JSON` via\n            [standard `json`](https://docs.python.org/3/library/json.html)\n            library.\n\n    Returns:\n        `JSON` parsed data as a `Value`\n\n    \"\"\"\n    return Value(value=value)\n</code></pre>"},{"location":"reference/lintkit/#lintkit.Value.from_toml","title":"lintkit.Value.from_toml  <code>staticmethod</code>","text":"<pre><code>from_toml(item)\n</code></pre> <p>Create a <code>Value</code> from <code>tomlkit</code> <code>Item</code>.</p> Warning <p>Multiline <code>ignore</code>s or skips are not supported for <code>TOML</code> due to the lack of line numbers.</p> Warning <p><code>Value</code> will contain no line/column info (as it is unavailable in <code>tomlkit</code>\u00a0\u29c9), but propagates <code>comment</code> field to other elements of the system which allows it to be used for line ignoring.</p> <p>Returns:</p> Type Description <code>Value[Any]</code> <p><code>tomlkit.Item</code> represented as <code>Value</code>.</p> Source code in <code>src/lintkit/_value.py</code> <pre><code>@staticmethod\ndef from_toml(item: typing.Any) -&gt; Value[typing.Any]:\n    \"\"\"Create a `Value` from `tomlkit` `Item`.\n\n    Warning:\n        Multiline `ignore`s or skips are not supported\n        for `TOML` __due to the lack of line numbers__.\n\n    Warning:\n        `Value` will contain no line/column info\n        (as it is unavailable in\n        [`tomlkit`](https://tomlkit.readthedocs.io)), but\n        propagates `comment` field to other elements of the\n        system which allows it to be used for line ignoring.\n\n    Returns:\n        `tomlkit.Item` represented as `Value`.\n\n    \"\"\"\n    return Value(\n        # Principially items may not have an `unwrap` method, e.g.\n        # https://tomlkit.readthedocs.io/en/latest/api/#tomlkit.items.Key\n        # though it is available for most of the items,\n        value=item.unwrap() if hasattr(item, \"unwrap\") else item,\n        comment=item.trivia.comment\n        if hasattr(item, \"trivia\")\n        else None,\n    )\n</code></pre>"},{"location":"reference/lintkit/#lintkit.run","title":"lintkit.run","text":"<pre><code>run(*files, include_codes=None, exclude_codes=None, end_mode='all', output=False)\n</code></pre> <p>Run all the rules on a given file.</p> Caution <p>This function has two modes; one returns <code>bool</code> indicating whether any rule raised any error (the default), the second one returns all rules and their error codes via an <code>iterator</code>.</p> Tip <p>Use <code>output=False</code> if you create a custom linter and only want to return the appropriate exit code (most common usage)</p> <p>An example of minimal linter:</p> Example <pre><code>import sys\n\nimport lintkit\n\n# Mini linter over two files\n# Assuming appropriate rules were already defined\n\n\ndef linter(*files: str):\n    sys.exit(lintkit.run(*files))\n\n\nlinter(\"a.py\", \"~/user/goo.py\")\n</code></pre> <p>An example of iteration:</p> Example <pre><code>import lintkit\n\nfor failed, rule in lintkit.run(\"file.yml\", \"another.yml\", output=True):\n    print(f\"Rule {rule} returned with an exit code {failed}\")\n</code></pre> Tip <p><code>output=True</code> (iteration mode) allows to gather general statistics from each rule and adjust the output to your liking.</p> Warning <p><code>exclude_codes</code> takes precedence over <code>include_codes</code>!</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>Path | str</code> <p>Files to lint.</p> <code>()</code> <code>include_codes</code> <code>Iterable[int] | None</code> <p>A set of rule codes to include. If <code>None</code>, all rules are included.</p> <code>None</code> <code>exclude_codes</code> <code>Iterable[int] | None</code> <p>A set of rule codes to ignore. If <code>None</code>, no rules are ignored. Warning: <code>exclude_codes</code> takes precedence over <code>include_codes</code>.</p> <code>None</code> <code>end_mode</code> <code>Literal['first', 'all']</code> <p>Whether to stop after the first error or run all rules. By default runs all rules.</p> <code>'all'</code> <code>output</code> <code>bool</code> <p>If <code>True</code>, returns an iterator over all rules and their outputs. If <code>False</code>, returns whether any rule raised an error.</p> <code>False</code> <p>Returns:</p> Type Description <code>Iterator[tuple[bool, Rule]] | bool</code> <p>An iterator over all rules and their outputs OR a boolean indicating whether any rule raised an error.</p> Source code in <code>src/lintkit/_run.py</code> <pre><code>def run(\n    *files: pathlib.Path | str,\n    include_codes: Iterable[int] | None = None,\n    exclude_codes: Iterable[int] | None = None,\n    end_mode: typing.Literal[\"first\", \"all\"] = \"all\",\n    output: bool = False,\n) -&gt; Iterator[tuple[bool, r.Rule]] | bool:\n    \"\"\"Run all the rules on a given file.\n\n    Caution:\n        This function has two modes; one returns `bool`\n        indicating whether __any rule raised any error__\n        (the default), the second one returns\n        __all rules and their error codes__ via an `iterator`.\n\n    Tip:\n        Use `output=False` if you create a custom linter\n        and __only want to return the appropriate exit code__\n        (most common usage)\n\n    An example of minimal linter:\n\n    Example:\n        ```python\n        import sys\n\n        import lintkit\n\n        # Mini linter over two files\n        # Assuming appropriate rules were already defined\n\n\n        def linter(*files: str):\n            sys.exit(lintkit.run(*files))\n\n\n        linter(\"a.py\", \"~/user/goo.py\")\n        ```\n\n    An example of iteration:\n\n    Example:\n        ```python\n        import lintkit\n\n        for failed, rule in lintkit.run(\"file.yml\", \"another.yml\", output=True):\n            print(f\"Rule {rule} returned with an exit code {failed}\")\n        ```\n\n    Tip:\n        `output=True` (iteration mode) allows to gather general\n        statistics from each rule and adjust the output to your\n        liking.\n\n    Warning:\n        `exclude_codes` takes precedence over `include_codes`!\n\n    Args:\n        files:\n            Files to lint.\n        include_codes:\n            A set of rule codes to include. If `None`, all rules are included.\n        exclude_codes:\n            A set of rule codes to ignore. If `None`, no rules are ignored.\n            Warning: `exclude_codes` takes precedence over `include_codes`.\n        end_mode:\n            Whether to stop after the first error or run all rules.\n            By default runs all rules.\n        output:\n            If `True`, returns an iterator over all rules and their outputs.\n            If `False`, returns whether any rule raised an error.\n\n    Returns:\n        An iterator over all rules and their outputs OR a boolean indicating\n            whether any rule raised an error.\n    \"\"\"\n    generator_or_callable = _run(\n        *files,\n        include_codes=include_codes,\n        exclude_codes=exclude_codes,\n        end_mode=end_mode,\n    )\n    if output:\n        return generator_or_callable\n    # Exhaust iterator and return whether any rule raised an error\n    return any(result[0] for result in generator_or_callable)\n</code></pre>"},{"location":"reference/lintkit/available/","title":"Available","text":"<p>Information about available extra libraries.</p> Note <p>You can install these packages by specifying <code>extras</code>, e.g. <code>pip install lintkit[rich, toml, yaml]</code></p> <p>One can use the values \"as is\":</p> Example <pre><code>import lintkit\n\nif lintkit.available.RICH:\n    print(\"rich library installed!\")\n</code></pre>"},{"location":"reference/lintkit/available/#lintkit.available.RICH","title":"lintkit.available.RICH  <code>module-attribute</code>","text":"<pre><code>RICH = _modules_exist('rich')\n</code></pre> <p><code>Bool</code> indicating rich\u00a0\u29c9 availability.</p> <p>Used automatically for pretty printing and colorful terminal output.</p>"},{"location":"reference/lintkit/available/#lintkit.available.YAML","title":"lintkit.available.YAML  <code>module-attribute</code>","text":"<pre><code>YAML = _modules_exist('ruamel')\n</code></pre> <p><code>Bool</code> indicating ruamel\u00a0\u29c9 availability.</p> <p>Used to parse <code>YAML</code> and create rules for it.</p>"},{"location":"reference/lintkit/available/#lintkit.available.TOML","title":"lintkit.available.TOML  <code>module-attribute</code>","text":"<pre><code>TOML = _modules_exist('tomlkit')\n</code></pre> <p><code>Bool</code> indicating tomlkit\u00a0\u29c9 availability.</p> <p>Used to parse <code>TOML</code> and create rules for it.</p>"},{"location":"reference/lintkit/check/","title":"Check","text":"<p>Check <code>mixins</code> used for creation of <code>lintkit.rule</code> rules.</p> Info <p>This module is one of the three core modules used to define rules (this one might be skipped though, as long as your <code>lintkit.rule.Rule</code> implements <code>check</code> method).</p> Tip <p>Check out Advanced tutorial for a usage example of <code>lintkit.check</code> module.</p>"},{"location":"reference/lintkit/check/#lintkit.check.Check","title":"lintkit.check.Check","text":"<p>               Bases: <code>ABC</code></p> <p>Base class (interface) for performing checks against <code>value</code>.</p> Tip <p>This is an interface obtaining <code>lintkit.Value</code> and returning <code>True</code> if the rule was broken.</p>"},{"location":"reference/lintkit/check/#lintkit.check.Check.check","title":"lintkit.check.Check.check  <code>abstractmethod</code>","text":"<pre><code>check(value)\n</code></pre> <p>Perform the check on a certain <code>value</code>.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[Any]</code> <p>Value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if rule is violated, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/check.py</code> <pre><code>@abc.abstractmethod\ndef check(self, value: Value[typing.Any]) -&gt; bool:\n    \"\"\"Perform the check on a certain `value`.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Args:\n        value:\n            Value to check.\n\n    Returns:\n        `True` if rule is violated, `False` otherwise.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/check/#lintkit.check.Regex","title":"lintkit.check.Regex","text":"<p>               Bases: <code>Check</code>, <code>ABC</code></p> <p>Check if the value matches a regex pattern.</p> Note <p>This <code>class</code> uses Python's <code>re.search</code>\u00a0\u29c9 internally.</p> Example <pre><code>class MyRegex(lintkit.check.Regex):\n    def regex(self) -&gt; str:\n        return \".*\"\n\n\n# Every string will match\nMyRegex().check(\"tout sera inclus\")\n</code></pre> Tip <p>Check out Advanced tutorial for another usage example of <code>lintkit.check.Regex</code> class.</p>"},{"location":"reference/lintkit/check/#lintkit.check.Regex.regex","title":"lintkit.check.Regex.regex  <code>abstractmethod</code>","text":"<pre><code>regex()\n</code></pre> <p>Return the regex pattern to match against.</p> <p>Returns:</p> Type Description <code>str</code> <p>Regex pattern to match against.</p> Source code in <code>src/lintkit/check.py</code> <pre><code>@abc.abstractmethod\ndef regex(self) -&gt; str:\n    \"\"\"Return the regex pattern to match against.\n\n    Returns:\n        Regex pattern to match against.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/check/#lintkit.check.Regex.regex_flags","title":"lintkit.check.Regex.regex_flags","text":"<pre><code>regex_flags()\n</code></pre> <p>Additional <code>flags</code> value to pass to <code>re.search</code>.</p> Note <p>This method is optional and can be overridden to provide different <code>flags</code> value.</p> Info <p>See <code>re</code> flags\u00a0\u29c9 for more information.</p> <p>Returns:</p> Type Description <code>int</code> <p>Flag to apply for <code>re.search</code>; <code>0</code> by default, see <code>re.NOFLAG</code> here\u00a0\u29c9 for more information.</p> Source code in <code>src/lintkit/check.py</code> <pre><code>def regex_flags(self) -&gt; int:\n    \"\"\"Additional `flags` value to pass to `re.search`.\n\n    Note:\n        This method is optional and can be overridden to provide\n        different `flags` value.\n\n    Info:\n        See\n        [`re` flags](https://docs.python.org/3/library/re.html#flags)\n        for more information.\n\n    Returns:\n        Flag to apply for `re.search`; `0` by default, see `re.NOFLAG`\n            [here](https://docs.python.org/3/library/re.html#re.NOFLAG)\n            for more information.\n    \"\"\"\n    return re.NOFLAG\n</code></pre>"},{"location":"reference/lintkit/check/#lintkit.check.Regex.check","title":"lintkit.check.Regex.check","text":"<pre><code>check(value)\n</code></pre> <p>Check if the node matches the regex pattern.</p> Success <p>This method is already implemented for you and ready to use.</p> Note <p><code>re.search</code>\u00a0\u29c9 is used to perform the check, its result is checked against <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[str | None]</code> <p>Value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the <code>value</code> matches the regex pattern,</p> <code>bool</code> <p><code>False</code> otherwise.</p> Source code in <code>src/lintkit/check.py</code> <pre><code>def check(self, value: Value[str | None]) -&gt; bool:  # pyright: ignore[reportImplicitOverride]\n    \"\"\"Check if the node matches the regex pattern.\n\n    Success:\n        This method is already implemented for you and ready to use.\n\n    Note:\n        [`re.search`](https://docs.python.org/3/library/re.html#re.search)\n        is used to perform the check, its result is checked against `None`.\n\n    Args:\n        value:\n            Value to check.\n\n    Returns:\n        `True` if the `value` matches the regex pattern,\n        `False` otherwise.\n\n    \"\"\"\n    # Have to unpack `Value` due to re.compile checks allowing only str\n    return (\n        value.__wrapped__ is None\n        or re.search(\n            self.regex(),\n            value.__wrapped__,  # pyright: ignore[reportUnknownArgumentType]\n            flags=self.regex_flags(),\n        )\n        is not None\n    )\n</code></pre>"},{"location":"reference/lintkit/check/#lintkit.check.Contains","title":"lintkit.check.Contains","text":"<p>               Bases: <code>Check</code>, <code>ABC</code></p> <p>Check if the value contains a subitems as specified by <code>keys</code>.</p> <p>This allows users to check if a value contains a specific subitem.</p> Example <pre><code>class ContainsAB(Contains):\n    def keys(self):\n        return [\"a\", \"b\"]\n</code></pre> <p>Now every item supporting <code>__getitem__</code> and <code>__contains__</code> methods can be checked for containing <code>value[\"a\"][\"b\"]</code>, for example:</p> Example <pre><code>contains = {\"a\": {\"b\": 1}}\ndoes_not_contain = {\"a\": {\"c\": 1}}\n\nassert ContainsAB().check(contains) is True\nassert ContainsAB().check(does_not_contain) is False\n</code></pre>"},{"location":"reference/lintkit/check/#lintkit.check.Contains.keys","title":"lintkit.check.Contains.keys  <code>abstractmethod</code>","text":"<pre><code>keys()\n</code></pre> <p>Return the keys to check for.</p> <p>For example, if the returned keys are <code>[\"a\", \"b\", \"c\"]</code>, the check will be performed as follows:</p> <pre><code>value[\"a\"][\"b\"][\"c\"]\n</code></pre> <p>Returns:</p> Type Description <code>Iterable[Hashable]</code> <p>Keys to check for.</p> Source code in <code>src/lintkit/check.py</code> <pre><code>@abc.abstractmethod\ndef keys(self) -&gt; Iterable[Hashable]:\n    \"\"\"Return the keys to check for.\n\n    For example, if the returned keys are `[\"a\", \"b\", \"c\"]`, the check\n    will be performed as follows:\n\n    ```python\n    value[\"a\"][\"b\"][\"c\"]\n    ```\n\n    Returns:\n        Keys to check for.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/check/#lintkit.check.Contains.check","title":"lintkit.check.Contains.check","text":"<pre><code>check(value)\n</code></pre> <p>Check if the <code>value</code> contains <code>keys</code>.</p> Success <p>This method is already implemented for you and ready to use.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[GetItem | None]</code> <p>Value implementing <code>__getitem__</code> and <code>__contains__</code> methods, e.g. <code>dict</code>.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the value has <code>keys</code> in the order specified by the <code>keys</code> method, False otherwise.</p> Source code in <code>src/lintkit/check.py</code> <pre><code>def check(  # pyright: ignore[reportImplicitOverride]\n    self,\n    value: Value[type_definitions.GetItem | None],\n) -&gt; bool:\n    \"\"\"Check if the `value` contains `keys`.\n\n    Success:\n        This method is already implemented for you and ready to use.\n\n    Args:\n        value:\n            Value implementing `__getitem__` and `__contains__` methods,\n            e.g. `dict`.\n\n    Returns:\n        bool:\n            True if the value has `keys` in the order specified by the\n            `keys` method, False otherwise.\n\n    \"\"\"\n    current_value = value\n    for key in self.keys():\n        if (\n            not isinstance(current_value, Mapping)\n            or key not in current_value\n        ):\n            return False\n        current_value = current_value[key]\n\n    return True\n</code></pre>"},{"location":"reference/lintkit/error/","title":"Error","text":"<p><code>lintkit</code> custom errors.</p> <p>These errors should not be caught, but rather used to inform:</p> <ul> <li><code>linter</code> developers about common mistakes they made during rules creation (most common)</li> <li><code>linter</code> users about common mistakes they made (e.g. incorrect <code>noqa</code> ignores usage)</li> </ul> <p>For the first example we might have:</p> <pre><code>import ast\nimport lintkit\n\n\nclass MyRule(\n    lintkit.check.Regex,\n    lintkit.loader.Python,\n    lintkit.rule.Node,\n    code=\"123\",  # offending line (should be an integer)\n):\n    def regex(self):\n        return \".*\"  # match everything\n\n    def values(self):\n        nodes = self.getitem(\"nodes_map\")[ast.ClassDef]\n        for node in nodes:\n            yield lintkit.Value.from_python(node.name, node)\n</code></pre> <p>which raises:</p> <pre><code>lintkit.error.CodeNotIntegerError:\n    Rule 'MyRule' has code '123' which is of type 'str',\n    but should be a positive `integer` .\n</code></pre> <p>while the second example might be (file being linted):</p> <pre><code>def bar():\n    pass\n\n\n# noqa-start: MYRULE10\ndef foo():\n    pass\n\n\n# No noqa-end specified\n</code></pre> <p>which raises:</p> <pre><code>lintkit.error.IgnoreRangeError:\n    End of ignore range missing, please specify it.\n    Start of the range was at line `4` with content: `# noqa-start: MYRULE10`.\n</code></pre>"},{"location":"reference/lintkit/error/#lintkit.error.LintkitError","title":"lintkit.error.LintkitError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all <code>lintkit</code> errors.</p>"},{"location":"reference/lintkit/error/#lintkit.error.LintkitInternalError","title":"lintkit.error.LintkitInternalError","text":"<p>               Bases: <code>LintkitError</code></p> <p>Internal <code>lintkit</code> error which should never be raised.</p>"},{"location":"reference/lintkit/error/#lintkit.error.NotSubclassError","title":"lintkit.error.NotSubclassError","text":"<pre><code>NotSubclassError()\n</code></pre> <p>               Bases: <code>LintkitError</code></p> <p>Raised when the registered <code>rule</code> is not an appropriate subclass.</p> Info <p>Created rule (via <code>code=&lt;NUMBER&gt;</code>) has to inherit from <code>lintkit.rule.Rule</code> __AND [<code>lintkit.loader.Loader</code>].</p> Warning <p>Python's typing does not support intersection types, hence this is checked dynamically.</p> Tip <p>This error is raised automatically by <code>lintkit</code>, no need for explicit raising.</p> <p>The following would be an offending call:</p> <pre><code>import lintkit\n\n\n# Does not inherit from `loader.Loader`\nclass MyRule(lintkit.rule.Node, code=-1):\n    pass\n</code></pre> Source code in <code>src/lintkit/error.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the error.\"\"\"\n    self.message = (\n        \"Rule has to inherit from both 'lintkit.rule.Rule' \"\n        \"and 'lintkit.loader.Loader' classes (or subclasses).\"\n    )\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/lintkit/error/#lintkit.error.IgnoreRangeError","title":"lintkit.error.IgnoreRangeError","text":"<pre><code>IgnoreRangeError(start, line)\n</code></pre> <p>               Bases: <code>LintkitError</code></p> <p>Raised when the end of the ignore range is missing.</p> Note <p>Informs the user when the <code>noqa-range</code>/range ignore was started in a file, but was not explicitly ended.</p> Tip <p>This error is raised automatically by <code>lintkit</code> when rules are ran, no need for explicit raising.</p> <p>For this <code>lintkit.settings.ignore_span_start</code> and <code>lintkit.settings.ignore_span_end</code>:</p> <pre><code>import lintkit\n\n# Anything between igstart: &lt;NAME&gt;&lt;CODE&gt; and igend: &lt;NAME&gt;&lt;CODE&gt;\nlintkit.settings.ignore_span_start: str = \".* igstart: .*{name}{code}.*\"\nlintkit.settings.ignore_span_end: str = \".* igend: .*{name}{code}.*\"\n</code></pre> <p>The following spans would throw <code>IgnoreRangeError</code>:</p> <pre><code># igstart: BU137\n\n\ndef foo():\n    pass\n\n\n# Different error code!\n# igend: BU213\n\n\n# igstart: BU137\ndef bar():\n    pass\n\n\n# No igend at all!\n</code></pre> <p>This would throw:</p> <pre><code>End of ignore range missing, please specify it.\nStart of the range was at line '0' with content: '# igstart: BU137'.\n</code></pre> Note <p>See <code>settings.ignore_span_start</code> and <code>settings.ignore_span_end</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>The line number where the ignore range started.</p> required <code>line</code> <code>str</code> <p>The content of the line where the ignore range started.</p> required Source code in <code>src/lintkit/error.py</code> <pre><code>def __init__(self, start: int, line: str) -&gt; None:\n    \"\"\"Initialize the error.\n\n    Args:\n        start:\n            The line number where the ignore range started.\n        line:\n            The content of the line where the ignore range\n            started.\n\n    \"\"\"\n    self.message = (\n        \"End of ignore range missing, please specify it. \"\n        f\"Start of the range was at line '{start}' with content: '{line}'.\"\n    )\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/lintkit/error/#lintkit.error.NameMissingError","title":"lintkit.error.NameMissingError","text":"<pre><code>NameMissingError()\n</code></pre> <p>               Bases: <code>LintkitError</code></p> <p>Raised when the linter's <code>lintkit.settings.name</code> was not set.</p> Note <p>Informs the linter creator <code>lintkit.settings.name</code> was not set, as this value should be predefined before end users use the linter.</p> <p>Error output:</p> <pre><code>Linter name missing (please set 'lintkit.settings.name' variable)\n</code></pre> Source code in <code>src/lintkit/error.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the error.\"\"\"\n    self.message = (\n        \"Linter name missing (please set 'lintkit.settings.name' variable).\"\n    )\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/lintkit/error/#lintkit.error.CodeNegativeError","title":"lintkit.error.CodeNegativeError","text":"<pre><code>CodeNegativeError(code, rule)\n</code></pre> <p>               Bases: <code>LintkitError</code></p> <p>Raised when a rule with the same code already exists.</p> Note <p>Informs the linter creator, that the rule's code was negative, which is not allowed.</p> <p>Example of offending code:</p> <pre><code>import lintkit\n\n\nclass MyRule(lintkit.rule.Node, lintkit.loader.Loader, code=-1):\n    pass\n</code></pre> <p>which raises:</p> <pre><code>Rule 'MyRule' has code '-1' which should be a positive 'int'.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>The negative code that was provided.</p> required <code>rule</code> <code>type[Rule]</code> <p>The offending rule.</p> required Source code in <code>src/lintkit/error.py</code> <pre><code>def __init__(self, code: int, rule: type[Rule]) -&gt; None:\n    \"\"\"Initialize the error.\n\n    Args:\n        code:\n            The negative code that was provided.\n        rule:\n            The offending rule.\n    \"\"\"\n    self.message = (\n        f\"Rule '{type(rule).__name__}' has code '{code}' \"\n        f\"which should be a positive 'int'.\"\n    )\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/lintkit/error/#lintkit.error.CodeExistsError","title":"lintkit.error.CodeExistsError","text":"<pre><code>CodeExistsError(code, new_rule, old_rule)\n</code></pre> <p>               Bases: <code>LintkitError</code></p> <p>Raised when a rule with the same code already exists.</p> Note <p>Informs the linter creator, that the rule code was already registered by another rule.</p> <p>Example of offending code:</p> <pre><code>import lintkit\n\n\nclass FirstRule(lintkit.rule.Node, lintkit.loader.Loader, code=12):\n    pass\n\n\nclass SecondRule(lintkit.rule.Node, lintkit.loader.Loader, code=12):\n    pass\n</code></pre> <p>which raises:</p> <pre><code>Rule 'SecondRule' cannot be registered with code '12'\nas it is already taken by 'FirstRule'.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>The code shared between the two rules.</p> required <code>new_rule</code> <code>type[Rule]</code> <p>The new rule that was trying to be registered under the same code.</p> required <code>old_rule</code> <code>Rule</code> <p>The rule that was registered previously.</p> required Source code in <code>src/lintkit/error.py</code> <pre><code>def __init__(self, code: int, new_rule: type[Rule], old_rule: Rule) -&gt; None:\n    \"\"\"Initialize the error.\n\n    Args:\n        code:\n            The code shared between the two rules.\n        new_rule:\n            The new rule that was trying to be registered\n            under the same code.\n        old_rule:\n            The rule that was registered previously.\n\n    \"\"\"\n    self.message = (\n        f\"Rule '{type(new_rule).__name__}' cannot be registered with code '{code}' \"\n        f\"as it is already taken by '{type(old_rule).__name__}'.\"\n    )\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/lintkit/error/#lintkit.error.CodeMissingError","title":"lintkit.error.CodeMissingError","text":"<pre><code>CodeMissingError(rule)\n</code></pre> <p>               Bases: <code>LintkitError</code></p> <p>Raised when a given rule was not registered.</p> <p>This error is raised when the user did not specify <code>code</code> argument during class creation but tried to create an instance of the rule.</p> <p>Example of <code>register</code> usage:</p> <pre><code>import lintkit\n\n\nclass MyRule(\n    lintkit.check.Regex,\n    lintkit.loader.JSON,\n    lintkit.rule.Node,\n    # code=2731  # this should be provided\n):\n    pass  # Implementation omitted\n\n\n# Raised during instantiation,\n# usually during `lintkit.run` usage\nrule = MyRule()  # raises CodeMissingError\n</code></pre> <p>which raises:</p> <pre><code>Rule 'MyRule' is missing a 'code' attribute\n(pass it during inheritance, e.g. 'MyRule(lintkit.rule.Node, code=2731)').\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>Rule</code> <p>The rule that was not registered via <code>code</code> keyword argument.</p> required Source code in <code>src/lintkit/error.py</code> <pre><code>def __init__(self, rule: Rule) -&gt; None:\n    \"\"\"Initialize the error.\n\n    Args:\n        rule:\n            The rule that was not registered\n            via `code` keyword argument.\n    \"\"\"\n    name = type(rule).__name__\n    self.message = (\n        f\"Rule '{name}' is missing a 'code' attribute\"\n        \"(pass it during inheritance, e.g. \"\n        f\"'{name}(lintkit.rule.Node, code=2731)').\"\n    )\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/lintkit/loader/","title":"Loader","text":"<p>Core module providing loaders for different data types.</p> <p>When creating a new rule, you should inherit from a specific <code>lintkit.loader.Loader</code> subclass, namely:</p> <ul> <li><code>lintkit.loader.Python</code> - rules working with Python's syntax and     objects, contains variations of parsed     <code>ast.AST</code>\u00a0\u29c9     (e.g. dictionary mapping <code>ast.AST</code> types to their instances within     the code under <code>cls.nodes_map</code> attribute.</li> <li><code>lintkit.loader.JSON</code> - rules working with <code>JSON</code> data, which     is parsed using builtin     JSON library\u00a0\u29c9     with the <code>data</code> saved under <code>data</code> attribute.</li> <li><code>lintkit.loader.TOML</code> - rules working with <code>TOML</code> data, which     is parsed using third-party library     <code>tomlkit</code>\u00a0\u29c9     with the <code>data</code> saved under <code>data</code> attribute.</li> <li><code>lintkit.loader.YAML</code> - rules working with <code>YAML</code> data, which     is parsed using third-party library     <code>ruamel.yaml</code>\u00a0\u29c9     with the <code>data</code> saved under <code>data</code> attribute.</li> <li><code>lintkit.loader.File</code> - if you only need to work with the raw     <code>content</code> of the file or its filename (described as     <code>pathlib.Path</code>\u00a0\u29c9</li> </ul> Tip <p>Check out tutorials for an example usage of loaders.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader","title":"lintkit.loader.Loader","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all loaders.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.content","title":"lintkit.loader.Loader.content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre> <p>Loaded file (its raw <code>string</code> content).</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.file","title":"lintkit.loader.Loader.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.skip","title":"lintkit.loader.Loader.skip  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>skip(file, content)\n</code></pre> <p>Skip data loading based on the file path or content.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being checked.</p> required <code>content</code> <code>str</code> <p>The content of the file as a string.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the file should be skipped, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef skip(cls, file: pathlib.Path, content: str) -&gt; bool:\n    \"\"\"Skip data loading based on the file path or content.\n\n    Args:\n        file:\n            The path to the file being checked.\n        content:\n            The content of the file as a string.\n\n    Returns:\n        `True` if the file should be skipped, `False` otherwise.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.should_cache","title":"lintkit.loader.Loader.should_cache  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>should_cache()\n</code></pre> <p>Check if the data is already cached.</p> Note <p>Unlike <code>lintkit.loader.Loader.skip</code> this method is dependent on class attributes (e.g. <code>data</code> attribute), not external factors.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the data is already loaded and cached,</p> <code>bool</code> <p><code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef should_cache(cls) -&gt; bool:\n    \"\"\"Check if the data is already cached.\n\n    Note:\n        Unlike [`lintkit.loader.Loader.skip`][] this method is dependent\n        on class attributes (e.g. `data` attribute), not external factors.\n\n    Returns:\n        `True` if the data is already loaded and cached,\n        `False` otherwise.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.load","title":"lintkit.loader.Loader.load  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>load(file, content)\n</code></pre> <p>Load the content of the file into attribute(s).</p> Tip <p>You should only use <code>content</code>, if possible, to load the data (avoids multiple disk reads).</p> Tip <p>You should use <code>lintkit.loader.Loader.setitem</code> to save the loaded data in the loader.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being loaded.</p> required <code>content</code> <code>str</code> <p>The content of the file as a string.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef load(cls, file: pathlib.Path, content: str) -&gt; None:\n    \"\"\"Load the content of the file into attribute(s).\n\n    Tip:\n        You should only use `content`, if possible, to load\n        the data (avoids multiple disk reads).\n\n    Tip:\n        You should use [`lintkit.loader.Loader.setitem`][]\n        to save the loaded data in the loader.\n\n    Args:\n        file:\n            The path to the file being loaded.\n        content:\n            The content of the file as a string.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.getitem","title":"lintkit.loader.Loader.getitem  <code>classmethod</code>","text":"<pre><code>getitem(key)\n</code></pre> <p>Get an item from the loader's data.</p> Tip <p>You should use this method to obtain data shared across every rule inheriting from this <code>Loader</code>.</p> Warning <p>If the item is not found an error is raised.</p> Info <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to retrieve the value for.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef getitem(cls, key: str) -&gt; typing.Any:\n    \"\"\"Get an item from the loader's data.\n\n    Tip:\n        You should use this method to obtain\n        data shared across every rule inheriting from\n        this `Loader`.\n\n    Warning:\n        If the item is not found an error is raised.\n\n    Info:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to retrieve the value for.\n    \"\"\"\n    return Loader._loader_data[cls._loader_index][key]\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.setitem","title":"lintkit.loader.Loader.setitem  <code>classmethod</code>","text":"<pre><code>setitem(key, value)\n</code></pre> <p>Set an item in the loader's data.</p> Tip <p>You should use this method to set state shared across every rule inheriting from this <code>Loader</code>.</p> Note <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to set the value for.</p> required <code>value</code> <code>Any</code> <p>The value to set for the given key.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef setitem(cls, key: str, value: typing.Any) -&gt; None:\n    \"\"\"Set an item in the loader's data.\n\n    Tip:\n        You should use this method to set\n        state shared across every rule inheriting from\n        this `Loader`.\n\n    Note:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to set the value for.\n        value:\n            The value to set for the given key.\n    \"\"\"\n    Loader._loader_data[cls._loader_index][key] = value\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Loader.reset","title":"lintkit.loader.Loader.reset  <code>classmethod</code>","text":"<pre><code>reset()\n</code></pre> <p>Reset the loader's data.</p> Info <p>This method is used internally and it is unlikely to be called directly.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef reset(cls) -&gt; None:\n    \"\"\"Reset the loader's data.\n\n    Info:\n        This method is used internally and it is unlikely\n        to be called directly.\n\n    \"\"\"\n    Loader._loader_data = collections.defaultdict(\n        lambda: collections.defaultdict(lambda: None)\n    )\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python","title":"lintkit.loader.Python","text":"<p>               Bases: <code>Loader</code></p> <p>Loader of <code>Python</code> files providing access to <code>ast</code> of the source code.</p> <p>Usage of this loader allows you to work with the elements of the abstract syntax tree (e.g., functions, classes, etc.) of the Python code.</p> <p>A couple of attributes are available for you to use:</p> <ul> <li><code>self.ast</code>: The root of the abstract syntax tree.</li> <li><code>self.nodes_direct</code>: A list of nodes that are direct     children of the root.</li> <li><code>self.nodes_recursive</code>: A list of all nodes in the tree,     including nested ones.</li> <li><code>self.nodes_map</code>: A dictionary mapping node types to     objects of that type. If the <code>node</code> type is not present     in the dictionary, an empty list is returned.</li> </ul> Note <p>Parsed <code>ast</code> is cached, but still might be slower than targeted loaders.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.content","title":"lintkit.loader.Python.content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre> <p>Loaded file (its raw <code>string</code> content).</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.file","title":"lintkit.loader.Python.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.skip","title":"lintkit.loader.Python.skip  <code>classmethod</code>","text":"<pre><code>skip(file, _)\n</code></pre> <p>Skip loading if the file is not a Python file.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being checked.</p> required <code>_</code> <code>str</code> <p>The content of the file (not used).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the file is not a Python file (i.e., does not</p> <code>bool</code> <p>have a <code>.py</code> extension), <code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef skip(cls, file: pathlib.Path, _: str) -&gt; bool:  # pyright: ignore [reportImplicitOverride, reportIncompatibleMethodOverride]\n    \"\"\"Skip loading if the file is not a Python file.\n\n    Args:\n        file:\n            The path to the file being checked.\n        _:\n            The content of the file (not used).\n\n    Returns:\n        `True` if the file is not a Python file (i.e., does not\n        have a `.py` extension), `False` otherwise.\n\n    \"\"\"\n    return file.suffix != \".py\"\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.should_cache","title":"lintkit.loader.Python.should_cache  <code>classmethod</code>","text":"<pre><code>should_cache()\n</code></pre> <p>Check if the <code>ast</code> is already present.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the <code>ast</code>\u00a0\u29c9</p> <code>bool</code> <p>is already loaded and cached, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef should_cache(cls) -&gt; bool:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Check if the `ast` is already present.\n\n    Returns:\n        `True` if the [`ast`](https://docs.python.org/3/library/ast.html)\n        is already loaded and cached, `False` otherwise.\n    \"\"\"\n    return Python.getitem(\"ast\") is not None\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.load","title":"lintkit.loader.Python.load  <code>classmethod</code>","text":"<pre><code>load(_, content)\n</code></pre> <p>Load the content of the Python file and cache the AST.</p> Note <p>The loaded data is saved under the <code>ast</code>, <code>nodes_direct</code>, <code>nodes_recursive</code>, and <code>nodes_map</code> keys.</p> <p>Parameters:</p> Name Type Description Default <code>_</code> <code>Path</code> <p>The path to the file being loaded (not used).</p> required <code>content</code> <code>str</code> <p>The content of the Python file as a string.</p> required <p>Raises:</p> Type Description <code>SyntaxError</code> <p>If the content is not valid Python code.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef load(cls, _: pathlib.Path, content: str) -&gt; None:  # pyright: ignore [reportImplicitOverride, reportIncompatibleMethodOverride]\n    \"\"\"Load the content of the Python file and cache the AST.\n\n    Note:\n        The loaded data is saved under the `ast`, `nodes_direct`,\n        `nodes_recursive`, and `nodes_map` keys.\n\n    Args:\n        _:\n            The path to the file being loaded (not used).\n        content:\n            The content of the Python file as a string.\n\n    Raises:\n        SyntaxError: If the content is not valid Python code.\n    \"\"\"\n    ast_ = ast.parse(content)\n    nodes_direct = list(ast.iter_child_nodes(ast_))\n    nodes_recursive = list(ast.walk(ast_))\n    nodes_map = collections.defaultdict(list)\n    for node in nodes_recursive:\n        nodes_map[type(node)].append(node)\n\n    cls.setitem(\"ast\", ast_)\n    cls.setitem(\"nodes_direct\", nodes_direct)\n    cls.setitem(\"nodes_recursive\", nodes_recursive)\n    cls.setitem(\"nodes_map\", nodes_map)\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.getitem","title":"lintkit.loader.Python.getitem  <code>classmethod</code>","text":"<pre><code>getitem(key)\n</code></pre> <p>Get an item from the loader's data.</p> Tip <p>You should use this method to obtain data shared across every rule inheriting from this <code>Loader</code>.</p> Warning <p>If the item is not found an error is raised.</p> Info <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to retrieve the value for.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef getitem(cls, key: str) -&gt; typing.Any:\n    \"\"\"Get an item from the loader's data.\n\n    Tip:\n        You should use this method to obtain\n        data shared across every rule inheriting from\n        this `Loader`.\n\n    Warning:\n        If the item is not found an error is raised.\n\n    Info:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to retrieve the value for.\n    \"\"\"\n    return Loader._loader_data[cls._loader_index][key]\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.setitem","title":"lintkit.loader.Python.setitem  <code>classmethod</code>","text":"<pre><code>setitem(key, value)\n</code></pre> <p>Set an item in the loader's data.</p> Tip <p>You should use this method to set state shared across every rule inheriting from this <code>Loader</code>.</p> Note <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to set the value for.</p> required <code>value</code> <code>Any</code> <p>The value to set for the given key.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef setitem(cls, key: str, value: typing.Any) -&gt; None:\n    \"\"\"Set an item in the loader's data.\n\n    Tip:\n        You should use this method to set\n        state shared across every rule inheriting from\n        this `Loader`.\n\n    Note:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to set the value for.\n        value:\n            The value to set for the given key.\n    \"\"\"\n    Loader._loader_data[cls._loader_index][key] = value\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.Python.reset","title":"lintkit.loader.Python.reset  <code>classmethod</code>","text":"<pre><code>reset()\n</code></pre> <p>Reset the loader's data.</p> Info <p>This method is used internally and it is unlikely to be called directly.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef reset(cls) -&gt; None:\n    \"\"\"Reset the loader's data.\n\n    Info:\n        This method is used internally and it is unlikely\n        to be called directly.\n\n    \"\"\"\n    Loader._loader_data = collections.defaultdict(\n        lambda: collections.defaultdict(lambda: None)\n    )\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON","title":"lintkit.loader.JSON","text":"<p>               Bases: <code>_ConfigLoader</code></p> <p>Loader for <code>JSON</code> files.</p> Info <p>Loads files with <code>.json</code> extensions. Data is provided as Python plain objects as loaded by standard json library\u00a0\u29c9 under <code>data</code> key.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.content","title":"lintkit.loader.JSON.content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre> <p>Loaded file (its raw <code>string</code> content).</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.file","title":"lintkit.loader.JSON.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.skip","title":"lintkit.loader.JSON.skip  <code>classmethod</code>","text":"<pre><code>skip(file, _)\n</code></pre> <p>Skip loading if the file if it is not of the expected type.</p> Note <p>Types are defined by their file extensions (e.g. <code>json</code>, <code>yaml</code>/<code>yml</code>, etc.) in non-abstract config classes like <code>JSON</code>, <code>YAML</code>, etc.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being checked.</p> required <code>_</code> <code>str</code> <p>The content of the file (not used).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the file is not of the expected type,</p> <code>bool</code> <p><code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef skip(cls, file: pathlib.Path, _: str) -&gt; bool:  # pyright: ignore [reportImplicitOverride, reportIncompatibleMethodOverride]\n    \"\"\"Skip loading if the file if it is not of the expected type.\n\n    Note:\n        Types are defined by their file extensions\n        (e.g. `json`, `yaml`/`yml`, etc.) in non-abstract\n        config classes like `JSON`, `YAML`, etc.\n\n    Args:\n        file:\n            The path to the file being checked.\n        _:\n            The content of the file (not used).\n\n    Returns:\n        `True` if the file is not of the expected type,\n        `False` otherwise.\n\n    \"\"\"\n    return file.suffix not in cls._extensions()\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.should_cache","title":"lintkit.loader.JSON.should_cache  <code>classmethod</code>","text":"<pre><code>should_cache()\n</code></pre> <p>Cache if the <code>data</code> key is already present.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the <code>data</code> field is already there and load</p> <code>bool</code> <p>should not be re-executed, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef should_cache(cls) -&gt; bool:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Cache if the `data` key is already present.\n\n    Returns:\n        `True` if the `data` field is already there and load\n        should not be re-executed, `False` otherwise.\n\n    \"\"\"\n    return cls.getitem(\"data\") is not None  # pragma: no cover\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.load","title":"lintkit.loader.JSON.load  <code>classmethod</code>","text":"<pre><code>load(file, content)\n</code></pre> <p>Load the content of the file and cache it.</p> Note <p>The loaded data is saved under the <code>data</code> key. Use <code>lintkit.loader.Loader.getitem</code> to use it.</p> Example <pre><code># Could be TOML, YAML or other config-like loader\nclass MyRule(lintkit.loader.JSON):\n    def values(self):\n        data = self.getitem(\"data\")\n        # Rest of the code\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being loaded.</p> required <code>content</code> <code>str</code> <p>The content of the file as a string.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef load(cls, file: pathlib.Path, content: str) -&gt; None:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Load the content of the file and cache it.\n\n    Note:\n        The loaded data is saved under the `data` key.\n        Use [`lintkit.loader.Loader.getitem`][] to use it.\n\n    Example:\n        ```python\n        # Could be TOML, YAML or other config-like loader\n        class MyRule(lintkit.loader.JSON):\n            def values(self):\n                data = self.getitem(\"data\")\n                # Rest of the code\n        ```\n\n    Args:\n        file:\n            The path to the file being loaded.\n        content:\n            The content of the file as a string.\n\n    \"\"\"\n    cls.setitem(\"data\", cls._load(file, content))\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.getitem","title":"lintkit.loader.JSON.getitem  <code>classmethod</code>","text":"<pre><code>getitem(key)\n</code></pre> <p>Get an item from the loader's data.</p> Tip <p>You should use this method to obtain data shared across every rule inheriting from this <code>Loader</code>.</p> Warning <p>If the item is not found an error is raised.</p> Info <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to retrieve the value for.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef getitem(cls, key: str) -&gt; typing.Any:\n    \"\"\"Get an item from the loader's data.\n\n    Tip:\n        You should use this method to obtain\n        data shared across every rule inheriting from\n        this `Loader`.\n\n    Warning:\n        If the item is not found an error is raised.\n\n    Info:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to retrieve the value for.\n    \"\"\"\n    return Loader._loader_data[cls._loader_index][key]\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.setitem","title":"lintkit.loader.JSON.setitem  <code>classmethod</code>","text":"<pre><code>setitem(key, value)\n</code></pre> <p>Set an item in the loader's data.</p> Tip <p>You should use this method to set state shared across every rule inheriting from this <code>Loader</code>.</p> Note <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to set the value for.</p> required <code>value</code> <code>Any</code> <p>The value to set for the given key.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef setitem(cls, key: str, value: typing.Any) -&gt; None:\n    \"\"\"Set an item in the loader's data.\n\n    Tip:\n        You should use this method to set\n        state shared across every rule inheriting from\n        this `Loader`.\n\n    Note:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to set the value for.\n        value:\n            The value to set for the given key.\n    \"\"\"\n    Loader._loader_data[cls._loader_index][key] = value\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.JSON.reset","title":"lintkit.loader.JSON.reset  <code>classmethod</code>","text":"<pre><code>reset()\n</code></pre> <p>Reset the loader's data.</p> Info <p>This method is used internally and it is unlikely to be called directly.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef reset(cls) -&gt; None:\n    \"\"\"Reset the loader's data.\n\n    Info:\n        This method is used internally and it is unlikely\n        to be called directly.\n\n    \"\"\"\n    Loader._loader_data = collections.defaultdict(\n        lambda: collections.defaultdict(lambda: None)\n    )\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML","title":"lintkit.loader.TOML","text":"<p>               Bases: <code>_ConfigLoader</code></p> <p>Loader for <code>TOML</code> files.</p> Warning <p>You need <code>tomlkit</code>\u00a0\u29c9 library is necessary to use this loader. You can install it on your own, or use <code>lintkit[toml]</code> extra (advised).</p> Info <p>Loads files with <code>.toml</code> extensions. Data is provided as <code>tomlkit.Items</code>\u00a0\u29c9 under <code>data</code> key.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.content","title":"lintkit.loader.TOML.content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre> <p>Loaded file (its raw <code>string</code> content).</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.file","title":"lintkit.loader.TOML.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.skip","title":"lintkit.loader.TOML.skip  <code>classmethod</code>","text":"<pre><code>skip(file, _)\n</code></pre> <p>Skip loading if the file if it is not of the expected type.</p> Note <p>Types are defined by their file extensions (e.g. <code>json</code>, <code>yaml</code>/<code>yml</code>, etc.) in non-abstract config classes like <code>JSON</code>, <code>YAML</code>, etc.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being checked.</p> required <code>_</code> <code>str</code> <p>The content of the file (not used).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the file is not of the expected type,</p> <code>bool</code> <p><code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef skip(cls, file: pathlib.Path, _: str) -&gt; bool:  # pyright: ignore [reportImplicitOverride, reportIncompatibleMethodOverride]\n    \"\"\"Skip loading if the file if it is not of the expected type.\n\n    Note:\n        Types are defined by their file extensions\n        (e.g. `json`, `yaml`/`yml`, etc.) in non-abstract\n        config classes like `JSON`, `YAML`, etc.\n\n    Args:\n        file:\n            The path to the file being checked.\n        _:\n            The content of the file (not used).\n\n    Returns:\n        `True` if the file is not of the expected type,\n        `False` otherwise.\n\n    \"\"\"\n    return file.suffix not in cls._extensions()\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.should_cache","title":"lintkit.loader.TOML.should_cache  <code>classmethod</code>","text":"<pre><code>should_cache()\n</code></pre> <p>Cache if the <code>data</code> key is already present.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the <code>data</code> field is already there and load</p> <code>bool</code> <p>should not be re-executed, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef should_cache(cls) -&gt; bool:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Cache if the `data` key is already present.\n\n    Returns:\n        `True` if the `data` field is already there and load\n        should not be re-executed, `False` otherwise.\n\n    \"\"\"\n    return cls.getitem(\"data\") is not None  # pragma: no cover\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.load","title":"lintkit.loader.TOML.load  <code>classmethod</code>","text":"<pre><code>load(file, content)\n</code></pre> <p>Load the content of the file and cache it.</p> Note <p>The loaded data is saved under the <code>data</code> key. Use <code>lintkit.loader.Loader.getitem</code> to use it.</p> Example <pre><code># Could be TOML, YAML or other config-like loader\nclass MyRule(lintkit.loader.JSON):\n    def values(self):\n        data = self.getitem(\"data\")\n        # Rest of the code\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being loaded.</p> required <code>content</code> <code>str</code> <p>The content of the file as a string.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef load(cls, file: pathlib.Path, content: str) -&gt; None:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Load the content of the file and cache it.\n\n    Note:\n        The loaded data is saved under the `data` key.\n        Use [`lintkit.loader.Loader.getitem`][] to use it.\n\n    Example:\n        ```python\n        # Could be TOML, YAML or other config-like loader\n        class MyRule(lintkit.loader.JSON):\n            def values(self):\n                data = self.getitem(\"data\")\n                # Rest of the code\n        ```\n\n    Args:\n        file:\n            The path to the file being loaded.\n        content:\n            The content of the file as a string.\n\n    \"\"\"\n    cls.setitem(\"data\", cls._load(file, content))\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.getitem","title":"lintkit.loader.TOML.getitem  <code>classmethod</code>","text":"<pre><code>getitem(key)\n</code></pre> <p>Get an item from the loader's data.</p> Tip <p>You should use this method to obtain data shared across every rule inheriting from this <code>Loader</code>.</p> Warning <p>If the item is not found an error is raised.</p> Info <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to retrieve the value for.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef getitem(cls, key: str) -&gt; typing.Any:\n    \"\"\"Get an item from the loader's data.\n\n    Tip:\n        You should use this method to obtain\n        data shared across every rule inheriting from\n        this `Loader`.\n\n    Warning:\n        If the item is not found an error is raised.\n\n    Info:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to retrieve the value for.\n    \"\"\"\n    return Loader._loader_data[cls._loader_index][key]\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.setitem","title":"lintkit.loader.TOML.setitem  <code>classmethod</code>","text":"<pre><code>setitem(key, value)\n</code></pre> <p>Set an item in the loader's data.</p> Tip <p>You should use this method to set state shared across every rule inheriting from this <code>Loader</code>.</p> Note <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to set the value for.</p> required <code>value</code> <code>Any</code> <p>The value to set for the given key.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef setitem(cls, key: str, value: typing.Any) -&gt; None:\n    \"\"\"Set an item in the loader's data.\n\n    Tip:\n        You should use this method to set\n        state shared across every rule inheriting from\n        this `Loader`.\n\n    Note:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to set the value for.\n        value:\n            The value to set for the given key.\n    \"\"\"\n    Loader._loader_data[cls._loader_index][key] = value\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.TOML.reset","title":"lintkit.loader.TOML.reset  <code>classmethod</code>","text":"<pre><code>reset()\n</code></pre> <p>Reset the loader's data.</p> Info <p>This method is used internally and it is unlikely to be called directly.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef reset(cls) -&gt; None:\n    \"\"\"Reset the loader's data.\n\n    Info:\n        This method is used internally and it is unlikely\n        to be called directly.\n\n    \"\"\"\n    Loader._loader_data = collections.defaultdict(\n        lambda: collections.defaultdict(lambda: None)\n    )\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML","title":"lintkit.loader.YAML","text":"<p>               Bases: <code>_ConfigLoader</code></p> <p>Loader for <code>YAML</code> files.</p> Warning <p>You need <code>ruamel.yaml</code>\u00a0\u29c9 library to use this loader. You can install it on your own, or use <code>lintkit[yaml]</code> extra (advised).</p> Info <p>Loads files with <code>.yaml</code> or <code>.yml</code> extensions. Data is already provided as <code>lintkit.Value</code> under <code>data</code> key. This is the only <code>lintkit.loader.Loader</code> which does not need <code>lintkit.Value.from</code> method!</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.content","title":"lintkit.loader.YAML.content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre> <p>Loaded file (its raw <code>string</code> content).</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.file","title":"lintkit.loader.YAML.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.skip","title":"lintkit.loader.YAML.skip  <code>classmethod</code>","text":"<pre><code>skip(file, _)\n</code></pre> <p>Skip loading if the file if it is not of the expected type.</p> Note <p>Types are defined by their file extensions (e.g. <code>json</code>, <code>yaml</code>/<code>yml</code>, etc.) in non-abstract config classes like <code>JSON</code>, <code>YAML</code>, etc.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being checked.</p> required <code>_</code> <code>str</code> <p>The content of the file (not used).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the file is not of the expected type,</p> <code>bool</code> <p><code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef skip(cls, file: pathlib.Path, _: str) -&gt; bool:  # pyright: ignore [reportImplicitOverride, reportIncompatibleMethodOverride]\n    \"\"\"Skip loading if the file if it is not of the expected type.\n\n    Note:\n        Types are defined by their file extensions\n        (e.g. `json`, `yaml`/`yml`, etc.) in non-abstract\n        config classes like `JSON`, `YAML`, etc.\n\n    Args:\n        file:\n            The path to the file being checked.\n        _:\n            The content of the file (not used).\n\n    Returns:\n        `True` if the file is not of the expected type,\n        `False` otherwise.\n\n    \"\"\"\n    return file.suffix not in cls._extensions()\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.should_cache","title":"lintkit.loader.YAML.should_cache  <code>classmethod</code>","text":"<pre><code>should_cache()\n</code></pre> <p>Cache if the <code>data</code> key is already present.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the <code>data</code> field is already there and load</p> <code>bool</code> <p>should not be re-executed, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef should_cache(cls) -&gt; bool:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Cache if the `data` key is already present.\n\n    Returns:\n        `True` if the `data` field is already there and load\n        should not be re-executed, `False` otherwise.\n\n    \"\"\"\n    return cls.getitem(\"data\") is not None  # pragma: no cover\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.load","title":"lintkit.loader.YAML.load  <code>classmethod</code>","text":"<pre><code>load(file, content)\n</code></pre> <p>Load the content of the file and cache it.</p> Note <p>The loaded data is saved under the <code>data</code> key. Use <code>lintkit.loader.Loader.getitem</code> to use it.</p> Example <pre><code># Could be TOML, YAML or other config-like loader\nclass MyRule(lintkit.loader.JSON):\n    def values(self):\n        data = self.getitem(\"data\")\n        # Rest of the code\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The path to the file being loaded.</p> required <code>content</code> <code>str</code> <p>The content of the file as a string.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef load(cls, file: pathlib.Path, content: str) -&gt; None:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Load the content of the file and cache it.\n\n    Note:\n        The loaded data is saved under the `data` key.\n        Use [`lintkit.loader.Loader.getitem`][] to use it.\n\n    Example:\n        ```python\n        # Could be TOML, YAML or other config-like loader\n        class MyRule(lintkit.loader.JSON):\n            def values(self):\n                data = self.getitem(\"data\")\n                # Rest of the code\n        ```\n\n    Args:\n        file:\n            The path to the file being loaded.\n        content:\n            The content of the file as a string.\n\n    \"\"\"\n    cls.setitem(\"data\", cls._load(file, content))\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.getitem","title":"lintkit.loader.YAML.getitem  <code>classmethod</code>","text":"<pre><code>getitem(key)\n</code></pre> <p>Get an item from the loader's data.</p> Tip <p>You should use this method to obtain data shared across every rule inheriting from this <code>Loader</code>.</p> Warning <p>If the item is not found an error is raised.</p> Info <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to retrieve the value for.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef getitem(cls, key: str) -&gt; typing.Any:\n    \"\"\"Get an item from the loader's data.\n\n    Tip:\n        You should use this method to obtain\n        data shared across every rule inheriting from\n        this `Loader`.\n\n    Warning:\n        If the item is not found an error is raised.\n\n    Info:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to retrieve the value for.\n    \"\"\"\n    return Loader._loader_data[cls._loader_index][key]\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.setitem","title":"lintkit.loader.YAML.setitem  <code>classmethod</code>","text":"<pre><code>setitem(key, value)\n</code></pre> <p>Set an item in the loader's data.</p> Tip <p>You should use this method to set state shared across every rule inheriting from this <code>Loader</code>.</p> Note <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to set the value for.</p> required <code>value</code> <code>Any</code> <p>The value to set for the given key.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef setitem(cls, key: str, value: typing.Any) -&gt; None:\n    \"\"\"Set an item in the loader's data.\n\n    Tip:\n        You should use this method to set\n        state shared across every rule inheriting from\n        this `Loader`.\n\n    Note:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to set the value for.\n        value:\n            The value to set for the given key.\n    \"\"\"\n    Loader._loader_data[cls._loader_index][key] = value\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.YAML.reset","title":"lintkit.loader.YAML.reset  <code>classmethod</code>","text":"<pre><code>reset()\n</code></pre> <p>Reset the loader's data.</p> Info <p>This method is used internally and it is unlikely to be called directly.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef reset(cls) -&gt; None:\n    \"\"\"Reset the loader's data.\n\n    Info:\n        This method is used internally and it is unlikely\n        to be called directly.\n\n    \"\"\"\n    Loader._loader_data = collections.defaultdict(\n        lambda: collections.defaultdict(lambda: None)\n    )\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.File","title":"lintkit.loader.File","text":"<p>               Bases: <code>Loader</code></p> <p>Load whole <code>file</code>.</p> Info <p>If this <code>loader</code> is used, you will likely work directly on a <code>pathlib.Path</code> object, hence this <code>load</code> is essentially a <code>no-op</code>.</p> Tip <p>As <code>lintkit.rule.Rule</code> already has the <code>file</code> attribute, this loader is mostly used to express intent.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.content","title":"lintkit.loader.File.content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre> <p>Loaded file (its raw <code>string</code> content).</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>.</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.file","title":"lintkit.loader.File.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.skip","title":"lintkit.loader.File.skip  <code>classmethod</code>","text":"<pre><code>skip(_, __)\n</code></pre> <p>Never skip loading.</p> Important <p>If you wish to target a file with specific extension you can update this method, see below.</p> Example <pre><code>import lintkit\n\n\nclass PythonFile(lintkit.loader.File):\n    def skip(cls, filename: pathlib.Path, _: str) -&gt; bool:\n        return filename.suffix != \".py\"\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>_</code> <code>Path</code> <p>The path to the file being checked (not used by default).</p> required <code>__</code> <code>str</code> <p>The content of the file (not used by default).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>False</code> always, as this loader should never be skipped.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef skip(cls, _: pathlib.Path, __: str) -&gt; bool:  # pyright: ignore [reportImplicitOverride, reportIncompatibleMethodOverride]\n    \"\"\"Never skip loading.\n\n    Important:\n        If you wish to target a file with specific extension\n        you can update this method, see below.\n\n    Example:\n        ```python\n        import lintkit\n\n\n        class PythonFile(lintkit.loader.File):\n            def skip(cls, filename: pathlib.Path, _: str) -&gt; bool:\n                return filename.suffix != \".py\"\n        ```\n\n    Args:\n        _:\n            The path to the file being checked (not used by default).\n        __:\n            The content of the file (not used by default).\n\n    Returns:\n        `False` always, as this loader should never be skipped.\n\n    \"\"\"\n    return False\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.should_cache","title":"lintkit.loader.File.should_cache  <code>classmethod</code>","text":"<pre><code>should_cache()\n</code></pre> <p>Never cache this loader.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef should_cache(cls) -&gt; bool:  # pyright: ignore [reportImplicitOverride]\n    \"\"\"Never cache this loader.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.load","title":"lintkit.loader.File.load  <code>classmethod</code>","text":"<pre><code>load(_, __)\n</code></pre> <p>Do not load anything (<code>no-op</code>).</p> <p>Parameters:</p> Name Type Description Default <code>_</code> <code>Path</code> <p>The path to the file being loaded (not used).</p> required <code>__</code> <code>str</code> <p>The content of the file (not used).</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef load(cls, _: pathlib.Path, __: str) -&gt; None:  # pyright: ignore [reportImplicitOverride, reportIncompatibleMethodOverride]\n    \"\"\"Do not load anything (`no-op`).\n\n    Args:\n        _:\n            The path to the file being loaded (not used).\n        __:\n            The content of the file (not used).\n\n    \"\"\"\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.getitem","title":"lintkit.loader.File.getitem  <code>classmethod</code>","text":"<pre><code>getitem(key)\n</code></pre> <p>Get an item from the loader's data.</p> Tip <p>You should use this method to obtain data shared across every rule inheriting from this <code>Loader</code>.</p> Warning <p>If the item is not found an error is raised.</p> Info <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to retrieve the value for.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef getitem(cls, key: str) -&gt; typing.Any:\n    \"\"\"Get an item from the loader's data.\n\n    Tip:\n        You should use this method to obtain\n        data shared across every rule inheriting from\n        this `Loader`.\n\n    Warning:\n        If the item is not found an error is raised.\n\n    Info:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to retrieve the value for.\n    \"\"\"\n    return Loader._loader_data[cls._loader_index][key]\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.setitem","title":"lintkit.loader.File.setitem  <code>classmethod</code>","text":"<pre><code>setitem(key, value)\n</code></pre> <p>Set an item in the loader's data.</p> Tip <p>You should use this method to set state shared across every rule inheriting from this <code>Loader</code>.</p> Note <p>This is a convenience method to hide internal caching mechanism and allow natural access to the underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to set the value for.</p> required <code>value</code> <code>Any</code> <p>The value to set for the given key.</p> required Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef setitem(cls, key: str, value: typing.Any) -&gt; None:\n    \"\"\"Set an item in the loader's data.\n\n    Tip:\n        You should use this method to set\n        state shared across every rule inheriting from\n        this `Loader`.\n\n    Note:\n        This is a convenience method to hide internal\n        caching mechanism and allow natural access\n        to the underlying data.\n\n    Args:\n        key:\n            The key to set the value for.\n        value:\n            The value to set for the given key.\n    \"\"\"\n    Loader._loader_data[cls._loader_index][key] = value\n</code></pre>"},{"location":"reference/lintkit/loader/#lintkit.loader.File.reset","title":"lintkit.loader.File.reset  <code>classmethod</code>","text":"<pre><code>reset()\n</code></pre> <p>Reset the loader's data.</p> Info <p>This method is used internally and it is unlikely to be called directly.</p> Source code in <code>src/lintkit/loader.py</code> <pre><code>@classmethod\ndef reset(cls) -&gt; None:\n    \"\"\"Reset the loader's data.\n\n    Info:\n        This method is used internally and it is unlikely\n        to be called directly.\n\n    \"\"\"\n    Loader._loader_data = collections.defaultdict(\n        lambda: collections.defaultdict(lambda: None)\n    )\n</code></pre>"},{"location":"reference/lintkit/output/","title":"Output","text":"<p>Out-of-the-box output functions for the linter.</p>"},{"location":"reference/lintkit/output/#lintkit.output--default","title":"Default","text":"Note <p>This module provides a default function, which chooses <code>rich</code>\u00a0\u29c9 to display linter output (if available) with <code>stdout</code> fallback.</p> <p>All provided output functions follow this string output:</p> <pre><code>\"&lt;FILE&gt;:&lt;LINE&gt;:&lt;COLUMN&gt; &lt;RULE-TYPE&gt;&lt;RULE-CODE&gt;: &lt;MESSAGE&gt;\"\n</code></pre> <p>For example: <pre><code>\"/home/user1/foo.py:27:31  SUPERULE12: This line is not super, use `super`\"\n</code></pre></p>"},{"location":"reference/lintkit/output/#lintkit.output--custom","title":"Custom","text":"<p>To change <code>default</code> output you can use one of the provided options, e.g.:</p> <pre><code>import lintkit\n\n# To set `print` as the linter output.\nlintkit.settings.output = lintkit.output.stdout\n</code></pre> <p>You can also define your own output function as long as you use a function with the following signature:</p> <pre><code>def my_output(\n    *,\n    name: str,\n    code: int,\n    message: str,\n    file: pathlib.Path | None = None,\n    start_line: int | None = None,\n    start_column: int | None = None,\n    end_line: int | None = None,\n    end_column: int | None = None,\n) -&gt; None:\n    pass\n</code></pre> <p>which should (somehow) output the linter results (e.g. to a file).</p> Note <p>You don't have to use all values (e.g. <code>end_line</code>), use only the values you find necessary (provided <code>output</code> functions do not use <code>end_line</code> nor <code>end_column</code> even if these are present.</p> Warning <p>Different <code>loader</code>s might not provide some values (these which might be <code>None</code> above), your custom function should handle these cases.</p>"},{"location":"reference/lintkit/output/#lintkit.output.stdout","title":"lintkit.output.stdout","text":"<pre><code>stdout(name, code, message, file=None, start_line=None, start_column=None, end_line=None, end_column=None)\n</code></pre> <p>Output linter message to <code>stdout</code> using <code>print</code>.</p> Info <p>Default <code>output</code> if <code>rich</code>\u00a0\u29c9 is not available.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the linter (equal to <code>lintkit.settings.name</code>)</p> required <code>code</code> <code>int</code> <p>Numerical code of specific rule (e.g. <code>12</code>).</p> required <code>message</code> <code>str</code> <p>Error message of specific rule.</p> required <code>file</code> <code>Path | None</code> <p>Full path to the file where the error occurred.</p> <code>None</code> <code>start_line</code> <code>int | None</code> <p>Start line number of the error, if any.</p> <code>None</code> <code>start_column</code> <code>int | None</code> <p>Start column number of the error, if any.</p> <code>None</code> <code>end_line</code> <code>int | None</code> <p>End line number of the error, if any (unused).</p> <code>None</code> <code>end_column</code> <code>int | None</code> <p>End column number of the error, if any (unused).</p> <code>None</code> Source code in <code>src/lintkit/output.py</code> <pre><code>def stdout(  # noqa: PLR0913\n    name: str,\n    code: int,\n    message: str,\n    file: pathlib.Path | None = None,\n    start_line: int | None = None,\n    start_column: int | None = None,\n    end_line: int | None = None,  # noqa: ARG001 # pyright: ignore[reportUnusedParameter]\n    end_column: int | None = None,  # noqa: ARG001 # pyright: ignore[reportUnusedParameter]\n) -&gt; None:\n    \"\"\"Output linter message to `stdout` using `print`.\n\n    Info:\n        Default `output` if [`rich`](https://github.com/Textualize/rich)\n        is not available.\n\n    Args:\n        name:\n            Name of the linter (equal to `lintkit.settings.name`)\n        code:\n            Numerical code of specific rule (e.g. `12`).\n        message:\n            Error message of specific rule.\n        file:\n            Full path to the file where the error occurred.\n        start_line:\n            Start line number of the error, if any.\n        start_column:\n            Start column number of the error, if any.\n        end_line:\n            End line number of the error, if any (unused).\n        end_column:\n            End column number of the error, if any (unused).\n\n    \"\"\"\n    print(  # noqa: T201\n        f\"{file or 'ALL'}:{start_line}:{start_column}: {name}{code}: {message}\",\n    )\n</code></pre>"},{"location":"reference/lintkit/output/#lintkit.output.rich","title":"lintkit.output.rich","text":"<pre><code>rich(name, code, message, file=None, start_line=None, start_column=None, end_line=None, end_column=None)\n</code></pre> <p>Output linter message to <code>stdout</code> using <code>rich</code>.</p> Info <p>Default <code>output</code> function (if <code>rich</code> library is available).</p> Note <p>See here\u00a0\u29c9 for more information about the <code>rich</code> library.</p> Tip <p>You can install compatible <code>rich</code> using <code>extras</code>, e.g. <code>pip install lintkit[rich]</code> or <code>pip install lintkit[output]</code></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the linter (equal to <code>lintkit.settings.name</code>)</p> required <code>code</code> <code>int</code> <p>Numerical code of specific rule (e.g. <code>12</code>).</p> required <code>message</code> <code>str</code> <p>Error message of specific rule.</p> required <code>file</code> <code>Path | None</code> <p>Full path to the file where the error occurred.</p> <code>None</code> <code>start_line</code> <code>int | None</code> <p>Start line number of the error, if any.</p> <code>None</code> <code>start_column</code> <code>int | None</code> <p>Start column number of the error, if any.</p> <code>None</code> <code>end_line</code> <code>int | None</code> <p>End line number of the error, if any (unused).</p> <code>None</code> <code>end_column</code> <code>int | None</code> <p>End column number of the error, if any (unused).</p> <code>None</code> Source code in <code>src/lintkit/output.py</code> <pre><code>def rich(  # noqa: PLR0913\n    name: str,\n    code: int,\n    message: str,\n    file: pathlib.Path | None = None,\n    start_line: int | None = None,\n    start_column: int | None = None,\n    end_line: int | None = None,  # noqa: ARG001 # pyright: ignore[reportUnusedParameter]\n    end_column: int | None = None,  # noqa: ARG001 # pyright: ignore[reportUnusedParameter]\n) -&gt; None:\n    \"\"\"Output linter message to `stdout` using `rich`.\n\n    Info:\n        Default `output` function (if `rich` library\n        is available).\n\n    Note:\n        See [here](https://github.com/Textualize/rich) for more\n        information about the `rich` library.\n\n    Tip:\n        You can install compatible `rich` using `extras`,\n        e.g. `pip install lintkit[rich]` or\n        `pip install lintkit[output]`\n\n    Args:\n        name:\n            Name of the linter (equal to `lintkit.settings.name`)\n        code:\n            Numerical code of specific rule (e.g. `12`).\n        message:\n            Error message of specific rule.\n        file:\n            Full path to the file where the error occurred.\n        start_line:\n            Start line number of the error, if any.\n        start_column:\n            Start column number of the error, if any.\n        end_line:\n            End line number of the error, if any (unused).\n        end_column:\n            End column number of the error, if any (unused).\n\n    \"\"\"\n    r.print(\n        f\"[bold]{file or 'ALL'}[/bold]:{start_line}[cyan]:[/cyan]{start_column}: [bold red]{name}{code}[/bold red] {message}\",  # noqa: E501\n    )\n</code></pre>"},{"location":"reference/lintkit/registry/","title":"Registry","text":"<p>Module containing registered rules and functions to update/discover them.</p> Info <p>Provided functions do not change the registry contents as it is managed automatically during <code>rule</code> creation.</p> Tip <p>When creating custom linter, you should check <code>lintkit.registry.inject</code> function for an option to easily pass configuration data.</p>"},{"location":"reference/lintkit/registry/#lintkit.registry.codes","title":"lintkit.registry.codes","text":"<pre><code>codes()\n</code></pre> <p>Get all registered rule codes.</p> <p>Returns:</p> Type Description <code>tuple[int, ...]</code> <p>A tuple of all registered rule codes.</p> Source code in <code>src/lintkit/registry.py</code> <pre><code>def codes() -&gt; tuple[int, ...]:\n    \"\"\"Get all registered rule codes.\n\n    Returns:\n        A tuple of all registered rule codes.\n\n    \"\"\"\n    return tuple(_registry.keys())\n</code></pre>"},{"location":"reference/lintkit/registry/#lintkit.registry.rules","title":"lintkit.registry.rules","text":"<pre><code>rules()\n</code></pre> <p>Get all registered rules.</p> <p>Returns:</p> Type Description <code>tuple[Rule, ...]</code> <p>A tuple of all registered rules.</p> Source code in <code>src/lintkit/registry.py</code> <pre><code>def rules() -&gt; tuple[Rule, ...]:\n    \"\"\"Get all registered rules.\n\n    Returns:\n        A tuple of all registered rules.\n\n    \"\"\"\n    return tuple(_registry.values())\n</code></pre>"},{"location":"reference/lintkit/registry/#lintkit.registry.inject","title":"lintkit.registry.inject","text":"<pre><code>inject(attribute, value)\n</code></pre> <p>Inject an attribute into all rules.</p> Tip <p>This is useful for injecting custom attributes into all rules, such as a custom configuration or a shared resource.</p> <p>Example: <pre><code>import lintkit\n\nconfig = {\"example\": \"value\"}\n\n# Now all rules can access config and use it\nlintkit.registry.inject(\"config\", config)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>attribute</code> <code>str</code> <p>The name of the attribute to inject.</p> required <code>value</code> <code>Any</code> <p>The value to inject.</p> required Source code in <code>src/lintkit/registry.py</code> <pre><code>def inject(attribute: str, value: typing.Any) -&gt; None:\n    \"\"\"Inject an attribute into all rules.\n\n    Tip:\n        This is useful for injecting custom attributes into all rules,\n        such as a custom configuration or a shared resource.\n\n    Example:\n    ```python\n    import lintkit\n\n    config = {\"example\": \"value\"}\n\n    # Now all rules can access config and use it\n    lintkit.registry.inject(\"config\", config)\n    ```\n\n    Args:\n        attribute:\n            The name of the attribute to inject.\n        value:\n            The value to inject.\n\n    \"\"\"\n    for rule in _registry.values():\n        setattr(type(rule), attribute, value)\n</code></pre>"},{"location":"reference/lintkit/registry/#lintkit.registry.query","title":"lintkit.registry.query","text":"<pre><code>query(include_codes=None, exclude_codes=None)\n</code></pre> <p>Query the registry for rules.</p> Warning <p><code>exclude</code> takes precedence over <code>include</code></p> <p>Example: <pre><code>import lintkit\n\nfor rule in lintkit.registry.query(exclude_codes=[1, 2, 3]):\n    print(rule.code, rule.description)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>include_codes</code> <code>Iterable[int] | None</code> <p>The codes of the rules to include, if any.</p> <code>None</code> <code>exclude_codes</code> <code>Iterable[int] | None</code> <p>The codes of the rules to exclude, if any. (takes precedence over <code>include_codes</code>).</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Rule]</code> <p>An iterator over the rules that match the query.</p> Source code in <code>src/lintkit/registry.py</code> <pre><code>def query(\n    include_codes: Iterable[int] | None = None,\n    exclude_codes: Iterable[int] | None = None,\n) -&gt; Iterator[Rule]:\n    \"\"\"Query the registry for rules.\n\n    Warning:\n        `exclude` takes precedence over `include`\n\n    Example:\n    ```python\n    import lintkit\n\n    for rule in lintkit.registry.query(exclude_codes=[1, 2, 3]):\n        print(rule.code, rule.description)\n    ```\n\n    Args:\n        include_codes:\n            The codes of the rules to include, if any.\n        exclude_codes:\n            The codes of the rules to exclude, if any.\n            (takes precedence over `include_codes`).\n\n    Returns:\n        An iterator over the rules that match the query.\n\n    \"\"\"\n    codes = _process(_registry.keys(), include_codes, exclude_codes)\n    return (rule for code, rule in _registry.items() if code in codes)\n</code></pre>"},{"location":"reference/lintkit/rule/","title":"Rule","text":"<p>Core module providing rule defining capabilities.</p> <p>When creating a new rule, one should inherit from a specific <code>Rule</code> subclass, namely:</p> <ul> <li><code>lintkit.rule.Node</code> for a rule that is applied on a node</li> <li><code>lintkit.rule.File</code> for a rule that is applied on a whole file</li> <li><code>lintkit.rule.All</code> for a rule that has a check applied on all files</li> </ul> Tip <p>Check out Advanced tutorial and File tutorial to see all of them in real life examples.</p>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule","title":"lintkit.rule.Rule","text":"<pre><code>Rule()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base class for all <code>rule</code>s.</p> Warning <p>This class should not be used directly. Use <code>lintkit.rule.Node</code>, <code>lintkit.rule.File</code> or <code>lintkit.rule.All</code>.</p> Warning <p><code>__init__</code> is called internally by the framework, linter/rule creators should not use it directly.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the rule.\n\n    Warning:\n        `__init__` is called internally by the framework,\n        linter/rule creators __should not__ use it directly.\n\n    \"\"\"\n    if self.code is None:\n        raise e.CodeMissingError(self)\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.code","title":"lintkit.rule.Rule.code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code = None\n</code></pre> <p>Integer code assigned to the rule.</p> Warning <p>Specifying this value constitutes <code>rule</code> creation! Without it, such class acts as a shared functionality.</p> Example <pre><code>import lintkit\n\n# Can further inherit from it to create complex rules.\nclass NotRule(lintkit.rule.Node):\n    pass\n\n# Is a Rule, cause `code` argument is provided\nclass Rule(NotRule, code=0):\n    pass\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.file","title":"lintkit.rule.Rule.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.values","title":"lintkit.rule.Rule.values  <code>abstractmethod</code>","text":"<pre><code>values()\n</code></pre> <p>Function returning values to check against.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Warning <p>This is the core function which should always be implemented for each rule.</p> <p>Yields:</p> Type Description <code>Iterable[Value[Any]]</code> <p>Values to be checked against this rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef values(self) -&gt; Iterable[Value[typing.Any]]:\n    \"\"\"Function returning values to check against.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Warning:\n        __This is the core function which should always\n        be implemented for each rule.__\n\n    Yields:\n        Values to be checked against this rule.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.check","title":"lintkit.rule.Rule.check  <code>abstractmethod</code>","text":"<pre><code>check(value)\n</code></pre> <p>Perform the check on a certain <code>value</code>.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Note <p>This method is inherited from <code>lintkit.check.Check</code></p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[Any]</code> <p>Value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if rule is violated, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef check(self, value: Value[typing.Any]) -&gt; bool:\n    \"\"\"Perform the check on a certain `value`.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Note:\n        This method is inherited from [`lintkit.check.Check`][]\n\n    Args:\n        value:\n            Value to check.\n\n    Returns:\n        `True` if rule is violated, `False` otherwise.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.description","title":"lintkit.rule.Rule.description","text":"<pre><code>description()\n</code></pre> <p>Description of the rule.</p> Note <p>You can use this method to provide end users with human readable description of the rule.</p> <p>Returns:</p> Type Description <code>str</code> <p>Description of the rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def description(self) -&gt; str:  # pragma: no cover\n    \"\"\"Description of the rule.\n\n    Note:\n        You can use this method to provide end users\n        with human readable description of the rule.\n\n    Returns:\n        Description of the rule.\n    \"\"\"\n    return \"No description provided.\"\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.__init_subclass__","title":"lintkit.rule.Rule.__init_subclass__","text":"<pre><code>__init_subclass__(*, code=None)\n</code></pre> <p>Initialize the class (not instance!).</p> Info <p>This method is defined so the user can pass <code>code</code> as an argument during inheritance.</p> Warning <p><code>code</code> has to uniquely identify the <code>rule</code>!</p> Example <pre><code>import lintkit\n\n\n# Pass the code as an argument\nclass MyRule(lintkit.rule.Node, code=42):\n    pass\n</code></pre> Warning <p>When <code>code</code> is provided it will define the <code>rule</code>. Before that you can subclass <code>Rule</code> and implement specific methods to be shared by other rules.</p> Example <pre><code>import lintkit\n\n# code argument not provided, this is\n# still an interface, not a rule\nclass SharedFunctionality(lintkit.rule.Node):\n    @classmethod\n    def shared_functionality(cls):\n        # Define your shared functionality\n\n# actual rule\nclass Rule(SharedFunctionality, code=21):\n    pass\n</code></pre> <p>Raises:</p> Type Description <code>CodeNegativeError</code> <p>If <code>code</code> is negative.</p> <code>CodeExistsError</code> <p>If a rule with the same <code>code</code> already exists.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int | None</code> <p>Code to assign for the rule.</p> <code>None</code> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init_subclass__(\n    cls,\n    *,\n    code: int | None = None,\n) -&gt; None:\n    \"\"\"Initialize the class (__not instance!__).\n\n    Info:\n        This method is defined so the user can pass `code`\n        as an argument during inheritance.\n\n    Warning:\n        `code` has to uniquely identify the `rule`!\n\n    Example:\n        ```python\n        import lintkit\n\n\n        # Pass the code as an argument\n        class MyRule(lintkit.rule.Node, code=42):\n            pass\n        ```\n\n    Warning:\n        When `code` is provided it will define the `rule`.\n        Before that you can subclass `Rule` and implement\n        specific methods to be shared by other rules.\n\n    Example:\n        ```python\n        import lintkit\n\n        # code argument not provided, this is\n        # still an interface, not a rule\n        class SharedFunctionality(lintkit.rule.Node):\n            @classmethod\n            def shared_functionality(cls):\n                # Define your shared functionality\n\n        # actual rule\n        class Rule(SharedFunctionality, code=21):\n            pass\n        ```\n\n    Raises:\n        lintkit.error.CodeNegativeError:\n            If `code` is negative.\n        lintkit.error.CodeExistsError:\n            If a rule with the same `code` already exists.\n\n    Args:\n        code:\n            Code to assign for the rule.\n\n    \"\"\"\n    # Code actually defines the rule\n    if code is not None:\n        registry._add(cls, code)  # noqa: SLF001\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.ignored","title":"lintkit.rule.Rule.ignored","text":"<pre><code>ignored(value)\n</code></pre> <p>Check if the value should be ignored by this <code>rule</code>.</p> Info <p>This function is called internally by <code>lintkit</code> framework.</p> <p><code>Value</code> is ignored if:</p> <ul> <li>file contains whole file ignore/<code>noqa</code>     (as defined by <code>lintkit.settings.ignore_file</code></li> <li>its line is in the ignore/<code>noqa</code> spans     (as defined by <code>lintkit.settings.ignore_span_start</code>     and <code>lintkit.settings.ignore_span_end</code>)</li> <li>its line matches the <code>lintkit.settings.ignore_line</code> regex     (per-line ignore/<code>noqa</code>)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[T]</code> <p>[<code>lintkit.Value</code>] to be possibly ignored.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the [<code>lintkit.Value</code>] should be ignored</p> <code>bool</code> <p>for whatever reason.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def ignored(self, value: Value[T]) -&gt; bool:  # noqa: C901\n    \"\"\"Check if the value should be ignored by this `rule`.\n\n    Info:\n        This function is called internally by `lintkit`\n        framework.\n\n    `Value` is ignored if:\n\n    - file contains whole file ignore/`noqa`\n        (as defined by [`lintkit.settings.ignore_file`][]\n    - its line is in the ignore/`noqa` spans\n        (as defined by [`lintkit.settings.ignore_span_start`][]\n        and [`lintkit.settings.ignore_span_end`][])\n    - its line matches the [`lintkit.settings.ignore_line`][] regex\n        (per-line ignore/`noqa`)\n\n    Args:\n        value:\n            [`lintkit.Value`] to be possibly ignored.\n\n    Returns:\n        `True` if the [`lintkit.Value`] should be ignored\n        for whatever reason.\n\n    \"\"\"\n    # Branch below should never run (all necessary attributes)\n    # would be instantiated before this call.\n    # - Cannot use `any` due to pyright not understanding this check\n    # - Cannot refactor as `pyright` will not catch it\n    if (\n        self._ignore_line is None\n        or self._ignore_spans is None\n        or self._lines is None\n    ):  # pragma: no cover\n        raise e.LintkitInternalError\n\n    pointer = value._self_start_line  # noqa: SLF001\n    if not pointer:\n        if value._self_comment is None:  # noqa: SLF001\n            return False\n        # Currently used for TOML comments\n        # Some additional tests might be necessary\n        return self._ignore_line.search(value._self_comment) is not None  # noqa: SLF001  # pragma: no cover\n\n    start_line = pointer.value\n    if start_line is not None:\n        for span in self._ignore_spans:\n            if start_line in span:\n                return True\n        return (\n            self._ignore_line.search(self._lines[start_line - 1])\n            is not None\n        )\n\n    # This might happen when there is no comment, nor line number available\n    # An example would be JSON and `Value` created directly\n    return False  # pragma: no cover\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.error","title":"lintkit.rule.Rule.error","text":"<pre><code>error(message, value)\n</code></pre> <p>Output an error message.</p> Info <p>This method is called internally by <code>lintkit</code> framework.</p> <p>This function uses <code>lintkit.settings.output</code> to output (however this operation is defined) rule violations (usually some sort of printing to <code>stdout</code>, e.g. standard <code>print</code> or <code>rich</code>\u00a0\u29c9 colored <code>stdout</code>).</p> Warning <p>This method likely contains side-effects (printing)!</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to print</p> required <code>value</code> <code>Value[T]</code> <p><code>Value</code> instance which violated the rule. Used to obtain (eventual) line information.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Always True as the error was raised</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def error(\n    self,\n    message: str,\n    value: Value[T],\n) -&gt; bool:\n    \"\"\"Output an error message.\n\n    Info:\n        This method is called internally by `lintkit`\n        framework.\n\n    This function uses [`lintkit.settings.output`][] to output\n    (however this operation is defined)\n    rule violations (usually some sort of printing to `stdout`,\n    e.g. standard `print` or [`rich`](https://github.com/Textualize/rich)\n    colored `stdout`).\n\n    Warning:\n        This method likely contains side-effects (printing)!\n\n    Args:\n        message:\n            message to print\n        value:\n            `Value` instance which violated the rule.\n            Used to obtain (eventual) line information.\n\n    Returns:\n        bool: Always True as the error was raised\n    \"\"\"\n    printer = settings._output()  # noqa: SLF001\n\n    printer(\n        # This might be error prone for multiple linters defined\n        # as the same package.\n        name=settings._name(),  # noqa: SLF001 # pyright: ignore[reportCallIssue]\n        code=self.code,\n        message=message,\n        file=self.file,\n        start_line=value._self_start_line,  # noqa: SLF001\n        start_column=value._self_start_column,  # noqa: SLF001\n        end_line=value._self_end_line,  # noqa: SLF001\n        end_column=value._self_end_column,  # noqa: SLF001\n    )\n    return True\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Rule.__call__","title":"lintkit.rule.Rule.__call__  <code>abstractmethod</code>","text":"<pre><code>__call__()\n</code></pre> <p>Calls this <code>rule</code> on a given entity.</p> Info <p>This method is implemented by concrete subclasses (<code>lintkit.rule.Node</code>, <code>lintkit.rule.File</code>, <code>lintkit.rule.All</code>)</p> Info <p>This method is called internally by <code>lintkit</code> framework.</p> <p>Yields:</p> Type Description <code>Iterable[bool]</code> <p><code>True</code> if a given <code>lintkit.Value</code> (or a grouping of them, depending on the type of <code>rule</code>) violates the rule, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef __call__(self) -&gt; Iterable[bool]:\n    \"\"\"Calls this `rule` on a given entity.\n\n    Info:\n        This method is implemented by concrete subclasses\n        ([`lintkit.rule.Node`][],\n        [`lintkit.rule.File`][],\n        [`lintkit.rule.All`][])\n\n    Info:\n        This method is called internally by `lintkit`\n        framework.\n\n    Yields:\n        `True` if a given [`lintkit.Value`][] (or a grouping of them,\n            depending on the type of `rule`) violates the rule,\n            `False` otherwise.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node","title":"lintkit.rule.Node","text":"<pre><code>Node()\n</code></pre> <p>               Bases: <code>Rule</code>, <code>ABC</code></p> <p>Rule that is applied on a node (e.g. Python <code>dict</code> in a parsed program).</p> Note <p>This class is used to define fine-grained rules and is likely to be used the most commonly.</p> Warning <p><code>__init__</code> is called internally by the framework, linter/rule creators should not use it directly.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the rule.\n\n    Warning:\n        `__init__` is called internally by the framework,\n        linter/rule creators __should not__ use it directly.\n\n    \"\"\"\n    if self.code is None:\n        raise e.CodeMissingError(self)\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.code","title":"lintkit.rule.Node.code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code = None\n</code></pre> <p>Integer code assigned to the rule.</p> Warning <p>Specifying this value constitutes <code>rule</code> creation! Without it, such class acts as a shared functionality.</p> Example <pre><code>import lintkit\n\n# Can further inherit from it to create complex rules.\nclass NotRule(lintkit.rule.Node):\n    pass\n\n# Is a Rule, cause `code` argument is provided\nclass Rule(NotRule, code=0):\n    pass\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.file","title":"lintkit.rule.Node.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.message","title":"lintkit.rule.Node.message  <code>abstractmethod</code>","text":"<pre><code>message(value)\n</code></pre> <p>Message to output when the rule is violated.</p> Note <p>You can use offending <code>lintkit.Value</code> to display more information about the violation. <code>lintkit.Value</code> can hold different objects depending on the [<code>lintkit.Node.values</code>][] (directly) and on the <code>lintkit.loader</code> mixin (indirectly).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[Any]</code> <p>Value which violated the rule.</p> required <p>Returns:</p> Type Description <code>str</code> <p>String message to output when the rule is violated.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef message(self, value: Value[typing.Any]) -&gt; str:\n    \"\"\"Message to output when the rule is violated.\n\n    Note:\n        You can use offending [`lintkit.Value`][] to display\n        more information about the violation. [`lintkit.Value`][]\n        can hold different objects depending\n        on the [`lintkit.Node.values`][] (directly) and\n        on the [`lintkit.loader`][] mixin (indirectly).\n\n    Args:\n        value:\n            Value which violated the rule.\n\n    Returns:\n        String message to output when the rule is violated.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.__call__","title":"lintkit.rule.Node.__call__","text":"<pre><code>__call__()\n</code></pre> <p>Calls this <code>rule</code> on a specific node.</p> Note <p>This method is called by the framework, linter creators should not use it directly.</p> Info <p>This method has side effects (see <code>lintkit.rule.Rule.error</code>)</p> Tip <p>Check out Basic tutorial to see an example usage of this <code>rule</code>.</p> <p>Yields:</p> Type Description <code>Iterable[bool]</code> <p><code>True</code> if a given node violates the rule, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __call__(self) -&gt; Iterable[bool]:  # pyright: ignore[reportImplicitOverride]\n    \"\"\"Calls this `rule` on a specific node.\n\n    Note:\n        This method is called by the framework, linter creators\n        __should not use it directly__.\n\n    Info:\n        This method has side effects (see [`lintkit.rule.Rule.error`][])\n\n    Tip:\n        Check out [Basic tutorial](/lintkit/tutorials/basic)\n        to see an example usage of this `rule`.\n\n    Yields:\n        `True` if a given node violates the rule, `False` otherwise.\n\n    \"\"\"\n    for value in self.values():\n        if self.ignored(value):\n            yield False\n        else:\n            error = self.check(value)\n            if not error:\n                yield False\n            else:\n                yield self.error(self.message(value), value)\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.values","title":"lintkit.rule.Node.values  <code>abstractmethod</code>","text":"<pre><code>values()\n</code></pre> <p>Function returning values to check against.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Warning <p>This is the core function which should always be implemented for each rule.</p> <p>Yields:</p> Type Description <code>Iterable[Value[Any]]</code> <p>Values to be checked against this rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef values(self) -&gt; Iterable[Value[typing.Any]]:\n    \"\"\"Function returning values to check against.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Warning:\n        __This is the core function which should always\n        be implemented for each rule.__\n\n    Yields:\n        Values to be checked against this rule.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.check","title":"lintkit.rule.Node.check  <code>abstractmethod</code>","text":"<pre><code>check(value)\n</code></pre> <p>Perform the check on a certain <code>value</code>.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Note <p>This method is inherited from <code>lintkit.check.Check</code></p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[Any]</code> <p>Value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if rule is violated, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef check(self, value: Value[typing.Any]) -&gt; bool:\n    \"\"\"Perform the check on a certain `value`.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Note:\n        This method is inherited from [`lintkit.check.Check`][]\n\n    Args:\n        value:\n            Value to check.\n\n    Returns:\n        `True` if rule is violated, `False` otherwise.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.description","title":"lintkit.rule.Node.description","text":"<pre><code>description()\n</code></pre> <p>Description of the rule.</p> Note <p>You can use this method to provide end users with human readable description of the rule.</p> <p>Returns:</p> Type Description <code>str</code> <p>Description of the rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def description(self) -&gt; str:  # pragma: no cover\n    \"\"\"Description of the rule.\n\n    Note:\n        You can use this method to provide end users\n        with human readable description of the rule.\n\n    Returns:\n        Description of the rule.\n    \"\"\"\n    return \"No description provided.\"\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.__init_subclass__","title":"lintkit.rule.Node.__init_subclass__","text":"<pre><code>__init_subclass__(*, code=None)\n</code></pre> <p>Initialize the class (not instance!).</p> Info <p>This method is defined so the user can pass <code>code</code> as an argument during inheritance.</p> Warning <p><code>code</code> has to uniquely identify the <code>rule</code>!</p> Example <pre><code>import lintkit\n\n\n# Pass the code as an argument\nclass MyRule(lintkit.rule.Node, code=42):\n    pass\n</code></pre> Warning <p>When <code>code</code> is provided it will define the <code>rule</code>. Before that you can subclass <code>Rule</code> and implement specific methods to be shared by other rules.</p> Example <pre><code>import lintkit\n\n# code argument not provided, this is\n# still an interface, not a rule\nclass SharedFunctionality(lintkit.rule.Node):\n    @classmethod\n    def shared_functionality(cls):\n        # Define your shared functionality\n\n# actual rule\nclass Rule(SharedFunctionality, code=21):\n    pass\n</code></pre> <p>Raises:</p> Type Description <code>CodeNegativeError</code> <p>If <code>code</code> is negative.</p> <code>CodeExistsError</code> <p>If a rule with the same <code>code</code> already exists.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int | None</code> <p>Code to assign for the rule.</p> <code>None</code> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init_subclass__(\n    cls,\n    *,\n    code: int | None = None,\n) -&gt; None:\n    \"\"\"Initialize the class (__not instance!__).\n\n    Info:\n        This method is defined so the user can pass `code`\n        as an argument during inheritance.\n\n    Warning:\n        `code` has to uniquely identify the `rule`!\n\n    Example:\n        ```python\n        import lintkit\n\n\n        # Pass the code as an argument\n        class MyRule(lintkit.rule.Node, code=42):\n            pass\n        ```\n\n    Warning:\n        When `code` is provided it will define the `rule`.\n        Before that you can subclass `Rule` and implement\n        specific methods to be shared by other rules.\n\n    Example:\n        ```python\n        import lintkit\n\n        # code argument not provided, this is\n        # still an interface, not a rule\n        class SharedFunctionality(lintkit.rule.Node):\n            @classmethod\n            def shared_functionality(cls):\n                # Define your shared functionality\n\n        # actual rule\n        class Rule(SharedFunctionality, code=21):\n            pass\n        ```\n\n    Raises:\n        lintkit.error.CodeNegativeError:\n            If `code` is negative.\n        lintkit.error.CodeExistsError:\n            If a rule with the same `code` already exists.\n\n    Args:\n        code:\n            Code to assign for the rule.\n\n    \"\"\"\n    # Code actually defines the rule\n    if code is not None:\n        registry._add(cls, code)  # noqa: SLF001\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.ignored","title":"lintkit.rule.Node.ignored","text":"<pre><code>ignored(value)\n</code></pre> <p>Check if the value should be ignored by this <code>rule</code>.</p> Info <p>This function is called internally by <code>lintkit</code> framework.</p> <p><code>Value</code> is ignored if:</p> <ul> <li>file contains whole file ignore/<code>noqa</code>     (as defined by <code>lintkit.settings.ignore_file</code></li> <li>its line is in the ignore/<code>noqa</code> spans     (as defined by <code>lintkit.settings.ignore_span_start</code>     and <code>lintkit.settings.ignore_span_end</code>)</li> <li>its line matches the <code>lintkit.settings.ignore_line</code> regex     (per-line ignore/<code>noqa</code>)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[T]</code> <p>[<code>lintkit.Value</code>] to be possibly ignored.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the [<code>lintkit.Value</code>] should be ignored</p> <code>bool</code> <p>for whatever reason.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def ignored(self, value: Value[T]) -&gt; bool:  # noqa: C901\n    \"\"\"Check if the value should be ignored by this `rule`.\n\n    Info:\n        This function is called internally by `lintkit`\n        framework.\n\n    `Value` is ignored if:\n\n    - file contains whole file ignore/`noqa`\n        (as defined by [`lintkit.settings.ignore_file`][]\n    - its line is in the ignore/`noqa` spans\n        (as defined by [`lintkit.settings.ignore_span_start`][]\n        and [`lintkit.settings.ignore_span_end`][])\n    - its line matches the [`lintkit.settings.ignore_line`][] regex\n        (per-line ignore/`noqa`)\n\n    Args:\n        value:\n            [`lintkit.Value`] to be possibly ignored.\n\n    Returns:\n        `True` if the [`lintkit.Value`] should be ignored\n        for whatever reason.\n\n    \"\"\"\n    # Branch below should never run (all necessary attributes)\n    # would be instantiated before this call.\n    # - Cannot use `any` due to pyright not understanding this check\n    # - Cannot refactor as `pyright` will not catch it\n    if (\n        self._ignore_line is None\n        or self._ignore_spans is None\n        or self._lines is None\n    ):  # pragma: no cover\n        raise e.LintkitInternalError\n\n    pointer = value._self_start_line  # noqa: SLF001\n    if not pointer:\n        if value._self_comment is None:  # noqa: SLF001\n            return False\n        # Currently used for TOML comments\n        # Some additional tests might be necessary\n        return self._ignore_line.search(value._self_comment) is not None  # noqa: SLF001  # pragma: no cover\n\n    start_line = pointer.value\n    if start_line is not None:\n        for span in self._ignore_spans:\n            if start_line in span:\n                return True\n        return (\n            self._ignore_line.search(self._lines[start_line - 1])\n            is not None\n        )\n\n    # This might happen when there is no comment, nor line number available\n    # An example would be JSON and `Value` created directly\n    return False  # pragma: no cover\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.Node.error","title":"lintkit.rule.Node.error","text":"<pre><code>error(message, value)\n</code></pre> <p>Output an error message.</p> Info <p>This method is called internally by <code>lintkit</code> framework.</p> <p>This function uses <code>lintkit.settings.output</code> to output (however this operation is defined) rule violations (usually some sort of printing to <code>stdout</code>, e.g. standard <code>print</code> or <code>rich</code>\u00a0\u29c9 colored <code>stdout</code>).</p> Warning <p>This method likely contains side-effects (printing)!</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to print</p> required <code>value</code> <code>Value[T]</code> <p><code>Value</code> instance which violated the rule. Used to obtain (eventual) line information.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Always True as the error was raised</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def error(\n    self,\n    message: str,\n    value: Value[T],\n) -&gt; bool:\n    \"\"\"Output an error message.\n\n    Info:\n        This method is called internally by `lintkit`\n        framework.\n\n    This function uses [`lintkit.settings.output`][] to output\n    (however this operation is defined)\n    rule violations (usually some sort of printing to `stdout`,\n    e.g. standard `print` or [`rich`](https://github.com/Textualize/rich)\n    colored `stdout`).\n\n    Warning:\n        This method likely contains side-effects (printing)!\n\n    Args:\n        message:\n            message to print\n        value:\n            `Value` instance which violated the rule.\n            Used to obtain (eventual) line information.\n\n    Returns:\n        bool: Always True as the error was raised\n    \"\"\"\n    printer = settings._output()  # noqa: SLF001\n\n    printer(\n        # This might be error prone for multiple linters defined\n        # as the same package.\n        name=settings._name(),  # noqa: SLF001 # pyright: ignore[reportCallIssue]\n        code=self.code,\n        message=message,\n        file=self.file,\n        start_line=value._self_start_line,  # noqa: SLF001\n        start_column=value._self_start_column,  # noqa: SLF001\n        end_line=value._self_end_line,  # noqa: SLF001\n        end_column=value._self_end_column,  # noqa: SLF001\n    )\n    return True\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File","title":"lintkit.rule.File","text":"<pre><code>File()\n</code></pre> <p>               Bases: <code>_NotNode</code>, <code>ABC</code></p> <p>Rule that is applied on a whole file.</p> <p>Checks run across all elements within a certain file (e.g. all <code>ast.AST</code>\u00a0\u29c9 nodes in a <code>python</code> file).</p> Note <p>The error can be raised after encountering all elements (unlike <code>lintkit.rule.Node</code> which raises an error as soon as it finds a violation).</p> Tip <p>See File tutorial for a usage example.</p> Tip <p><code>lintkit.rule.File.finalize</code> is effectively a place where you decide what to do with accumulated errors.</p> <p>Attributes:</p> Name Type Description <code>n_fails</code> <p>Number of failures raised by the <code>rule</code>. It is set to zero after each call to <code>[</code>lintkit.rule.File.finalize<code>][]</code>.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the rule.\n\n    Attributes:\n        n_fails:\n            Number of failures raised by the `rule`.\n            It is set to zero after each call to\n            `[`lintkit.rule.File.finalize`][]`.\n\n    \"\"\"\n    super().__init__()\n\n    self.n_fails: int = 0\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.code","title":"lintkit.rule.File.code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code = None\n</code></pre> <p>Integer code assigned to the rule.</p> Warning <p>Specifying this value constitutes <code>rule</code> creation! Without it, such class acts as a shared functionality.</p> Example <pre><code>import lintkit\n\n# Can further inherit from it to create complex rules.\nclass NotRule(lintkit.rule.Node):\n    pass\n\n# Is a Rule, cause `code` argument is provided\nclass Rule(NotRule, code=0):\n    pass\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.file","title":"lintkit.rule.File.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.values","title":"lintkit.rule.File.values  <code>abstractmethod</code>","text":"<pre><code>values()\n</code></pre> <p>Function returning values to check against.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Warning <p>This is the core function which should always be implemented for each rule.</p> <p>Yields:</p> Type Description <code>Iterable[Value[Any]]</code> <p>Values to be checked against this rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef values(self) -&gt; Iterable[Value[typing.Any]]:\n    \"\"\"Function returning values to check against.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Warning:\n        __This is the core function which should always\n        be implemented for each rule.__\n\n    Yields:\n        Values to be checked against this rule.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.check","title":"lintkit.rule.File.check  <code>abstractmethod</code>","text":"<pre><code>check(value)\n</code></pre> <p>Perform the check on a certain <code>value</code>.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Note <p>This method is inherited from <code>lintkit.check.Check</code></p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[Any]</code> <p>Value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if rule is violated, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef check(self, value: Value[typing.Any]) -&gt; bool:\n    \"\"\"Perform the check on a certain `value`.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Note:\n        This method is inherited from [`lintkit.check.Check`][]\n\n    Args:\n        value:\n            Value to check.\n\n    Returns:\n        `True` if rule is violated, `False` otherwise.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.description","title":"lintkit.rule.File.description","text":"<pre><code>description()\n</code></pre> <p>Description of the rule.</p> Note <p>You can use this method to provide end users with human readable description of the rule.</p> <p>Returns:</p> Type Description <code>str</code> <p>Description of the rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def description(self) -&gt; str:  # pragma: no cover\n    \"\"\"Description of the rule.\n\n    Note:\n        You can use this method to provide end users\n        with human readable description of the rule.\n\n    Returns:\n        Description of the rule.\n    \"\"\"\n    return \"No description provided.\"\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.__init_subclass__","title":"lintkit.rule.File.__init_subclass__","text":"<pre><code>__init_subclass__(*, code=None)\n</code></pre> <p>Initialize the class (not instance!).</p> Info <p>This method is defined so the user can pass <code>code</code> as an argument during inheritance.</p> Warning <p><code>code</code> has to uniquely identify the <code>rule</code>!</p> Example <pre><code>import lintkit\n\n\n# Pass the code as an argument\nclass MyRule(lintkit.rule.Node, code=42):\n    pass\n</code></pre> Warning <p>When <code>code</code> is provided it will define the <code>rule</code>. Before that you can subclass <code>Rule</code> and implement specific methods to be shared by other rules.</p> Example <pre><code>import lintkit\n\n# code argument not provided, this is\n# still an interface, not a rule\nclass SharedFunctionality(lintkit.rule.Node):\n    @classmethod\n    def shared_functionality(cls):\n        # Define your shared functionality\n\n# actual rule\nclass Rule(SharedFunctionality, code=21):\n    pass\n</code></pre> <p>Raises:</p> Type Description <code>CodeNegativeError</code> <p>If <code>code</code> is negative.</p> <code>CodeExistsError</code> <p>If a rule with the same <code>code</code> already exists.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int | None</code> <p>Code to assign for the rule.</p> <code>None</code> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init_subclass__(\n    cls,\n    *,\n    code: int | None = None,\n) -&gt; None:\n    \"\"\"Initialize the class (__not instance!__).\n\n    Info:\n        This method is defined so the user can pass `code`\n        as an argument during inheritance.\n\n    Warning:\n        `code` has to uniquely identify the `rule`!\n\n    Example:\n        ```python\n        import lintkit\n\n\n        # Pass the code as an argument\n        class MyRule(lintkit.rule.Node, code=42):\n            pass\n        ```\n\n    Warning:\n        When `code` is provided it will define the `rule`.\n        Before that you can subclass `Rule` and implement\n        specific methods to be shared by other rules.\n\n    Example:\n        ```python\n        import lintkit\n\n        # code argument not provided, this is\n        # still an interface, not a rule\n        class SharedFunctionality(lintkit.rule.Node):\n            @classmethod\n            def shared_functionality(cls):\n                # Define your shared functionality\n\n        # actual rule\n        class Rule(SharedFunctionality, code=21):\n            pass\n        ```\n\n    Raises:\n        lintkit.error.CodeNegativeError:\n            If `code` is negative.\n        lintkit.error.CodeExistsError:\n            If a rule with the same `code` already exists.\n\n    Args:\n        code:\n            Code to assign for the rule.\n\n    \"\"\"\n    # Code actually defines the rule\n    if code is not None:\n        registry._add(cls, code)  # noqa: SLF001\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.ignored","title":"lintkit.rule.File.ignored","text":"<pre><code>ignored(value)\n</code></pre> <p>Check if the value should be ignored by this <code>rule</code>.</p> Info <p>This function is called internally by <code>lintkit</code> framework.</p> <p><code>Value</code> is ignored if:</p> <ul> <li>file contains whole file ignore/<code>noqa</code>     (as defined by <code>lintkit.settings.ignore_file</code></li> <li>its line is in the ignore/<code>noqa</code> spans     (as defined by <code>lintkit.settings.ignore_span_start</code>     and <code>lintkit.settings.ignore_span_end</code>)</li> <li>its line matches the <code>lintkit.settings.ignore_line</code> regex     (per-line ignore/<code>noqa</code>)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[T]</code> <p>[<code>lintkit.Value</code>] to be possibly ignored.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the [<code>lintkit.Value</code>] should be ignored</p> <code>bool</code> <p>for whatever reason.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def ignored(self, value: Value[T]) -&gt; bool:  # noqa: C901\n    \"\"\"Check if the value should be ignored by this `rule`.\n\n    Info:\n        This function is called internally by `lintkit`\n        framework.\n\n    `Value` is ignored if:\n\n    - file contains whole file ignore/`noqa`\n        (as defined by [`lintkit.settings.ignore_file`][]\n    - its line is in the ignore/`noqa` spans\n        (as defined by [`lintkit.settings.ignore_span_start`][]\n        and [`lintkit.settings.ignore_span_end`][])\n    - its line matches the [`lintkit.settings.ignore_line`][] regex\n        (per-line ignore/`noqa`)\n\n    Args:\n        value:\n            [`lintkit.Value`] to be possibly ignored.\n\n    Returns:\n        `True` if the [`lintkit.Value`] should be ignored\n        for whatever reason.\n\n    \"\"\"\n    # Branch below should never run (all necessary attributes)\n    # would be instantiated before this call.\n    # - Cannot use `any` due to pyright not understanding this check\n    # - Cannot refactor as `pyright` will not catch it\n    if (\n        self._ignore_line is None\n        or self._ignore_spans is None\n        or self._lines is None\n    ):  # pragma: no cover\n        raise e.LintkitInternalError\n\n    pointer = value._self_start_line  # noqa: SLF001\n    if not pointer:\n        if value._self_comment is None:  # noqa: SLF001\n            return False\n        # Currently used for TOML comments\n        # Some additional tests might be necessary\n        return self._ignore_line.search(value._self_comment) is not None  # noqa: SLF001  # pragma: no cover\n\n    start_line = pointer.value\n    if start_line is not None:\n        for span in self._ignore_spans:\n            if start_line in span:\n                return True\n        return (\n            self._ignore_line.search(self._lines[start_line - 1])\n            is not None\n        )\n\n    # This might happen when there is no comment, nor line number available\n    # An example would be JSON and `Value` created directly\n    return False  # pragma: no cover\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.error","title":"lintkit.rule.File.error","text":"<pre><code>error(message, value)\n</code></pre> <p>Output an error message.</p> Info <p>This method is called internally by <code>lintkit</code> framework.</p> <p>This function uses <code>lintkit.settings.output</code> to output (however this operation is defined) rule violations (usually some sort of printing to <code>stdout</code>, e.g. standard <code>print</code> or <code>rich</code>\u00a0\u29c9 colored <code>stdout</code>).</p> Warning <p>This method likely contains side-effects (printing)!</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to print</p> required <code>value</code> <code>Value[T]</code> <p><code>Value</code> instance which violated the rule. Used to obtain (eventual) line information.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Always True as the error was raised</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def error(\n    self,\n    message: str,\n    value: Value[T],\n) -&gt; bool:\n    \"\"\"Output an error message.\n\n    Info:\n        This method is called internally by `lintkit`\n        framework.\n\n    This function uses [`lintkit.settings.output`][] to output\n    (however this operation is defined)\n    rule violations (usually some sort of printing to `stdout`,\n    e.g. standard `print` or [`rich`](https://github.com/Textualize/rich)\n    colored `stdout`).\n\n    Warning:\n        This method likely contains side-effects (printing)!\n\n    Args:\n        message:\n            message to print\n        value:\n            `Value` instance which violated the rule.\n            Used to obtain (eventual) line information.\n\n    Returns:\n        bool: Always True as the error was raised\n    \"\"\"\n    printer = settings._output()  # noqa: SLF001\n\n    printer(\n        # This might be error prone for multiple linters defined\n        # as the same package.\n        name=settings._name(),  # noqa: SLF001 # pyright: ignore[reportCallIssue]\n        code=self.code,\n        message=message,\n        file=self.file,\n        start_line=value._self_start_line,  # noqa: SLF001\n        start_column=value._self_start_column,  # noqa: SLF001\n        end_line=value._self_end_line,  # noqa: SLF001\n        end_column=value._self_end_column,  # noqa: SLF001\n    )\n    return True\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.__call__","title":"lintkit.rule.File.__call__","text":"<pre><code>__call__()\n</code></pre> <p>Call this <code>rule</code> on all <code>values</code>.</p> Note <p>This method is called by the framework, creators should not use it directly.</p> Warning <p>This method accumulates failures from <code>[lintkit.rule.File.check]</code> instead of raising each one, which allows you to make a decision based on the aggregated number of failures (see <code>[</code>lintkit.rule.File.finalize<code>][]</code>).</p> <p>Returns:</p> Type Description <code>Iterable[Literal[False]]</code> <p>Always <code>False</code> (no matter the <code>check</code> output) to make the</p> <code>Iterable[Literal[False]]</code> <p>interface compatible with <code>lintkit.rule.Node</code></p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __call__(self) -&gt; Iterable[typing.Literal[False]]:  # pyright: ignore[reportImplicitOverride]\n    \"\"\"Call this `rule` on all `values`.\n\n    Note:\n        This method is called by the framework, creators __should not__\n        use it directly.\n\n    Warning:\n        This method accumulates failures from `[lintkit.rule.File.check]`\n        instead of raising each one, which allows you to make a decision\n        based on the aggregated number of failures\n        (see `[`lintkit.rule.File.finalize`][]`).\n\n    Returns:\n        Always `False` (no matter the `check` output) to make the\n        interface compatible with [`lintkit.rule.Node`][]\n\n    \"\"\"\n    for value in self.values():\n        # This line is checked, implicit else is not\n        if not self.ignored(value):  # pragma: no branch\n            fail = self.check(value)\n            if fail:\n                self.n_fails += 1\n\n    yield False\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.message","title":"lintkit.rule.File.message  <code>abstractmethod</code>","text":"<pre><code>message()\n</code></pre> <p>Message to output when the rule is violated.</p> Note <p>This message is per-file (which you can access by <code>self.file</code>) or per all files, hence there is no <code>lintkit.Value</code> argument as it is not applicable.</p> Tip <p>You can keep necessary data from any step (e.g. <code>lintkit.rule.File.values</code>) within <code>self</code> and use them here.</p> <p>Returns:</p> Type Description <code>str</code> <p>Message to output when the rule is violated.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef message(self) -&gt; str:\n    \"\"\"Message to output when the rule is violated.\n\n    Note:\n        This message is per-file (which you can access\n        by `self.file`) or per all files, hence\n        there is no [`lintkit.Value`][] argument as it is\n        not applicable.\n\n    Tip:\n        You can keep necessary data from any step (e.g.\n        [`lintkit.rule.File.values`][]) within `self`\n        and use them here.\n\n    Returns:\n        Message to output when the rule is violated.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.File.finalize","title":"lintkit.rule.File.finalize","text":"<pre><code>finalize(n_fails)\n</code></pre> <p>Final <code>check</code> of the rule.</p> Tip <p>You can think of this method as a <code>lintkit.rule.Node.check</code> but for <code>lintkit.rule.All</code> and <code>lintkit.rule.All</code></p> Info <p>After the rule is called across all objects (all files (<code>lintkit.rule.File</code> or all nodes in a file (<code>lintkit.rule.All</code>))), this method allows to make a decision whether to error or not.</p> Tip <p>You can keep necessary data from any step (e.g. <code>lintkit.rule.All.check</code>) within <code>self</code> and use them here.</p> <p>Parameters:</p> Name Type Description Default <code>n_fails</code> <code>int</code> <p>Number of failures encountered during <code>__call__</code>.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p><code>True</code> if the rule should raise an error, <code>False</code> otherwise.</p> <code>Default</code> <code>bool</code> <p>error out if <code>n_fails &gt; 0</code>.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def finalize(self, n_fails: int) -&gt; bool:\n    \"\"\"Final `check` of the rule.\n\n    Tip:\n        You can think of this method as a\n        [`lintkit.rule.Node.check`][] but for\n        [`lintkit.rule.All`][] and [`lintkit.rule.All`][]\n\n    Info:\n        After the rule is called\n        across all objects (all files ([`lintkit.rule.File`][]\n        or all nodes in a file ([`lintkit.rule.All`][]))),\n        this method allows to make a decision whether\n        to error or not.\n\n    Tip:\n        You can keep necessary data from any step (e.g.\n        [`lintkit.rule.All.check`][]) within `self`\n        and use them here.\n\n    Args:\n        n_fails:\n            Number of failures encountered during `__call__`.\n\n    Returns:\n        `True` if the rule should raise an error, `False` otherwise.\n        Default: error out if `n_fails &gt; 0`.\n\n    \"\"\"\n    return n_fails &gt; 0\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All","title":"lintkit.rule.All","text":"<pre><code>All()\n</code></pre> <p>               Bases: <code>_NotNode</code>, <code>ABC</code></p> <p>Rule that is applied on a all files.</p> <p>Checks run across all elements across all files (e.g. all <code>ast.AST</code>\u00a0\u29c9 nodes in all <code>python</code> file).</p> Note <p>The error can be raised after encountering all elements (unlike <code>lintkit.rule.Node</code> which raises an error as soon as it finds a violation).</p> Tip <p>See File tutorial for a usage example.</p> Tip <p><code>lintkit.rule.File.finalize</code> is effectively a place where you decide what to do with accumulated errors.</p> <p>Attributes:</p> Name Type Description <code>n_fails</code> <p>Number of failures raised by the <code>rule</code>. It is set to zero after each call to <code>[</code>lintkit.rule.File.finalize<code>][]</code>.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the rule.\n\n    Attributes:\n        n_fails:\n            Number of failures raised by the `rule`.\n            It is set to zero after each call to\n            `[`lintkit.rule.File.finalize`][]`.\n\n    \"\"\"\n    super().__init__()\n\n    self.n_fails: int = 0\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.code","title":"lintkit.rule.All.code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code = None\n</code></pre> <p>Integer code assigned to the rule.</p> Warning <p>Specifying this value constitutes <code>rule</code> creation! Without it, such class acts as a shared functionality.</p> Example <pre><code>import lintkit\n\n# Can further inherit from it to create complex rules.\nclass NotRule(lintkit.rule.Node):\n    pass\n\n# Is a Rule, cause `code` argument is provided\nclass Rule(NotRule, code=0):\n    pass\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.file","title":"lintkit.rule.All.file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file = None\n</code></pre> <p>Path to the loaded file.</p> Note <p>You may want to use this variable directly within <code>values</code> method.</p> Info <p>Will be populated by appropriate <code>lintkit.loader.Loader</code> subclass, initially <code>None</code>. It is of type <code>pathlib.Path</code>\u00a0\u29c9</p>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.values","title":"lintkit.rule.All.values  <code>abstractmethod</code>","text":"<pre><code>values()\n</code></pre> <p>Function returning values to check against.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Warning <p>This is the core function which should always be implemented for each rule.</p> <p>Yields:</p> Type Description <code>Iterable[Value[Any]]</code> <p>Values to be checked against this rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef values(self) -&gt; Iterable[Value[typing.Any]]:\n    \"\"\"Function returning values to check against.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Warning:\n        __This is the core function which should always\n        be implemented for each rule.__\n\n    Yields:\n        Values to be checked against this rule.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.check","title":"lintkit.rule.All.check  <code>abstractmethod</code>","text":"<pre><code>check(value)\n</code></pre> <p>Perform the check on a certain <code>value</code>.</p> Tip <p>Check out any tutorial (e.g. Basic tutorial) for a usage example.</p> Note <p>This method is inherited from <code>lintkit.check.Check</code></p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[Any]</code> <p>Value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if rule is violated, <code>False</code> otherwise.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef check(self, value: Value[typing.Any]) -&gt; bool:\n    \"\"\"Perform the check on a certain `value`.\n\n    Tip:\n        Check out any tutorial\n        (e.g. [Basic tutorial](/lintkit/tutorials/basic))\n        for a usage example.\n\n    Note:\n        This method is inherited from [`lintkit.check.Check`][]\n\n    Args:\n        value:\n            Value to check.\n\n    Returns:\n        `True` if rule is violated, `False` otherwise.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.description","title":"lintkit.rule.All.description","text":"<pre><code>description()\n</code></pre> <p>Description of the rule.</p> Note <p>You can use this method to provide end users with human readable description of the rule.</p> <p>Returns:</p> Type Description <code>str</code> <p>Description of the rule.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def description(self) -&gt; str:  # pragma: no cover\n    \"\"\"Description of the rule.\n\n    Note:\n        You can use this method to provide end users\n        with human readable description of the rule.\n\n    Returns:\n        Description of the rule.\n    \"\"\"\n    return \"No description provided.\"\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.__init_subclass__","title":"lintkit.rule.All.__init_subclass__","text":"<pre><code>__init_subclass__(*, code=None)\n</code></pre> <p>Initialize the class (not instance!).</p> Info <p>This method is defined so the user can pass <code>code</code> as an argument during inheritance.</p> Warning <p><code>code</code> has to uniquely identify the <code>rule</code>!</p> Example <pre><code>import lintkit\n\n\n# Pass the code as an argument\nclass MyRule(lintkit.rule.Node, code=42):\n    pass\n</code></pre> Warning <p>When <code>code</code> is provided it will define the <code>rule</code>. Before that you can subclass <code>Rule</code> and implement specific methods to be shared by other rules.</p> Example <pre><code>import lintkit\n\n# code argument not provided, this is\n# still an interface, not a rule\nclass SharedFunctionality(lintkit.rule.Node):\n    @classmethod\n    def shared_functionality(cls):\n        # Define your shared functionality\n\n# actual rule\nclass Rule(SharedFunctionality, code=21):\n    pass\n</code></pre> <p>Raises:</p> Type Description <code>CodeNegativeError</code> <p>If <code>code</code> is negative.</p> <code>CodeExistsError</code> <p>If a rule with the same <code>code</code> already exists.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int | None</code> <p>Code to assign for the rule.</p> <code>None</code> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __init_subclass__(\n    cls,\n    *,\n    code: int | None = None,\n) -&gt; None:\n    \"\"\"Initialize the class (__not instance!__).\n\n    Info:\n        This method is defined so the user can pass `code`\n        as an argument during inheritance.\n\n    Warning:\n        `code` has to uniquely identify the `rule`!\n\n    Example:\n        ```python\n        import lintkit\n\n\n        # Pass the code as an argument\n        class MyRule(lintkit.rule.Node, code=42):\n            pass\n        ```\n\n    Warning:\n        When `code` is provided it will define the `rule`.\n        Before that you can subclass `Rule` and implement\n        specific methods to be shared by other rules.\n\n    Example:\n        ```python\n        import lintkit\n\n        # code argument not provided, this is\n        # still an interface, not a rule\n        class SharedFunctionality(lintkit.rule.Node):\n            @classmethod\n            def shared_functionality(cls):\n                # Define your shared functionality\n\n        # actual rule\n        class Rule(SharedFunctionality, code=21):\n            pass\n        ```\n\n    Raises:\n        lintkit.error.CodeNegativeError:\n            If `code` is negative.\n        lintkit.error.CodeExistsError:\n            If a rule with the same `code` already exists.\n\n    Args:\n        code:\n            Code to assign for the rule.\n\n    \"\"\"\n    # Code actually defines the rule\n    if code is not None:\n        registry._add(cls, code)  # noqa: SLF001\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.ignored","title":"lintkit.rule.All.ignored","text":"<pre><code>ignored(value)\n</code></pre> <p>Check if the value should be ignored by this <code>rule</code>.</p> Info <p>This function is called internally by <code>lintkit</code> framework.</p> <p><code>Value</code> is ignored if:</p> <ul> <li>file contains whole file ignore/<code>noqa</code>     (as defined by <code>lintkit.settings.ignore_file</code></li> <li>its line is in the ignore/<code>noqa</code> spans     (as defined by <code>lintkit.settings.ignore_span_start</code>     and <code>lintkit.settings.ignore_span_end</code>)</li> <li>its line matches the <code>lintkit.settings.ignore_line</code> regex     (per-line ignore/<code>noqa</code>)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Value[T]</code> <p>[<code>lintkit.Value</code>] to be possibly ignored.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the [<code>lintkit.Value</code>] should be ignored</p> <code>bool</code> <p>for whatever reason.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def ignored(self, value: Value[T]) -&gt; bool:  # noqa: C901\n    \"\"\"Check if the value should be ignored by this `rule`.\n\n    Info:\n        This function is called internally by `lintkit`\n        framework.\n\n    `Value` is ignored if:\n\n    - file contains whole file ignore/`noqa`\n        (as defined by [`lintkit.settings.ignore_file`][]\n    - its line is in the ignore/`noqa` spans\n        (as defined by [`lintkit.settings.ignore_span_start`][]\n        and [`lintkit.settings.ignore_span_end`][])\n    - its line matches the [`lintkit.settings.ignore_line`][] regex\n        (per-line ignore/`noqa`)\n\n    Args:\n        value:\n            [`lintkit.Value`] to be possibly ignored.\n\n    Returns:\n        `True` if the [`lintkit.Value`] should be ignored\n        for whatever reason.\n\n    \"\"\"\n    # Branch below should never run (all necessary attributes)\n    # would be instantiated before this call.\n    # - Cannot use `any` due to pyright not understanding this check\n    # - Cannot refactor as `pyright` will not catch it\n    if (\n        self._ignore_line is None\n        or self._ignore_spans is None\n        or self._lines is None\n    ):  # pragma: no cover\n        raise e.LintkitInternalError\n\n    pointer = value._self_start_line  # noqa: SLF001\n    if not pointer:\n        if value._self_comment is None:  # noqa: SLF001\n            return False\n        # Currently used for TOML comments\n        # Some additional tests might be necessary\n        return self._ignore_line.search(value._self_comment) is not None  # noqa: SLF001  # pragma: no cover\n\n    start_line = pointer.value\n    if start_line is not None:\n        for span in self._ignore_spans:\n            if start_line in span:\n                return True\n        return (\n            self._ignore_line.search(self._lines[start_line - 1])\n            is not None\n        )\n\n    # This might happen when there is no comment, nor line number available\n    # An example would be JSON and `Value` created directly\n    return False  # pragma: no cover\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.error","title":"lintkit.rule.All.error","text":"<pre><code>error(message, value)\n</code></pre> <p>Output an error message.</p> Info <p>This method is called internally by <code>lintkit</code> framework.</p> <p>This function uses <code>lintkit.settings.output</code> to output (however this operation is defined) rule violations (usually some sort of printing to <code>stdout</code>, e.g. standard <code>print</code> or <code>rich</code>\u00a0\u29c9 colored <code>stdout</code>).</p> Warning <p>This method likely contains side-effects (printing)!</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to print</p> required <code>value</code> <code>Value[T]</code> <p><code>Value</code> instance which violated the rule. Used to obtain (eventual) line information.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Always True as the error was raised</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def error(\n    self,\n    message: str,\n    value: Value[T],\n) -&gt; bool:\n    \"\"\"Output an error message.\n\n    Info:\n        This method is called internally by `lintkit`\n        framework.\n\n    This function uses [`lintkit.settings.output`][] to output\n    (however this operation is defined)\n    rule violations (usually some sort of printing to `stdout`,\n    e.g. standard `print` or [`rich`](https://github.com/Textualize/rich)\n    colored `stdout`).\n\n    Warning:\n        This method likely contains side-effects (printing)!\n\n    Args:\n        message:\n            message to print\n        value:\n            `Value` instance which violated the rule.\n            Used to obtain (eventual) line information.\n\n    Returns:\n        bool: Always True as the error was raised\n    \"\"\"\n    printer = settings._output()  # noqa: SLF001\n\n    printer(\n        # This might be error prone for multiple linters defined\n        # as the same package.\n        name=settings._name(),  # noqa: SLF001 # pyright: ignore[reportCallIssue]\n        code=self.code,\n        message=message,\n        file=self.file,\n        start_line=value._self_start_line,  # noqa: SLF001\n        start_column=value._self_start_column,  # noqa: SLF001\n        end_line=value._self_end_line,  # noqa: SLF001\n        end_column=value._self_end_column,  # noqa: SLF001\n    )\n    return True\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.__call__","title":"lintkit.rule.All.__call__","text":"<pre><code>__call__()\n</code></pre> <p>Call this <code>rule</code> on all <code>values</code>.</p> Note <p>This method is called by the framework, creators should not use it directly.</p> Warning <p>This method accumulates failures from <code>[lintkit.rule.File.check]</code> instead of raising each one, which allows you to make a decision based on the aggregated number of failures (see <code>[</code>lintkit.rule.File.finalize<code>][]</code>).</p> <p>Returns:</p> Type Description <code>Iterable[Literal[False]]</code> <p>Always <code>False</code> (no matter the <code>check</code> output) to make the</p> <code>Iterable[Literal[False]]</code> <p>interface compatible with <code>lintkit.rule.Node</code></p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def __call__(self) -&gt; Iterable[typing.Literal[False]]:  # pyright: ignore[reportImplicitOverride]\n    \"\"\"Call this `rule` on all `values`.\n\n    Note:\n        This method is called by the framework, creators __should not__\n        use it directly.\n\n    Warning:\n        This method accumulates failures from `[lintkit.rule.File.check]`\n        instead of raising each one, which allows you to make a decision\n        based on the aggregated number of failures\n        (see `[`lintkit.rule.File.finalize`][]`).\n\n    Returns:\n        Always `False` (no matter the `check` output) to make the\n        interface compatible with [`lintkit.rule.Node`][]\n\n    \"\"\"\n    for value in self.values():\n        # This line is checked, implicit else is not\n        if not self.ignored(value):  # pragma: no branch\n            fail = self.check(value)\n            if fail:\n                self.n_fails += 1\n\n    yield False\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.message","title":"lintkit.rule.All.message  <code>abstractmethod</code>","text":"<pre><code>message()\n</code></pre> <p>Message to output when the rule is violated.</p> Note <p>This message is per-file (which you can access by <code>self.file</code>) or per all files, hence there is no <code>lintkit.Value</code> argument as it is not applicable.</p> Tip <p>You can keep necessary data from any step (e.g. <code>lintkit.rule.File.values</code>) within <code>self</code> and use them here.</p> <p>Returns:</p> Type Description <code>str</code> <p>Message to output when the rule is violated.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>@abc.abstractmethod\ndef message(self) -&gt; str:\n    \"\"\"Message to output when the rule is violated.\n\n    Note:\n        This message is per-file (which you can access\n        by `self.file`) or per all files, hence\n        there is no [`lintkit.Value`][] argument as it is\n        not applicable.\n\n    Tip:\n        You can keep necessary data from any step (e.g.\n        [`lintkit.rule.File.values`][]) within `self`\n        and use them here.\n\n    Returns:\n        Message to output when the rule is violated.\n\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/lintkit/rule/#lintkit.rule.All.finalize","title":"lintkit.rule.All.finalize","text":"<pre><code>finalize(n_fails)\n</code></pre> <p>Final <code>check</code> of the rule.</p> Tip <p>You can think of this method as a <code>lintkit.rule.Node.check</code> but for <code>lintkit.rule.All</code> and <code>lintkit.rule.All</code></p> Info <p>After the rule is called across all objects (all files (<code>lintkit.rule.File</code> or all nodes in a file (<code>lintkit.rule.All</code>))), this method allows to make a decision whether to error or not.</p> Tip <p>You can keep necessary data from any step (e.g. <code>lintkit.rule.All.check</code>) within <code>self</code> and use them here.</p> <p>Parameters:</p> Name Type Description Default <code>n_fails</code> <code>int</code> <p>Number of failures encountered during <code>__call__</code>.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p><code>True</code> if the rule should raise an error, <code>False</code> otherwise.</p> <code>Default</code> <code>bool</code> <p>error out if <code>n_fails &gt; 0</code>.</p> Source code in <code>src/lintkit/rule.py</code> <pre><code>def finalize(self, n_fails: int) -&gt; bool:\n    \"\"\"Final `check` of the rule.\n\n    Tip:\n        You can think of this method as a\n        [`lintkit.rule.Node.check`][] but for\n        [`lintkit.rule.All`][] and [`lintkit.rule.All`][]\n\n    Info:\n        After the rule is called\n        across all objects (all files ([`lintkit.rule.File`][]\n        or all nodes in a file ([`lintkit.rule.All`][]))),\n        this method allows to make a decision whether\n        to error or not.\n\n    Tip:\n        You can keep necessary data from any step (e.g.\n        [`lintkit.rule.All.check`][]) within `self`\n        and use them here.\n\n    Args:\n        n_fails:\n            Number of failures encountered during `__call__`.\n\n    Returns:\n        `True` if the rule should raise an error, `False` otherwise.\n        Default: error out if `n_fails &gt; 0`.\n\n    \"\"\"\n    return n_fails &gt; 0\n</code></pre>"},{"location":"reference/lintkit/settings/","title":"Settings","text":"<p>Global <code>lintkit</code> settings.</p>"},{"location":"reference/lintkit/settings/#lintkit.settings--general","title":"General","text":"Info <p>Variables in this module are crucial and should be set by the linter creator.</p> Example <pre><code>import lintkit\n\nlintkit.settings.name = \"MYLINTER\"\n\n# Now # MYLINTER: 223 could be used to ignore error 223\nlintkit.settings.ignore_line = \".* MYLINTER: .*{name}{code}.*\"\nlintkit.settings.ignore_file = \".* MYLINTER-FILE: .*{name}{code}.*\"\n</code></pre> Warning <p>Some variables might be defined by end-users, but it is relatively uncommon. Is someone adjusts a linter it is possible to only adjust these settings to change linter behavior.</p>"},{"location":"reference/lintkit/settings/#lintkit.settings--ignore-options","title":"Ignore options","text":"<p><code>lintkit</code> allows users to define three different ignores:</p> <ul> <li>per line (like <code># noqa: CODE</code>) as defined by     <code>lintkit.settings.ignore_line</code></li> <li>per file (like <code># noqa-file: CODE</code>) as defined by     <code>lintkit.settings.ignore_file</code></li> <li>span of lines (e.g. from <code>20</code> to <code>80</code>) as defined by     <code>lintkit.settings.ignore_span_start</code> and     <code>lintkit.settings.ignore_span_end</code></li> </ul> <p>See a YAML example for a file ignore:</p> Example <pre><code>---\n# Ignore linter rules 12 and 37 for the whole file\n# noqa-file: MYLINTER12\nmy:\n    yaml:\n        - \"example\"\n        - \"file\"\n</code></pre> <p>or per-line and span for <code>Python</code>:</p> Example <pre><code># rule 27 ignored here\ndef foo():  # noqa: MYLINTER27\n    pass\n\n\n# Ignore rule 13 for the next 5 lines\n# noqa-start: MYLINTER13\ndef bar() -&gt; None:\n    print(\"I would violate rule 13 &gt;:(\")\n\n\ndef baz() -&gt; str:\n    return \"Hate rule 13 let me out :(\"\n\n\n# noqa-end: MYLINTER13\n</code></pre>"},{"location":"reference/lintkit/settings/#lintkit.settings.name","title":"lintkit.settings.name  <code>module-attribute</code>","text":"<pre><code>name = None\n</code></pre> <p>The name of the linter (<code>str</code>).</p> Warning <p>Has to be set before linter usage, usually done at the level of <code>linter</code> module creation, not by the end user (user of linter).</p>"},{"location":"reference/lintkit/settings/#lintkit.settings.output","title":"lintkit.settings.output  <code>module-attribute</code>","text":"<pre><code>output = None\n</code></pre> <p>The output/printing function.</p> <p>By default (if <code>None</code>), will use <code>lintkit.output.rich</code> if the <code>rich</code> library is installed, otherwise <code>lintkit.output.stdout</code>.</p> Note <p>Custom function might be provided by the creator or user</p> Tip <p>Check <code>lintkit.type_definitions.Output</code> for a full signature your custom function should fulfill.</p>"},{"location":"reference/lintkit/settings/#lintkit.settings.ignore_line","title":"lintkit.settings.ignore_line  <code>module-attribute</code>","text":"<pre><code>ignore_line = '.* noqa: .*{name}{code}.*'\n</code></pre> <p>The regex pattern registering a line to be ignored.</p> Note <p>By default will match any line containing <code>noqa: {name}{code}</code>, possibly with multiple errors on the same line, e.g. <code># noqa: E123, E456</code> or <code># noqa: E123 E456 E789</code>.</p>"},{"location":"reference/lintkit/settings/#lintkit.settings.ignore_file","title":"lintkit.settings.ignore_file  <code>module-attribute</code>","text":"<pre><code>ignore_file = '.* noqa-file: [^\\n]*{name}{code}.*[^\\n]*'\n</code></pre> <p>The regex pattern indicating the error should be ignored in the whole file.</p> Note <p>By default will match any line containing <code>noqa-file: {name}{code}</code>, possibly with multiple errors on the same line, e.g. <code># noqa-file: E123, E456</code> or <code># noqa-file: E123 E456 E789</code>.</p>"},{"location":"reference/lintkit/settings/#lintkit.settings.ignore_span_start","title":"lintkit.settings.ignore_span_start  <code>module-attribute</code>","text":"<pre><code>ignore_span_start = '.* noqa-start: .*{name}{code}.*'\n</code></pre> <p>The regex pattern registering start of ignoring.</p> Warning <p>User has to provide <code>ignore_span_end</code> otherwise an error will be raised.</p> Note <p>By default will match any line containing <code># noqa-start: {name}{code}</code>, possibly with multiple errors on the same line, e.g. <code># noqa: E123, E456</code> or <code># noqa: E123 E456 E789</code>.</p>"},{"location":"reference/lintkit/settings/#lintkit.settings.ignore_span_end","title":"lintkit.settings.ignore_span_end  <code>module-attribute</code>","text":"<pre><code>ignore_span_end = '.* noqa-end: .*{name}{code}.*'\n</code></pre> <p>The regex pattern registering a line to be ignored.</p> Warning <p>User has to provide <code>ignore_span_start</code>, otherwise this <code>noqa</code> will have no effect.</p> Note <p>By default will match any line containing <code># noqa-end: {name}{code}</code>, possibly with multiple errors on the same line, e.g. <code># noqa: E123, E456</code> or <code># noqa: E123 E456 E789</code>.</p>"},{"location":"reference/lintkit/type_definitions/","title":"Type definitions","text":"<p>Type definitions used in <code>lintkit</code>.</p> Note <p>This module is mostly used internally, unlikely to be directly useful for linter creators.</p>"},{"location":"reference/lintkit/type_definitions/#lintkit.type_definitions.Output","title":"lintkit.type_definitions.Output  <code>module-attribute</code>","text":"<pre><code>Output = Callable[[str, int, str, Path | None, int | None, int | None, int | None, int | None], None]\n</code></pre> <p>Type of function which is used to output errors.</p> Info <p>See <code>lintkit.output</code> and <code>lintkit.settings.output</code> for more information.</p> Tip <p>Custom <code>output</code> functions should follow this signature.</p>"},{"location":"reference/lintkit/type_definitions/#lintkit.type_definitions.GetItem","title":"lintkit.type_definitions.GetItem","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol used to type objects with <code>__getitem__</code> and <code>__contains__</code>.</p>"},{"location":"reference/lintkit/type_definitions/#lintkit.type_definitions.GetItem.__getitem__","title":"lintkit.type_definitions.GetItem.__getitem__","text":"<pre><code>__getitem__(key)\n</code></pre> <p>Signature of <code>__getitem__</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Hashable</code> <p>Key to get the value for (must implement <code>Hashable</code> interface).</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Value for the key.</p> Source code in <code>src/lintkit/type_definitions.py</code> <pre><code>def __getitem__(self, key: Hashable) -&gt; typing.Any:\n    \"\"\"Signature of `__getitem__` method.\n\n    Args:\n        key:\n            Key to get the value for (must implement `Hashable` interface).\n\n    Returns:\n        Value for the key.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/lintkit/type_definitions/#lintkit.type_definitions.GetItem.__contains__","title":"lintkit.type_definitions.GetItem.__contains__","text":"<pre><code>__contains__(key)\n</code></pre> <p>Signature of <code>__contains__</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Hashable</code> <p>Key to check for (must implement <code>Hashable</code> interface).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the key is in the object, False otherwise.</p> Source code in <code>src/lintkit/type_definitions.py</code> <pre><code>def __contains__(self, key: Hashable) -&gt; bool:\n    \"\"\"Signature of `__contains__` method.\n\n    Args:\n        key:\n            Key to check for (must implement `Hashable` interface).\n\n    Returns:\n        True if the key is in the object, False otherwise.\n\n    \"\"\"\n    # Dummy return value, necessary to due pyright checks\n    return True\n</code></pre>"},{"location":"template/","title":"opentemplate","text":""},{"location":"template/#features","title":"Features","text":"<p>opentemplate is a Python template which is:</p> <ul> <li>Truly open source\u00a0\u29c9:     no tokens, no fees, no premium plans, open source software only</li> <li>Easy to use\u00a0\u29c9:     clone templated repo, run <code>pdm setup</code> and focus on your code</li> <li>State of the art\u00a0\u29c9:     best checkers for Python, YAML, Markdown, prose, and more unified</li> <li>Secure\u00a0\u29c9:     SLSA Level 3\u00a0\u29c9, SBOMs\u00a0\u29c9,     attestations\u00a0\u29c9,     secured egress\u00a0\u29c9,     OSSF Best Practices\u00a0\u29c9</li> <li>Consistent\u00a0\u29c9:     all pipelines (<code>GitHub Actions</code>, <code>pre-commit</code>)     share the same <code>pyproject.toml</code> config</li> <li>Performant\u00a0\u29c9:     parallel checks, builds, minimally-sized caches and checkouts</li> </ul> <p>Important</p> <p>An example repository using <code>opentemplate</code> here\u00a0\u29c9</p> <p>Caution</p> <p>All files in this repo will be copied to your project, using the title and description you provide.</p>"},{"location":"template/#code-quality-python-focused","title":"Code quality (Python focused)","text":"<p>Important</p> <p>You can adjust everything from <code>pyproject.toml</code> level!</p> <ul> <li>Package manager: <code>pdm</code>\u00a0\u29c9     with a single <code>pdm setup</code> manages everything!     (see why pdm\u00a0\u29c9)</li> <li>Testing: <code>pytest</code>\u00a0\u29c9     (with <code>coverage</code>\u00a0\u29c9,     and <code>hypothesis</code>\u00a0\u29c9 for     fuzzing); testing across all Python versions     done WITHOUT <code>tox</code>\u00a0\u29c9     or <code>nox</code>\u00a0\u29c9(managed directly by <code>pdm</code>!)</li> <li>Documentation: <code>mkdocs</code>\u00a0\u29c9 -     document once, have it everywhere (unified look on GitHub and hosted docs),     semantically versioned\u00a0\u29c9     (via <code>mike</code>\u00a0\u29c9),     autogenerated from     coverage\u00a0\u29c9,     deadlink\u00a0\u29c9     and spell-checked\u00a0\u29c9 docstrings,     automatically deployed after each GitHub release with clean     material design look\u00a0\u29c9</li> <li>Code formatting and linting: <code>ruff</code>\u00a0\u29c9     (checks hand-picked for best quality and ease of use; most are enabled),     <code>basedpyright</code>\u00a0\u29c9     for type checking, <code>FawltyDeps</code>\u00a0\u29c9     for static dependency analysis</li> <li>Each file is copyrighted with your git information -     copyrights added automatically by <code>pre-commit</code>,     see REUSE\u00a0\u29c9 and     SPDX Licensing\u00a0\u29c9     for more information</li> <li>Automated Python version updates: <code>pyproject.toml</code>     (and GitHub Actions pipelines where necessary)     are automatically updated to always use 3 latest Python     versions (via <code>cogeol</code>\u00a0\u29c9)     according to Scientific Python SPEC0\u00a0\u29c9     deprecation and end-of-life policies</li> <li>Other code linting: checks for <code>YAML</code>, <code>Markdown</code>, <code>INI</code>, <code>JSON</code>, <code>prose</code>,     all config files, <code>shell</code>, <code>GitHub Actions</code> -     all grouped as <code>check-&lt;group&gt;</code> and <code>fix-&lt;group&gt;</code> <code>pdm</code> commands</li> <li>Release to <code>PyPI</code> and <code>GitHub</code>: done by making a     GitHub release\u00a0\u29c9,     each release is attested and immutably versioned via     <code>commition</code>\u00a0\u29c9</li> <li><code>pre-commit</code>\u00a0\u29c9: all checks and fixers are run     before commit, no need to remember them!     (<code>pre-commit</code> is also setup after running a single <code>pdm setup</code> command!)</li> </ul>"},{"location":"template/#security","title":"Security","text":"<p>Important</p> <p>Everything below is already provided out of the box, one-click only!</p> <ul> <li>Hardening\u00a0\u29c9:     during setup, an automated issue is created to guide you step by step     through enabling rulesets, branch protection, mandatory reviewers,     necessary signatures etc.     (see here for an example\u00a0\u29c9).     Best part? <code>harden.yml</code> workflow, which does that     automatically (if you follow the instructions in the issue)!</li> <li>SLSA compliance\u00a0\u29c9:     Level 3+ for public/enterprise repositories     and L2 for private repositories     via slsa-github-generator\u00a0\u29c9</li> <li>Software Bills of Materials\u00a0\u29c9 (SBOMs):     generated per-Python, per-OS, per-dependency group -     each attested\u00a0\u29c9,     and attached to the release</li> <li>Static security analysis tooling: <code>osv-scanner</code>\u00a0\u29c9     checks against OSV database\u00a0\u29c9,     <code>semgrep</code>\u00a0\u29c9 monitors code quality and security,     <code>zizmor</code>\u00a0\u29c9 verifies workflows,     while <code>trufflehog</code>\u00a0\u29c9     looks for leaked secrets</li> <li>Reusable workflows: most of the workflows are reusable\u00a0\u29c9     (pointing to <code>opentemplate</code> workflows) to improve security and     get automated pipeline updates - you can make them local by     running <code>.github/reusability/localize.sh</code> script. No need     to manage/update your own workflows!</li> <li>Pinned dependencies: all dependencies are pinned to specific versions     (GitHub Actions, <code>pre-commit</code> and <code>pdm.lock</code>)</li> <li>Monitored egress in GitHub Actions: <code>harden-runner</code>\u00a0\u29c9     with a whitelisted minimal set of domains necessary to run the workflows</li> <li>Security documentation: <code>SECURITY.md</code>, <code>SECURITY-INSIGHTS.yml</code>,     <code>SECURITY-SELF-ASSESSMENT.md</code> (only security file to update     manually before release), and <code>SECURITY-DEPENDENCY.md</code>     define high quality security policies</li> </ul> <p>Tip</p> <p>See this example release\u00a0\u29c9 for all security artifacts described above.</p> <p>Note</p> <p>Although there is around 100 workflows helping you maintain high quality, most of them reuse the same workflow, which makes them maintainable and extendable.</p>"},{"location":"template/#github","title":"GitHub","text":"<ul> <li>GitHub Actions cache - after each merge     to the <code>main</code> branch, dependencies are cached per-group and     per-OS for maximum performance</li> <li>Minimal checkouts and triggers - each workflow is     triggered based on appropriate path and performs     <code>sparse-checkout</code>\u00a0\u29c9     when possible to minimize the amount of data transferred;     great for large repositories with many files and large history</li> <li>Dependency updates: Renovate\u00a0\u29c9     updates all dependencies in a grouped manner once a week</li> <li>Templates: every possible template included (discussions,     issues, pull requests - each extensively described)</li> <li>Predefined labels - each pull request will be automatically labeled     (over <code>20</code> labels created during setup!) based on changed files     (e.g. <code>docs</code>, <code>tests</code>, <code>deps</code>, <code>config</code> etc.).     No need to specify semver\u00a0\u29c9 <code>scope</code>     of commit anymore!</li> <li>Open source documents: <code>CODE_OF_CONDUCT.md</code>,     <code>CONTRIBUTING.md</code>, <code>ROADMAP.md</code>, <code>CHANGELOG.md</code>, <code>CODEOWNERS</code>, <code>DCO</code>,     and much more - all automatically added and linked to your     Python documentation out of the box</li> <li>Release changelog: <code>git-cliff</code>\u00a0\u29c9 - commits     automatically divided based on <code>labels</code>, <code>types</code>, human/bot authors,     and linked to appropriate issues and pull requests</li> <li>Config files: editorconfig\u00a0\u29c9, <code>.gitattributes</code>,     always the latest Python <code>.gitignore</code> etc.</li> <li>Commit checks: verification of signatures, commit messages,     DCO signing, no commit to the main branch policy     (via conform\u00a0\u29c9)</li> </ul>"},{"location":"template/#comparison","title":"Comparison","text":"<ul> <li>Broader scope than other <code>cookiecutter</code>\u00a0\u29c9     templates (e.g. one-click and one-command setup, security,     GitHub Actions, comprehensive docs, rulesets. deprecation policies,     automated copyrights and more).     Check here\u00a0\u29c9     or here\u00a0\u29c9     to compare yourself.</li> <li>Truly FOSS (no freemium, no paid plans, no tokens) when compared to commercial     offerings like <code>snyk</code>\u00a0\u29c9 or     <code>jit.io</code>\u00a0\u29c9. Additionally Python-centric and sticks     with tools widely known by developers (their own environment and     GitHub interface).</li> </ul> <p>Tip</p> <p>See detailed comparison in the documentation\u00a0\u29c9</p>"},{"location":"template/#quick-start","title":"Quick start","text":""},{"location":"template/#installation","title":"Installation","text":"<p>Note</p> <p>Install <code>pdm</code>\u00a0\u29c9 (if you don't have it already), for Linux/MacOS:</p> <pre><code>curl -sSL https://pdm-project.org/install-pdm.py | python3 -\n</code></pre> <ol> <li>Create a new GitHub repository using this template     (green <code>Use this template</code> button)</li> <li>Name your repo (use underscore <code>_</code>, not hyphens <code>-</code>)</li> <li>Add project description (necessary!)</li> <li>Wait until the setup commit appears     (performed by <code>github-actions[bot]</code>, it may take a few minutes)</li> <li>Clone the repository</li> <li>Run <code>pdm setup</code> command locally to setup development environment</li> </ol> <p>Tip</p> <p>For more details read the documentation\u00a0\u29c9</p>"},{"location":"template/#usage","title":"Usage","text":"<ol> <li>Create a new branch</li> <li>Optionally add dependencies to <code>pyproject.toml</code></li> <li>Write code in <code>/src/&lt;project_name&gt;</code> and tests in <code>/tests</code></li> <li>Use <code>git add</code>, <code>git commit</code> and <code>git push</code> your changes</li> <li><code>pre-commit</code> will guide you through the process</li> </ol> <p>Tip</p> <p>For more details read the documentation\u00a0\u29c9</p>"},{"location":"template/#examples","title":"Examples","text":"<p>Caution</p> <p>Click on each example to see it in action!</p> Run checkers or fixers manually (click me) <pre><code>&gt; pdm check-&lt;group&gt; [FILE1, FILE2, ...] # pdm fix-&lt;group&gt;\n</code></pre>  For example, to check __all Python files__:  <pre><code>&gt; pdm check-python\n</code></pre>  Or to check `/src/__init__.py`:  <pre><code>&gt; pdm check-python src/__init__.py\n</code></pre>  Note that all `check` and `fix` commands are grouped for your convenience:  <pre><code>&gt; pdm check-all # pdm fix-all\n</code></pre> Adjust template (click me) \u00a0  &gt; Most of the adjustments can be done by __only__ editing `pyproject.toml`  Common changes to `pyproject.toml`:  - Add dev dependencies under `[dependency-groups]`     (everything is named `dev-`) - Modify `[tool.pdm.scripts]` for custom command     (`check-` or `fix-`, the latter modifies files) - Use `[tool.]` to adjust specific tool configuration  &gt; __Adjusting these sections will affect `pre-commit` and `GitHub Actions`__   Disable some pre-commit check (click me) \u00a0  &gt; Disabling checks should be done cautiously!  `pre-commit` checks are defined in `.pre-commit-config.yaml`.  Disable a check using `SKIP` environment variable:  <pre><code>SKIP=\"&lt;group1&gt;,&lt;group2&gt;\" git commit -m &lt;message&gt;\n</code></pre>  For example, the following will skip `DCO` and `ini` checks and Python fixes (which would modify files):  <pre><code>SKIP=\"dco,ini,fix-python\" git commit -m &lt;message&gt;\n</code></pre>  For details, refer to the `id` fields in `.pre-commit-config.yaml`.  &gt; Some commands have both `-fix` and `-check` &gt; for different actions!   Disable GitHub Actions checks (click me) \u00a0  &gt; Disabling checks should be done cautiously!  When making a commit you can add one of the following strings to the message:  - `[skip ci]` - `[ci skip]` - `[no ci]` - `[skip actions]` - `[actions skip]`  &gt; Note that you can also merge pull requests __even if the checks fail__."},{"location":"template/about/","title":"About","text":"<p>In this section you can learn more about <code>opentemplate</code> itself; what is the motivation, how it compares and useful tips</p> <p>Caution</p> <p>You don\u2019t need to read this to use <code>opentemplate</code>, but a quick skim can be helpful.</p> <p>Explore:</p> <ul> <li>Philosophy \u2013 core ideas and goals</li> <li>Comparison \u2013 how it stacks up against other tools</li> <li>Tips and Tricks \u2013 get more out of <code>opentemplate</code></li> <li>FAQ \u2013 common questions answered</li> </ul>"},{"location":"template/about/comparison/","title":"Comparing <code>opentemplate</code> to similar tools","text":"<p>This guide compares <code>open-nudge/opentemplate</code>\u00a0\u29c9 with similar technologies, including templates, libraries, and platforms. While the overview is opinionated, we encourage you to verify details independently.</p> <p>Note</p> <p>If you spot inaccuracies, please open an issue or pull request with corrections.</p>"},{"location":"template/about/comparison/#feature-comparison","title":"Feature comparison","text":"<p>The following table compares <code>opentemplate</code> to similar tools:</p> Feature <code>open-nudge/opentemplate</code>\u00a0\u29c9 <code>pyscaffold</code>\u00a0\u29c9 cookiecutter-hypermodern-python\u00a0\u29c9 <code>microsoft/python-package-template</code>\u00a0\u29c9 Type Template Library Template Template Open Source \u2705 \u2705 \u2705 \u2705 Free \u2705 \u2705 \u2705 \u2705 Actively Maintained \u2705 \u274c \u274c \u274c Security-Focused \u2705 \u274c \u274c \u274c Latest Tooling \u2705 \u274c \u274c \u274c Mature \u274c \u2705 \u274c \u2705 Unified Config \u2705 \u274c \u274c \u274c GitHub-Centric \u2705 \u274c \u274c \u274c"},{"location":"template/about/comparison/#key-notes","title":"Key notes","text":"<ul> <li>Free: No extra cost for advanced features, but GitHub pricing may apply.</li> <li>Latest Tooling: Uses best-in-class tools     (e.g., <code>ruff</code>\u00a0\u29c9 for linting).</li> <li>Unified Config: Supports streamlined local and CI/CD setup via     <code>pyproject.toml</code>.</li> </ul>"},{"location":"template/about/comparison/#how-opentemplate-stands-out","title":"How <code>opentemplate</code> stands out","text":"<p>Compared to tools like snyk\u00a0\u29c9 or jit.io\u00a0\u29c9, <code>opentemplate</code> is:</p> <ul> <li>DevSecOps-Inspired \u2013 Security-aware but not solely focused on security.</li> <li>Python-Centric \u2013 Designed specifically for Python projects.</li> <li>Truly Open-Source \u2013 Unlike freemium or paid alternatives.</li> <li>GitHub-Integrated \u2013 Built to work seamlessly with GitHub, rather than     being a standalone platform.</li> </ul> <p>For developers seeking a modern, security-focused, and GitHub-native Python template, <code>opentemplate</code> is a compelling choice.</p>"},{"location":"template/about/faq/","title":"FAQ","text":""},{"location":"template/about/faq/#why-use-pdm-instead-of-uv","title":"Why use <code>pdm</code>\u00a0\u29c9 instead of <code>uv</code>\u00a0\u29c9?","text":"<p><code>pdm</code> offers more flexibility, including:</p> <ul> <li>PEP 582 support \u2013 Simplifies dependency management without virtual environments.</li> <li>Custom commands \u2013 Enables unified workflows without extra tools (more details\u00a0\u29c9).</li> </ul> <p>Note</p> <p><code>uv</code> is under evaluation and may be adopted in the future.</p>"},{"location":"template/about/faq/#why-use-renovate-instead-of-dependabot","title":"Why use <code>renovate</code>\u00a0\u29c9 instead of <code>dependabot</code>\u00a0\u29c9?","text":"<p><code>renovate</code> provides better support for:</p> <ul> <li><code>pdm.lock</code> (issue\u00a0\u29c9).</li> <li><code>[dev-dependencies]</code> (issue\u00a0\u29c9).</li> </ul> <p>Note</p> <p><code>dependabot</code> may be reconsidered once key issues are resolved and <code>uv</code> is used.</p>"},{"location":"template/about/faq/#why-is-basedpyright-used","title":"Why is <code>basedpyright</code>\u00a0\u29c9 used?","text":"<p><code>basedpyright</code> is a fork of <code>pyright</code>\u00a0\u29c9` which:</p> <ul> <li>makes the package <code>pip</code> installable     (unlike <code>pyright</code>\u00a0\u29c9)</li> <li>provides LSP\u00a0\u29c9     implementation for Python (unlike <code>mypy</code>\u00a0\u29c9)</li> <li>supports latest Python versions and features     (unlike <code>pytype</code>\u00a0\u29c9)</li> </ul>"},{"location":"template/about/faq/#why-use-the-rejected-pep582-standard","title":"Why use the rejected <code>pep582</code>\u00a0\u29c9 standard?","text":"<p>This approach allows:</p> <ul> <li> <p>Local dependencies \u2013 Everything stays in the project directory.</p> </li> <li> <p>Reusable installs \u2013 Simplifies scripting (e.g., running tests without     <code>nox</code> or <code>tox</code>).</p> </li> </ul> <p>Note</p> <p>This may change as tools such as <code>uv</code> evolve.</p>"},{"location":"template/about/faq/#why-is-changelogmd-empty","title":"Why is <code>CHANGELOG.md</code> empty?","text":"<p>It is not! It links to GitHub releases, which serve as the actual changelog.</p> <p>Options considered:</p> <ul> <li>Manual updates \u2013 Prone to being outdated.</li> <li>Bot updates \u2013 Conflicts with branch protection (details\u00a0\u29c9).</li> <li>GitHub releases link \u2013 Automated and secure.</li> </ul> <p>Tip</p> <p>You can manually copy release notes into <code>CHANGELOG.md</code> after a release.</p>"},{"location":"template/about/faq/#why-are-there-so-many-caches-in-github-actions","title":"Why are there so many caches in GitHub Actions?","text":"<p>Cache per each <code>dev-dependency</code>, standard dependencies (including optional) and even their combinations.</p> <p>This optimizes download times, which speeds up the workflows.</p> <p>Tip</p> <p>Check <code>.github/workflows/cache.yml</code> for cache settings.</p>"},{"location":"template/about/faq/#feature-does-not-work-on-windows","title":"Feature does not work on Windows","text":"<p>Windows features are best-effort and may not be fully supported.</p> <p>In terms of pre-commit hooks, more involved commands (e.g. <code>sbom-*</code> scripts or <code>fix-legal</code>) use Linux/MacOS specific features and may not work.</p> <p>Upvote this issue\u00a0\u29c9 when it comes to <code>fix-legal</code> script.</p>"},{"location":"template/about/philosophy/","title":"<code>opentemplate</code> Philosophy","text":""},{"location":"template/about/philosophy/#open","title":"Open","text":"<p>Transparent and community-driven; everyone can contribute, suggest changes, and voice opinions.</p>"},{"location":"template/about/philosophy/#ethical-nudging","title":"Ethical nudging","text":"<p>Encourages best practices by:</p> <ul> <li>Simplifying setup</li> <li>Reducing cognitive load (e.g., commit scope automation)</li> <li>Providing sensible defaults</li> <li>Making skipping best practices harder than following them</li> <li>Keeping explanations concise</li> <li>Automating reliably</li> </ul> <p>Note</p> <p>Inspired by nudge theory\u00a0\u29c9.</p>"},{"location":"template/about/philosophy/#adjustable","title":"Adjustable","text":"<p>No one-size-fits-all is possible. <code>opentemplate</code> enables intuitive customization by:</p> <ul> <li>Centralized config (<code>pyproject.toml</code>)</li> <li>Documented examples of adjustments provided</li> <li>Forkable for full control</li> </ul>"},{"location":"template/about/philosophy/#secure","title":"Secure","text":"<p>Integrates <code>devsecops</code> best practices (inspired by Python, Go) if:</p> <ul> <li>No added developer burden</li> <li>Benefits greatly outweigh daily usage costs</li> </ul>"},{"location":"template/about/philosophy/#state-of-the-art-practices","title":"State-of-the-Art practices","text":"<p>Follows modern best practices under the following conditions:</p> <ul> <li>Derived from reliable sources</li> <li>Not overly experimental</li> <li>Aligned with core principles</li> </ul> <p>Caution</p> <p>Some practices may be opinionated and should be adjusted.</p>"},{"location":"template/about/tips-and-tricks/","title":"Tips and tricks","text":"<p>This guide provides useful tips for working with the <code>opentemplate</code>-based projects.</p>"},{"location":"template/about/tips-and-tricks/#committing","title":"Committing","text":"<p>Important</p> <p>You can use <code>git commit</code> normally; <code>pre-commit</code> will not allow you commit without passing all the checks.</p> <p><code>opentemplate</code> offers the following commit options:</p> <ul> <li> <p><code>pdm run commit</code> \u2013 Runs <code>git commit</code> with <code>--signoff --gpg-sign</code>.</p> </li> <li> <p><code>pdm run commit-type</code> \u2013 Prompts for a commit message and type     (<code>feat</code>, <code>fix</code>, <code>feat!</code>, <code>fix!</code>).</p> </li> <li> <p><code>pdm run commit-guided</code> \u2013 Opens an editor with commit type options.</p> </li> </ul> <p>Important</p> <p>This feature will likely be moved to a separate tool in the future.</p>"},{"location":"template/configuration/","title":"Configuration","text":"<p>Most settings for <code>opentemplate</code> are managed in <code>pyproject.toml</code>, with full flexibility for customization if needed.</p> <p>Start here:</p> <ul> <li>Basic \u2013 common settings for most use cases</li> <li>Advanced \u2013 for adding tool groups or complex changes</li> </ul> <p>Tip</p> <p>For deeper insight and easier adjustments, see the Details documentation.</p>"},{"location":"template/configuration/advanced/","title":"Advanced","text":"<p>To host your own template based on <code>opentemplate</code>, you can follow these steps:</p> <ol> <li>Fork the repository\u00a0\u29c9     to your own GitHub account/organization</li> <li>Make it a template repository\u00a0\u29c9</li> <li>Follow the steps in the quick start guide (e.g. hardening)</li> <li>Clone the repository, <code>pdm setup</code> and perform your changes</li> </ol> <p>Tip</p> <p>Improvements to <code>opentemplate</code> are welcome! Please open an issue, discuss with the maintainers and your features might be upstreamed.</p>"},{"location":"template/configuration/advanced/#general","title":"General","text":"<p>Many of the adjustments will be tested as you develop them, as <code>opentemplate</code> is also a Python package.</p> <p>Caveats to remember:</p> <ul> <li><code>.github/workflows/template-*</code> - files should be of special interest     as they are used for <code>template</code> related functionality, e.g. testing</li> <li><code>.github/workflows/release*.yml</code> - most complex workflow, a few parts     are not fully tested currently.</li> </ul>"},{"location":"template/configuration/advanced/#tips","title":"Tips","text":"<p>When adding a new feature (e.g. tool/check) you might consider the following algorithm-like steps:</p> <ol> <li> <p>Check if the tool is available as a Python package     (e.g. on <code>PyPI</code>\u00a0\u29c9)</p> </li> <li> <p>If yes and it fits in one of the categories (e.g. <code>dev-python</code>):</p> <ol> <li> <p>Add the package to <code>pyproject.toml</code>     (usually <code>dev-&lt;category&gt;</code> in <code>[dependency-groups]</code> section)</p> </li> <li> <p>Specify only the major version (e.g. <code>&gt;=1</code>) if above <code>1.0.0</code>,     or the exact version if below <code>1.0.0</code></p> </li> <li> <p>Add the tool call to <code>[tool.pdm.scripts]</code> under <code>check-&lt;category&gt;</code>     and <code>fix-&lt;category&gt;</code> if applicable</p> </li> <li> <p>Go to testing steps below</p> </li> </ol> </li> <li> <p>If yes, but the appropriate category does not exist:</p> <ol> <li> <p>Create a new <code>dev-&lt;category&gt;</code> and put the package there</p> </li> <li> <p>Create appropriate entry in <code>.pre-commit-config.yaml</code>     under the <code>- repo: \"local\"</code> section, <code>id: &lt;category&gt;</code></p> </li> <li> <p>Create an entry in <code>.github/renovate.json</code> with appropriate     <code>matchPackageNames</code>\u00a0\u29c9</p> </li> <li> <p>Create three workflows in <code>.github/workflows</code>     (see <code>GitHub Actions</code> guide for more details):</p> <ol> <li> <p><code>&lt;category&gt;.yml</code> - checker run on human PRs</p> </li> <li> <p><code>&lt;category&gt;-renovate.yml</code> - checker run on Renovate PRs</p> </li> <li> <p><code>&lt;category&gt;-reusable.yml</code> - checker run used by the other two     and which (probably) uses <code>.github/workflows/check-reusable.yml</code></p> </li> </ol> </li> <li> <p>Go to testing steps below</p> </li> </ol> </li> <li> <p>If not:</p> <ol> <li> <p>Create appropriate entry in <code>.pre-commit-config.yaml</code> if the tool is available as a <code>pre-commit</code> hook     (or try to create one if not)</p> </li> <li> <p>Add support for the tool in <code>.github/renovate.json/</code>     (if applicable and available)</p> </li> <li> <p>Create three workflows in <code>.github/workflows</code>     (see <code>GitHub Actions</code> guide for more details):</p> <ol> <li> <p><code>&lt;category&gt;.yml</code> - checker run on human PRs</p> </li> <li> <p><code>&lt;category&gt;-update.yml</code> - if the tool requires updates,     but not supported by <code>renovate</code>\u00a0\u29c9</p> </li> </ol> </li> </ol> </li> </ol> <p>Tip</p> <p>Order of the <code>.pre-commit-config.yaml</code> entries is important. Make sure to think about the implications of the changes done by your entry on the whole pipeline.</p> <p>Caution</p> <p>This is a rough guide and in many specific cases you might have to consult specific functionalities and their implementation (start by consulting details documentation).</p>"},{"location":"template/configuration/basic/","title":"Basic","text":"<p>This guide covers essential adjustments to the template.</p> <p>Caution</p> <p>Keep changes minimal to simplify updates. If your changes relate to a specific section, you may want to consult details documentation.</p>"},{"location":"template/configuration/basic/#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>Most adjustments are made in <code>pyproject.toml</code>, which controls:</p> <ul> <li>Developer Dependencies \u2013 Managed in <code>[dependency-groups]</code>     (each dependency prefixed by <code>dev</code>).</li> <li>Tool Settings \u2013 Configures tools like     <code>ruff</code>\u00a0\u29c9     section <code>[tool.&lt;name-of-tool&gt;]</code>.</li> <li>Developer Commands \u2013 Defined under <code>[tool.pdm.scripts]</code>     (usually <code>check-&lt;type&gt;</code> or <code>fix-&lt;type&gt;</code>).</li> </ul> <p>Note</p> <p>Sections are ordered by importance and assumed frequency of change.</p>"},{"location":"template/configuration/basic/#pre-commit","title":"<code>pre-commit</code>","text":"<p>Some tools not integrated with <code>pyproject.toml</code> can be configured by editing <code>.pre-commit-config.yaml</code>.</p> <p>Tip</p> <p>Non-<code>pyproject.toml</code> configurations are at the beginning of the file.</p> <p>More details: pre-commit documentation\u00a0\u29c9</p>"},{"location":"template/configuration/basic/#github-actions","title":"GitHub Actions","text":"<p><code>opentemplate</code> minimizes manual GitHub Actions configuration, allowing modifications through <code>pyproject.toml</code>.</p> <p>To add or edit actions, edit files in <code>.github/workflows/</code> folder.</p> <p>Tip</p> <p>See GitHub Actions Guide for more information.</p>"},{"location":"template/configuration/basic/#other-adjustments","title":"Other adjustments","text":"<p>For other modifications, check:</p> <ul> <li>Relevant documentation sections (mostly details documentation).</li> <li>FAQ for general questions.</li> <li>Tips and Tricks</li> </ul> <p>Important</p> <p>Need Help? Search the docs for specific files or directories. If you can\u2019t find what you need, please open an issue\u00a0\u29c9.</p>"},{"location":"template/configuration/basic/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/workflows/</code></li> </ul>"},{"location":"template/details/","title":"Details","text":"<p>This section covers specific parts of <code>opentemplate</code> in-depth; how they work and how to adjust them if needed.</p> <p>Caution</p> <p>You don\u2019t need to read this to use <code>opentemplate</code>, but a quick skim can be helpful.</p> <p>Explore the topics:</p> <ul> <li>Security \u2013 security measures and policies provided by <code>opentemplate</code></li> <li>Tests \u2013 how Python testing is managed</li> <li>Python \u2013 linters and quality checks</li> <li>Documentation \u2013 building and validating docs</li> <li>GitHub Actions \u2013 CI setup and workflows</li> <li>Scheduled jobs \u2013 automated updates and security checks</li> <li>Legal \u2013 licensing and copyright via REUSE\u00a0\u29c9</li> <li>Prose \u2013 checks for docstrings, markdown etc.</li> <li>Other languages \u2013 QA for bash, JSON, etc.</li> </ul>"},{"location":"template/details/documentation/","title":"Documentation","text":"<p>This guide outlines the documentation features included in the <code>opentemplate</code> template and available for your Python package.</p>"},{"location":"template/details/documentation/#features","title":"Features","text":"<p>The template uses <code>mkdocs</code>\u00a0\u29c9 with various plugins for enhanced functionality:</p> <ul> <li>Single source of truth \u2013 Both GitHub and <code>mkdocs</code> share the same     markdown files (adjustable in <code>mkdocs.yml</code> and via content generation).</li> <li>Automated Docs \u2013 Generates documentation from     <code>docstrings</code> and <code>/docs</code> using     <code>mkdocstrings</code>\u00a0\u29c9.</li> <li>Modern Design \u2013 Uses <code>mkdocs-material</code>\u00a0\u29c9     for a polished look.</li> <li>Auto Navigation \u2013 <code>mkdocs-awesome-pages-plugin</code>\u00a0\u29c9     builds the navigation structure.</li> <li>Predefined Sections \u2013 <code>docs</code> includes structured folders     (only visible in generated documentation if populated).</li> <li>Versioning Support \u2013 <code>mike</code>\u00a0\u29c9     manages documentation versions.</li> <li>GitHub Alerts \u2013 Use GitHub Alerts\u00a0\u29c9     to emphasize information (works in generated docs and docstrings!).</li> </ul> <p>Tip</p> <p>See <code>mkdocs.yml</code> for a full list of features.</p>"},{"location":"template/details/documentation/#checks-and-fixers","title":"Checks and fixers","text":"<ul> <li>Uses the same checks as in     Prose (excluding auto-generated docstrings).</li> <li>Runs a documentation build as a smoke test during commits.</li> <li>Ensures <code>docstrings</code> coverage via     <code>interrogate</code>\u00a0\u29c9 (default: 100%).</li> <li>Detects common misspellings using     <code>codespell</code>\u00a0\u29c9.</li> </ul> <p>Important</p> <p>Always review generated documentation manually before pushing changes.</p>"},{"location":"template/details/documentation/#writing-docstrings","title":"Writing docstrings","text":"<ul> <li>Document every function, class, and module in your package.</li> <li>Follow Google docstring style\u00a0\u29c9     for consistency.</li> <li>Use <code>&lt;!--\u2007mkdocs remove start --&gt;</code> and <code>&lt;!--\u2007mkdocs remove end --&gt;</code>     to exclude content from <code>mkdocs</code> (e.g. GitHub-only notes).</li> <li>You can use absolute paths in the links, just like on GitHub,     for example <code>/docs/README.md</code> will be transformed to <code>mkdocs</code>-compatible     <code>../README.md</code> if the link was specified in file <code>/docs/tutorials/foo.md</code>.</li> </ul>"},{"location":"template/details/documentation/#adjustments","title":"Adjustments","text":"<p>Common places to change documentation settings:</p> <ul> <li><code>pyproject.toml</code> \u2013 Configure plugins and tools in     <code>[dependency-groups]</code> (<code>dev-docs</code>).</li> <li><code>mkdocs.yml</code> \u2013 General documentation settings.</li> <li><code>docs/</code> \u2013 Add or modify content (not autogenerated).</li> <li><code>/src</code> docstrings \u2013 For API documentation.</li> <li>Top-level <code>*.md</code> files \u2013 General project documentation     (see <code>nav</code> in <code>mkdocs.yml</code>).</li> </ul> <p>Caution</p> <p><code>README.md</code> in <code>/docs</code> serves as the documentation description, not the project overview.</p>"},{"location":"template/details/documentation/#content-generation","title":"Content generation","text":"<p>There might be cases where you want <code>mkdocs</code> documentation to differ from GitHub files (e.g. lack of support for certain features).</p> <p>In this case, you can wrap the content you want to delete from <code>mkdocs</code> generated representation in <code>&lt;!--\u2007mkdocs remove start --&gt;</code> and <code>&lt;!--\u2007mkdocs remove end --&gt;</code> HTML/markdown comments.</p> <p>Tip</p> <p>Check <code>README.md</code> for an example.</p>"},{"location":"template/details/documentation/#code-sources","title":"Code sources","text":"<ul> <li><code>mkdocs.yml</code></li> <li><code>pyproject.toml</code></li> <li><code>docs/</code></li> <li><code>docs/gen_ref_pages.py</code></li> <li><code>.github/workflows/docs*.yml</code></li> </ul>"},{"location":"template/details/github-actions/","title":"GitHub Actions","text":"<p>GitHub Actions\u00a0\u29c9 are used to run CI/CD pipelines.</p> <p>Important</p> <p>No pipeline modifies the repository contents (e.g. no formatting is done), it only verifies the compliance (e.g. linting) of source code.</p>"},{"location":"template/details/github-actions/#pipelines","title":"Pipelines","text":"<p>Note</p> <p>Configuration is stored in <code>.github</code> directory and <code>.github/workflows</code> specifically</p> <p>Pipelines run approximately the same steps as <code>pre-commit</code> hooks, the specific tooling functionality is located in various other documents such as legal, python, other languages, prose, etc.</p> <p>Features of note include:</p> <ul> <li> <p>each workflow starts with a semantic prefix defining its purpose     (e.g. <code>tests</code>, <code>security</code>, <code>docs</code>)</p> </li> <li> <p>most of the workflows from each semantic group comes in three flavors:</p> <ul> <li><code>&lt;type&gt;.yml</code> - analogous to check/linter of <code>type</code>, done for every push to     the pull request (usually ran only if files of interest where changed     in the pull request, e.g. <code>**.md</code> files for <code>markdown.yml</code></li> <li><code>&lt;type&gt;-renovate.yml</code> - checks run, when <code>renovate[bot]</code> makes an update     to the checkers (e.g. <code>dev-markdown</code> in <code>pyproject.toml</code>'s <code>[dependency-groups]</code>     gets updated, the markdown checks run on all <code>markdown</code> files in the repository).     This allows verification of updates against currently accepted     standards (e.g. no new checks were introduced without feedback)</li> <li><code>&lt;type&gt;-reusable.yml</code> - de facto implementation of the linter,     will be called <code>&lt;type&gt;.yml</code> and <code>&lt;type&gt;-renovate.yml</code></li> </ul> </li> <li> <p><code>*-update.yml</code> workflows are ran periodically, see     scheduled jobs documentation     for more details</p> </li> </ul> <p>Note</p> <p>This structure may not be present in all workflows, as some checks should not be ran on every push or renovate update, in these cases only <code>&lt;type&gt;.yml</code> might be present.</p>"},{"location":"template/details/github-actions/#reusable-workflows","title":"Reusable workflows","text":"<p>Reusable workflows\u00a0\u29c9:</p> <ul> <li>Improve security (as the source code is not modifiable     by the repository owner)</li> <li>Streamline updates from the main template (as the reusable     workflows are updated from the <code>opennudge/opentemplate</code> repository)</li> </ul> <p>You might want to change the reusable workflows to local workflows if you:</p> <ul> <li>want to fully control your pipelines</li> <li>want to host/adjust the pipeline yourself</li> <li>do not want the pipelines to change behavior without your consent</li> </ul> <p>If so, check the configuration section.</p>"},{"location":"template/details/github-actions/#special-workflows","title":"Special workflows","text":"<p>These workflows might be of special interest:</p> <ul> <li><code>check-run-reusable.yml</code> - runs most of the checks     defined in <code>&lt;type&gt;-reusable.yml</code> as a sort of centralized runner</li> <li><code>security-*</code> - ran on PRs and periodically to ensure the security     of the project, see security     section for more details</li> </ul>"},{"location":"template/details/github-actions/#caching","title":"Caching","text":"<p>Centralized caching (create from <code>main</code> branch) is used for all workflows, after PR merge, the cache is updated (if needed) and stored.</p> <p>Note</p> <p>Cache is optimized on a per-workflow basis, each having a minimal set of necessary dependencies.</p> <p>Tip</p> <p>For source code check <code>cache.yml</code></p>"},{"location":"template/details/github-actions/#configuration","title":"Configuration","text":"<p>Important</p> <p>Many of the features can be controlled via <code>pyproject.toml</code> as described in configuration section.</p>"},{"location":"template/details/github-actions/#changing-workflows-reusability","title":"Changing workflows reusability","text":"<p>Scripts provided in <code>.github/workflows/reusability</code>:</p> <ul> <li><code>localize.sh</code> - changes the reusable workflows     (pointing to <code>opennudge/opentemplate</code>) to local workflows</li> <li><code>globalize.sh</code> - changes the local workflows to reusable workflows     (pointing to <code>opennudge/opentemplate</code>)</li> </ul> <p>Run <code>./reusability/localize.sh</code> or <code>./reusability/globalize.sh</code> to apply the changes. The script also allows you to specify the directory where the changes should be applied as an argument.</p> <p>Caution</p> <p>While <code>localize.sh</code> is safe to run, <code>globalize.sh</code> should be used with caution, as it may incorrectly <code>globalize</code> local workflows/actions you have added on top of the template provided functionality.</p> <p>Warning</p> <p><code>release-package-reusable.yml</code> and <code>release-package-upload-reusable.yml</code> used by <code>release.yml</code> should not be globalized as they are attested uploads to PyPI do not yet support reusable workflows (see this GitHub issue\u00a0\u29c9).</p>"},{"location":"template/details/github-actions/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/*.yml</code></li> <li><code>.github/actions/*/action.yml</code></li> </ul>"},{"location":"template/details/legal/","title":"Legal","text":"<p>Caution</p> <p>This document is not a legal advice. Consult a professional for legal questions.</p> <p>This document outlines the legal aspects of <code>opentemplate</code>.</p>"},{"location":"template/details/legal/#compliance-and-fixes","title":"Compliance and fixes","text":""},{"location":"template/details/legal/#reuse-compliance","title":"REUSE compliance","text":"<p>Repositories created from this template follow REUSE\u00a0\u29c9 framework, meaning:</p> <ul> <li>Every file includes an SPDX\u00a0\u29c9     header with <code>license</code> and copyright details.</li> <li>Headers are either language-specific comments or <code>&lt;filename&gt;.license</code>     files when comments aren't supported.</li> </ul> <p>Important</p> <p>Each contributor will be added to the SPDX headers. See <code>SPDX-FileContributor</code>\u00a0\u29c9 for more details.</p> <ul> <li>The <code>pre-commit</code> hook automatically adds missing headers (<code>fix-legal</code> in <code>pyproject.toml</code>).</li> <li><code>check-legal</code> in <code>pyproject.toml</code> ensures compliance and runs after <code>fix-legal</code>.</li> </ul>"},{"location":"template/details/legal/#license-compliance","title":"License compliance","text":"<p><code>google/osv-scanner</code>\u00a0\u29c9 checks dependency licenses. Allowed licenses (subject to change):</p> <p>MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, Unlicense, Zlib, OFL-1.1, 0BSD, PSF-2.0</p>"},{"location":"template/details/legal/#adjustments","title":"Adjustments","text":""},{"location":"template/details/legal/#changing-license","title":"Changing license","text":"<ul> <li>Run <code>pdm run reuse download &lt;LICENSE-SPDX&gt;</code> and link the <code>/LICENSE.md</code> file     to appropriate file in <code>licenses/</code>.</li> <li>Change <code>license</code> in <code>pyproject.toml</code> to the new SPDX identifier.</li> </ul>"},{"location":"template/details/legal/#modifying-license-compliance","title":"Modifying license compliance","text":"<p>Important</p> <p>Adjust project licensing as needed.</p> <p>To update allowed licenses for <code>osv-scanner</code>:</p> <ul> <li>Modify <code>.pre-commit-config.yaml</code> (<code>id: osv-scanner</code>) for local changes.</li> <li>Update <code>.github/workflows/reusable-security-osv-scanner.yml</code> for CI.</li> </ul>"},{"location":"template/details/legal/#documents","title":"Documents","text":"<ul> <li><code>/LICENSE.md</code> (Apache-2.0 by default)     should be a symbolic link to the actual license file in <code>licenses/</code>.</li> <li><code>LICENSES/</code> folder contains all project licenses     (e.g., <code>pdm.lock</code> is <code>CC0-1.0</code>\u00a0\u29c9).</li> <li><code>CODE_OF_CONDUCT.md</code> follows the     Contributor Covenant\u00a0\u29c9.</li> <li><code>DCO.md</code> (Developer Certificate of Origin) must remain unchanged;     all commits must be signed off (details\u00a0\u29c9).</li> <li><code>GOVERNANCE.md</code> outlines project governance.</li> <li><code>CITATION.cff</code> provides citation details</li> </ul> <p>Tip</p> <p>See GitHub guide\u00a0\u29c9 for more information.</p>"},{"location":"template/details/legal/#code-sources","title":"Code Sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/legal*.yml</code></li> </ul>"},{"location":"template/details/other-languages/","title":"Other languages","text":"<p>Important</p> <p>Although these checks are about other languages, the tooling is largely Python-based, and the configuration is in the <code>pyproject.toml</code></p> <p>Except Python a few other \"complementary\" languages (mostly markup) are verified by both <code>pre-commit</code> and CI pipelines, namely:</p> <ul> <li>Generic text checks - <code>codespell</code>\u00a0\u29c9     verifies spelling and compliance with <code>editorconfig</code>\u00a0\u29c9     is checked by     <code>editorconfig-checker</code>\u00a0\u29c9.     Additionally <code>opentemplate</code> looks for merge conflict strings and whether     scripts with <code>shebang</code> (<code>#</code>) is executable</li> <li><code>yaml</code> - responsible for GitHub Actions workflows, <code>mkdocs.yml</code>,     <code>.pre-commit-config.yaml</code>, performed by     adrienverge/yamllint\u00a0\u29c9</li> <li><code>pyproject.toml</code> - responsible for Python project configuration,     validated by abravalheri/validate-pyproject\u00a0\u29c9</li> <li><code>json</code> - responsible mainly for <code>renovate.json</code>, performed by     pre-commit/pre-commit-hooks\u00a0\u29c9</li> <li><code>toml</code> - basic syntax correctness checks</li> <li><code>ini</code> responsible for <code>.editorconfig</code> and <code>.vale.ini</code>,     performed by danieljrmay/pyinilint\u00a0\u29c9</li> <li><code>markdown</code> - any <code>markdown</code> files, see prose for more information)</li> <li><code>CITATION.cff</code> - checked by     citation-file-format/cffconvert\u00a0\u29c9</li> </ul> <p>As with other commands, they have <code>check-&lt;language&gt;</code> and (if available) <code>fix-&lt;language&gt;</code> variants and follow standard procedure as outlined in the configuration section.</p>"},{"location":"template/details/other-languages/#code-sources","title":"Code Sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/workflows/&lt;language&gt;*.yml</code></li> </ul>"},{"location":"template/details/prose/","title":"Prose","text":"<p>This document covers non-code aspects of <code>opentemplate</code>, including prose checks, documentation, and related files.</p>"},{"location":"template/details/prose/#checks-and-fixes","title":"Checks and Fixes","text":""},{"location":"template/details/prose/#markdown","title":"Markdown","text":"<p>Markdown is the primary format for project documentation. The following tools ensure consistency and quality:</p> <ul> <li>Formatting: <code>mdformat</code>\u00a0\u29c9</li> <li>Linting: <code>pymarkdownlnt</code>\u00a0\u29c9     (similar to <code>markdownlint</code>\u00a0\u29c9)</li> <li>Dead link checking: <code>md-dead-link-check</code>\u00a0\u29c9</li> </ul>"},{"location":"template/details/prose/#vale","title":"<code>vale</code>","text":"<p><code>vale</code>\u00a0\u29c9 checks writing style and grammar. <code>pre-commit</code> and GitHub Actions run it on any text files (internet access is required).</p> <p>Tip</p> <p>To exclude specific checks, update <code>.vale.ini</code> instead of <code>pyproject.toml</code>. See Vale's documentation\u00a0\u29c9 for details.</p> <p>Caution</p> <p>Many of the findings of type <code>suggestion</code> and <code>warning</code> will be false positives. Use your judgment when addressing them.</p>"},{"location":"template/details/prose/#documentation-files","title":"Documentation Files","text":"<ul> <li><code>ROADMAP.md</code> \u2013 Planned features and changes.     Update before each release or remove.</li> <li><code>ADOPTERS.md</code> \u2013 List of project adopters, categorized.</li> <li><code>ANNOUNCEMENTS.md</code> \u2013 Updates on releases, discussions, and other project news.</li> <li><code>CONTRIBUTING.md</code> \u2013 Guidelines for contributing.</li> <li><code>SUPPORT.md</code> \u2013 Support channels and Code of Conduct information.</li> </ul>"},{"location":"template/details/prose/#code-sources","title":"Code Sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/workflows/prose.yml</code></li> </ul>"},{"location":"template/details/python/","title":"Python","text":"<p>Important</p> <p>For testing details, see the tests documentation.</p> <p>As the project's core language, <code>Python</code> undergoes the most extensive linting.</p>"},{"location":"template/details/python/#checks-and-fixes","title":"Checks and fixes","text":"<p>The following tools are used, in order:</p> <ul> <li>Code formatting and linting: <code>ruff</code>\u00a0\u29c9     (all checks enabled by default)</li> <li>Type checking: <code>basedpyright</code>\u00a0\u29c9     (run as a separate <code>typing</code> step)</li> <li>Docstring coverage: <code>interrogate</code>\u00a0\u29c9     (checks all functions, classes, and modules, including private ones)</li> <li>Static dependency analysis: <code>FawltyDeps</code>\u00a0\u29c9     (may produce false positives; see Adjustments)</li> </ul>"},{"location":"template/details/python/#adjustments","title":"Adjustments","text":"<p>You can configure most of the settings in <code>pyproject.toml</code> (see Configuration), for example:</p> <ul> <li>Lower docstring coverage threshold: Adjust <code>fail-under</code>     in <code>[tool.interrogate]</code>.</li> <li>Handle false positives in <code>FawltyDeps</code>: Add dependencies to     <code>ignore_undeclared</code>, <code>ignore_undefined</code> or <code>ignore_unused</code> under     <code>[tool.fawltydeps]</code> (ensure correctness before ignoring).</li> </ul>"},{"location":"template/details/python/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/python*.yml</code></li> </ul>"},{"location":"template/details/scheduled-jobs/","title":"Scheduled jobs","text":"<p><code>opentemplate</code> runs scheduled jobs weekly, typically on weekends.</p> <p>Tip</p> <p>All cron-like jobs are in <code>/.github/workflows</code> and use the <code>on: schedule</code> trigger.</p>"},{"location":"template/details/scheduled-jobs/#jobs","title":"Jobs","text":"<p>Most scheduled jobs focus on security (<code>security-_</code> workflows) and are run periodically as vulnerabilities evolve, namely:</p> <ul> <li>Security posture analysis: <code>ossf/scorecard</code>\u00a0\u29c9</li> <li>Vulnerability scanning: <code>google/osv-scanner</code>\u00a0\u29c9</li> <li>Bug detection and code quality: <code>semgrep/semgrep</code>\u00a0\u29c9</li> </ul>"},{"location":"template/details/scheduled-jobs/#dependency-automation","title":"Dependency automation","text":"<p>Automating dependency updates ensures security and stability.</p>"},{"location":"template/details/scheduled-jobs/#renovate","title":"Renovate","text":"<p>Important</p> <p>Only relevant workflows run when <code>renovate</code> opens a PR (e.g., <code>markdown</code> checks for <code>dev-markdown</code> updates).</p> <ul> <li>Updates run on weekends.</li> <li>Dependencies are grouped by <code>dev-&lt;type&gt;</code>.</li> <li>Updates are handled by <code>github-actions[bot]</code>.</li> </ul>"},{"location":"template/details/scheduled-jobs/#adjustments","title":"Adjustments","text":"<p>Caution</p> <p>If adding a <code>dev</code> dependency in <code>pyproject.toml</code>, update <code>.github/renovate.json</code> accordingly.</p> <p>New <code>dev-&lt;type&gt;</code> groups require:</p> <ul> <li>A corresponding entry in <code>renovate.json</code>.</li> <li>(Probably) a new <code>.github/workflows/renovate-&lt;type&gt;.yml</code> workflow.</li> </ul> <p>Note</p> <p><code>.github/workflows/&lt;type&gt;-renovate.yml</code> should run only when the branch name matches <code>dependencies-dev-&lt;type&gt;</code>.</p> <p>Tip</p> <p>See the GitHub Actions section for more details.</p>"},{"location":"template/details/scheduled-jobs/#pre-commit","title":"pre-commit","text":"<p>Independent <code>pre-commit</code> hooks update weekly. All hooks run against the latest <code>main</code> branch state to ensure updates are correct.</p> <p>Note</p> <p><code>renovate</code> does not update <code>pre-commit</code> hooks due to maintainers' policy (details\u00a0\u29c9).</p>"},{"location":"template/details/scheduled-jobs/#content-generation","title":"Content generation","text":"<p><code>cog</code>\u00a0\u29c9 automates content generation based on source code comments (<code>DO NOT EDIT UNTIL end marker</code> in <code>pyproject.toml</code>).</p> <p>Additionally, <code>opennudge/cogeol</code>\u00a0\u29c9 integrates Python's end-of-life\u00a0\u29c9 data to simplify management.</p> <p>Together with GitHub Actions, these ensure:</p> <ul> <li>Support for the latest three Python versions.</li> <li>CI/CD always runs appropriate versions.</li> <li>PRs are opened for new releases and scheduled deprecations.</li> </ul>"},{"location":"template/details/scheduled-jobs/#template-updates","title":"Template updates","text":"<p>Note</p> <p>Template updates are not currently automated; the workflow is a placeholder for future use.</p>"},{"location":"template/details/scheduled-jobs/#code-sources","title":"Code sources","text":"<ul> <li><code>.github/renovate.json</code></li> <li><code>.github/workflows/pre-commit-update*.yml</code></li> <li><code>.github/workflows/security-osv-scanner-update*.yml</code></li> <li><code>.github/workflows/security-semgrep*.yml</code></li> <li><code>.github/workflows/*-renovate.yml</code></li> <li><code>.github/workflows/generation*.yml</code></li> </ul>"},{"location":"template/details/security/","title":"Security","text":"<p>This document outlines security practices in the template.</p> <p>Note</p> <p>See installation/hardening for additional security measures.</p>"},{"location":"template/details/security/#checks","title":"Checks","text":"<p>Key security checks include:</p> <ul> <li> <p>Commit validation: Enforced signature and DCO sign-off     (<code>siderolabs/conform</code>\u00a0\u29c9)</p> </li> <li> <p>Branch protection: No direct commits to <code>main</code>     (<code>pre-commit/pre-commit-hooks</code>\u00a0\u29c9)</p> </li> <li> <p>Vulnerability scanning: <code>google/osv-scanner</code>\u00a0\u29c9</p> </li> <li> <p>Secret scanning: <code>trufflesecurity/trufflehog</code>\u00a0\u29c9</p> </li> <li> <p>Language-specific security checks:</p> <ul> <li><code>zizmor</code>\u00a0\u29c9 for GitHub Actions security</li> <li><code>semgrep/semgrep</code>\u00a0\u29c9 for Python/general</li> </ul> </li> <li> <p>Pinned dependencies: OSSF Scorecard\u00a0\u29c9</p> </li> </ul> <p>Important</p> <p>These checks run both locally (<code>pre-commit</code>) and in CI/CD.</p> <p>Tip</p> <p>Configuration is primarily in <code>pyproject.toml</code> and <code>.pre-commit-config.yaml</code>, with a few additional settings in <code>.github/workflows</code>.</p>"},{"location":"template/details/security/#github-actions","title":"GitHub Actions","text":"<p>Important</p> <p>See GitHub Actions section for details.</p> <p>Security measures:</p> <ul> <li>Automated dependency updates: <code>renovatebot/renovate</code>\u00a0\u29c9</li> <li>Minimal permissions for GitHub Actions</li> <li>Software Bill of Materials (SBOMs): Generated, stored, and attested in releases</li> <li>Reusable workflows for key tasks (e.g., <code>release</code>, <code>test</code>) to minimize     misconfiguration risks     (more info\u00a0\u29c9)</li> <li>Egress monitoring: <code>stepsecurity/harden-runner</code>\u00a0\u29c9</li> <li>Static analysis: <code>actionlint</code>\u00a0\u29c9</li> </ul> <p>Important</p> <p>Security checks (e.g., <code>scorecard</code>) run weekly.</p>"},{"location":"template/details/security/#security-documents","title":"Security documents","text":"<p>Tip</p> <p>Review these documents and adapt them to your project.</p> <p>Following Open Source Security Foundation best practices\u00a0\u29c9:</p> <ul> <li>Security policy: <code>SECURITY.md</code>\u00a0\u29c9</li> <li>Machine-readable security insights: <code>SECURITY-INSIGHTS.yml</code>\u00a0\u29c9</li> <li>Third-party dependency policy: <code>SECURITY-DEPENDENCY.md</code></li> <li>Self-assessment report: <code>SECURITY-SELF-ASSESSMENT.md</code>     per CNCF guidelines\u00a0\u29c9</li> <li>Changelog: <code>CHANGELOG.md</code> linking to     GitHub releases (FAQ)</li> </ul> <p>Important</p> <p>See the full OpenSSF Scorecard checklist\u00a0\u29c9.</p>"},{"location":"template/details/security/#adjustments","title":"Adjustments","text":"<p>Most security configurations (e.g., <code>check-security</code>, <code>check-workflow</code>) are in <code>pyproject.toml</code>. Additional security workflows are in <code>.github/workflows</code> (prefix: <code>security-</code>).</p>"},{"location":"template/details/security/#osv-scanner","title":"OSV Scanner","text":"<p>To ignore specific vulnerabilities, modify <code>osv-scanner.toml</code> (docs\u00a0\u29c9).</p> <p>Warning</p> <p>License-related issues in currently defined development dependencies are ignored by default.</p> <p>Tip</p> <p><code>osv-scanner.toml</code> settings are respected by OSSF Scorecard.</p>"},{"location":"template/details/security/#conform","title":"Conform","text":"<p><code>siderolabs/conform</code>\u00a0\u29c9 enforces DCO sign-off and GPG signatures. Modify <code>.conform.yml</code> to adjust checks.</p>"},{"location":"template/details/security/#additional-resources","title":"Additional resources","text":"<ul> <li>Threat Modeling Manifesto\u00a0\u29c9</li> <li>CNCF Tag Security\u00a0\u29c9</li> <li>AppSec Tools\u00a0\u29c9</li> </ul>"},{"location":"template/details/tests/","title":"Tests","text":"<p>This document outlines the testing process of <code>opentemplate</code>-based projects.</p>"},{"location":"template/details/tests/#features","title":"Features","text":"<ul> <li>Uses <code>pytest</code>\u00a0\u29c9 for testing.</li> <li>Measures test coverage with <code>pytest-cov</code>\u00a0\u29c9     (default threshold: <code>100%</code>).</li> <li>Local testing: Runs on the latest three Python versions,     following SPEC 0\u00a0\u29c9.</li> <li>CI testing: Runs across multiple Python versions and     OSs (Linux, macOS, Windows) via GitHub Actions.</li> <li>Randomized test execution ensures independence.</li> <li>Includes <code>Hypothesis</code>\u00a0\u29c9     for property-based testing.</li> </ul> <p>Note</p> <p><code>tox</code> is not used; instead, tests are run with different interpreters locally and across CI runners.</p>"},{"location":"template/details/tests/#writing-tests","title":"Writing tests","text":"<ul> <li>All tests are in the <code>tests</code> directory, named <code>test_.py</code>.</li> <li>Tests should follow <code>pytest</code> style.</li> <li>Recommended: Use <code>Hypothesis</code>\u00a0\u29c9     for property-based testing, as required     by OSSF Scorecard\u00a0\u29c9.</li> </ul> <p>Tip</p> <p><code>opentemplate</code> does not enforce a specific testing style, but methodologies like Test/Behavior Driven Development may be beneficial.</p>"},{"location":"template/details/tests/#checks-and-fixes","title":"Checks and fixes","text":"<p>Tests should be documented, formatted, and typed as they will be checked like regular source code.</p> <p>Tip</p> <p>See the Python section for more information.</p>"},{"location":"template/details/tests/#adjustments","title":"Adjustments","text":"<p>Note</p> <p>All changes apply to the CI as well.</p> <ul> <li>To change coverage requirements, update the <code>fail_under</code>     flag in <code>[tool.coverage.reports]</code> section in <code>pyproject.toml</code></li> <li>To change the test runner, update the <code>tests</code> script in     the <code>pyproject.toml</code> file.</li> </ul>"},{"location":"template/details/tests/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/tests*.yml</code></li> <li><code>.github/workflows/typing*.yml</code></li> </ul>"},{"location":"template/quickstart/","title":"Quick start","text":"<p><code>opentemplate</code> works like a typical Python project but adds automation and best practices behind the scenes.</p> <p>To get started:</p> <ul> <li>Installation \u2013 one-click setup</li> <li>Usage \u2013 daily workflow with <code>opennudge</code></li> </ul>"},{"location":"template/quickstart/installation/","title":"Installation","text":""},{"location":"template/quickstart/installation/#prerequisites","title":"Prerequisites","text":"<p>Before starting, install the following on your local machine:</p> <ol> <li>Python\u00a0\u29c9 (latest version recommended).</li> <li><code>pdm</code>\u00a0\u29c9     package manager.</li> </ol> <p>Note</p> <p>Learn more about <code>pdm</code> in the pdm documentation\u00a0\u29c9</p>"},{"location":"template/quickstart/installation/#setup","title":"Setup","text":"<ol> <li>Create a new GitHub repository using this template (<code>Use this template</code> button).</li> <li>Name your repo (use underscores <code>_</code> instead of hyphens <code>-</code>).</li> <li>Add a project description (required!).</li> <li>Wait for the setup commit (done by <code>github-actions[bot]</code>, may take a few minutes).</li> </ol> <p>Once complete, clone the repository and run <code>pdm setup</code> to install dependencies and set up the project.</p>"},{"location":"template/quickstart/installation/#effects","title":"Effects","text":"<p>The following features (and more) will be enabled:</p> <ul> <li>Ready-to-use state of the art project structure</li> <li>Set of <code>20+</code> labels (see here\u00a0\u29c9),     many of which are automatically applied to pull requests</li> <li>Predefined templates for issues, pull requests and discussions</li> <li>Initial dependency-specific caching enabled in GitHub Actions</li> </ul>"},{"location":"template/quickstart/installation/#hardening","title":"Hardening","text":"<p>After the setup, an issue will be created (named <code>Update repository settings</code>) outlining security hardening steps.</p> <p>Caution</p> <p>Following these steps is strongly recommended for better security.</p>"},{"location":"template/quickstart/installation/#hardening-steps","title":"Hardening steps","text":"<p>Tip</p> <p>These steps will be further detailed in the aforementioned issue.</p> <ul> <li>Enable third-party bots (if applicable).</li> <li>Create a short-lived, minimally scoped <code>TEMPLATE_GITHUB_TOKEN</code>.</li> <li>Run the hardening workflow.</li> <li>Set up trusted PyPI publishing\u00a0\u29c9.</li> </ul> <p>Note</p> <p>Full automation is not currently possible due to platform limitations.</p>"},{"location":"template/quickstart/installation/#benefits","title":"Benefits","text":"<ul> <li>Improved security following     Open Source Security Foundation's Scorecard best practices\u00a0\u29c9.</li> <li>Enabled GitHub Pages for documentation hosting.</li> <li>Applied GitHub rulesets\u00a0\u29c9     (including branch protection rules\u00a0\u29c9).</li> <li>Configured pull request defaults and other repository settings.</li> <li>Activated GitHub security features (e.g., private vulnerability reporting\u00a0\u29c9).</li> </ul> <p>Warning</p> <p>Exact features depend on repository type, but in general: <code>public</code> &gt; <code>enterprise</code> &gt; <code>private</code>.</p>"},{"location":"template/quickstart/installation/#updates","title":"Updates","text":"<p>Caution</p> <p>This feature is not yet implemented.</p> <p>Your repository will be automatically updated with the latest <code>opentemplate</code> version every weekend.</p>"},{"location":"template/quickstart/installation/#code-sources","title":"Code sources","text":"<ul> <li><code>/.github/workflows/template_setup.yml</code></li> <li><code>/.github/workflows/template_update.yml</code></li> <li><code>/.github/workflows/harden.yml</code></li> <li><code>/.github/rulesets</code></li> </ul>"},{"location":"template/quickstart/usage/","title":"Usage","text":""},{"location":"template/quickstart/usage/#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>Follow the installation instructions before proceeding.</p>"},{"location":"template/quickstart/usage/#overview","title":"Overview","text":"<ol> <li>Create an issue for the task.</li> <li>Create a new branch (<code>&lt;issue-number&gt;</code> or similar).</li> <li>(Optional) Add dependencies to <code>pyproject.toml</code>.</li> <li>Write code in <code>/src/&lt;project_name&gt;</code> and tests in <code>/tests</code>.</li> <li>Use <code>git add</code>, <code>git commit</code> (following semver\u00a0\u29c9),     and <code>git push</code>.</li> <li><code>pre-commit</code> will guide you through the process.</li> <li>Create a pull request (following semver\u00a0\u29c9).</li> <li>Wait for CI checks and code review approval.</li> </ol> <p>Tip</p> <p>See CONTRIBUTING.md for details.</p>"},{"location":"template/quickstart/usage/#git-workflow","title":"Git workflow","text":"<p><code>opentemplate</code> follows an extended GitHub Flow\u00a0\u29c9:</p> <ol> <li>Create or pick up an issue (task tracker).</li> <li>Create a branch (<code>&lt;issue-number&gt;</code> or similar) to track changes.</li> <li>Push your changes to the remote repository.</li> <li>Open a pull request (PR title should follow semver\u00a0\u29c9,     e.g., <code>feat: add feature</code>, <code>fix: bugfix</code>).</li> </ol> <p>The <code>main</code> branch is protected and should always be in a releasable state.</p> <p>Note</p> <p>If a PR has a few commits, its type should match the most significant one (<code>feat!</code> &gt; <code>fix!</code> &gt; <code>feat</code> &gt; <code>fix</code>).</p> <p>Tip</p> <p>The <code>GitHub CLI</code>\u00a0\u29c9 simplifies this process. A future extension will streamline it further.</p>"},{"location":"template/quickstart/usage/#programming","title":"Programming","text":""},{"location":"template/quickstart/usage/#source-code","title":"Source code","text":"<p>Place project source code in <code>src/&lt;project_name&gt;</code> or at least <code>src</code> (e.g., <code>src/infrastructure</code>). Some exceptions apply (e.g., <code>Dockerfile</code>, <code>Makefile</code>).</p> <p>Note</p> <p>Before every commit and push <code>pre-commit</code> will run checks ensuring code quality and style.</p>"},{"location":"template/quickstart/usage/#tests","title":"Tests","text":"<p>Tests should be in <code>/tests</code>. The default framework is <code>pytest</code>, but you can change it in <code>dev-test</code> section inside <code>pyproject.toml</code>.</p> <p>Key considerations:</p> <ul> <li><code>100%</code> test coverage is the default (recommended).</li> <li>Fuzzing is encouraged (OSSF Scorecard\u00a0\u29c9);     <code>hypothesis</code>\u00a0\u29c9 is included     by default.</li> </ul> <p>Note</p> <p><code>opentemplate</code> does not enforce a specific testing methodology (e.g., TDD, BDD).</p>"},{"location":"template/quickstart/usage/#commits","title":"Commits","text":"<p><code>opentemplate</code> follows simplified semver\u00a0\u29c9:</p> <ul> <li>Allowed types: <code>fix</code>, <code>feat</code>, <code>BREAKING CHANGE</code>.</li> <li>No scopes (e.g., <code>feat(actions): ...</code> is incorrect).</li> </ul> <p>Commits should be:</p> <ul> <li><code>Signed-off</code> (agreeing to the Developer Certificate of Origin\u00a0\u29c9).</li> <li>Signed via GPG, SSH, S/MIME, or <code>gitsign</code>\u00a0\u29c9     (learn more\u00a0\u29c9).</li> </ul>"},{"location":"template/quickstart/usage/#pull-requests","title":"Pull requests","text":"<p>Pull request type is determined by the most significant type of commit:</p> <ul> <li><code>BREAKING CHANGE</code> &gt; <code>feat</code> &gt; <code>fix</code>.</li> <li>Pull requests will be labeled automatically with scopes (additional labels     may be added manually).</li> </ul> <p>Warning</p> <p>Predefined labels exist; avoid creating new ones unless necessary.</p> <p>Each pull request undergoes CI testing (similar to local tests). Depending on repository type and security settings, up to two reviewers may be required (as defined during installation).</p>"},{"location":"template/quickstart/usage/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/pr-labeler.yml</code></li> <li><code>/.github/workflows/template_setup.yml</code></li> <li><code>.github/workflows/python-tests.yml</code></li> </ul>"},{"location":"template/release-your-project/","title":"Release your project","text":"<p>This section explains how to release a project based on <code>opentemplate</code>.</p> <p>Release when:</p> <ul> <li>You are ready to share the project (publicly or privately).</li> <li>Pipelines and <code>pre-commit</code> checks have passed (tests, security, etc.).</li> </ul> <p>Caution</p> <p>Create a GitHub tag on a release page; everything else is automated.</p> <p>Start here:</p> <ul> <li>Checklist \u2013 steps to complete before release</li> <li>Process \u2013 how the release works</li> </ul>"},{"location":"template/release-your-project/checklist/","title":"Release checklist","text":"<p>Note</p> <p>While automation handles most of the release process, some project-specific details require manual updates.</p>"},{"location":"template/release-your-project/checklist/#readme","title":"README","text":"<ol> <li> <p>Update <code>Features</code> section with ~5 key points.</p> </li> <li> <p>Keep <code>Usage</code> clear and concise.</p> </li> <li> <p>Add <code>__Examples__</code>:</p> <ol> <li> <p>Basic usage</p> </li> <li> <p>Common task</p> </li> <li> <p>Advanced/expert-level usage</p> </li> </ol> </li> </ol> <p>Caution</p> <p>Review README after changes to ensure coherence.</p>"},{"location":"template/release-your-project/checklist/#pyprojecttoml","title":"pyproject.toml","text":"<p>Caution</p> <p>Do not edit sections starting with <code>DO NOT EDIT UNTIL end marker</code> and ending with <code>[[[end]]]</code>.</p> <ul> <li><code>[project.classifiers]</code> \u2013 Add relevant     PyPI classifiers\u00a0\u29c9.</li> <li><code>[project.dependencies]</code> and <code>[project.optional-dependencies]</code> \u2013 Double-check     correctness.</li> </ul> <p>Tip</p> <p>For public projects after the first release, remove <code>exclude_links</code> in <code>[tool.md_dead_link_check]</code> to validate all links.</p>"},{"location":"template/release-your-project/checklist/#documentation","title":"Documentation","text":"<p>Caution</p> <p>Adjust <code>/docs</code> structure and content as needed.</p> <p>You should consult the documentation guide for more details.</p> <p>Note</p> <p>Content in folders like <code>/docs/tutorials</code> is auto-included via <code>mkdocs-awesome-pages</code>\u00a0\u29c9 if any content is present there.</p> <p>Caution</p> <p>Manually validate <code>mkdocs.yml</code> and generated docs.</p>"},{"location":"template/release-your-project/checklist/#security","title":"Security","text":"<ul> <li>Verify and update <code>CODEOWNERS</code>     (docs\u00a0\u29c9).</li> <li>Complete <code>TBD</code> sections in <code>SECURITY-SELF-ASSESSMENT.md</code>     (CNCF guide\u00a0\u29c9).</li> <li>Optional: Add more contact details to <code>SECURITY.md</code>.</li> </ul>"},{"location":"template/release-your-project/checklist/#documents","title":"Documents","text":"<ul> <li>Ensure <code>ROADMAP.md</code> outlines plans for the next release (if applicable).</li> <li>Optional: Add more governance details to <code>GOVERNANCE.md</code>.</li> </ul>"},{"location":"template/release-your-project/process/","title":"Release process","text":"<p>To release a new version, create a GitHub release\u00a0\u29c9. This triggers all necessary pipelines.</p> <p>Note</p> <p>Specify a new tag version and (optionally) release title. Changelog will be automatically updated by the pipelines.</p> <p>Caution</p> <p>You must create GitHub release manually. Merging to <code>main</code> does not trigger package or documentation releases.</p>"},{"location":"template/release-your-project/process/#versioning","title":"Versioning","text":"<p>This project uses a double versioning scheme based on Semantic Versioning\u00a0\u29c9:</p> <ul> <li>Public version \u2013 The official release version (e.g., <code>1.2.0</code>).</li> <li>Python version \u2013 Automatically generated from commits     and independent of the public version.</li> </ul>"},{"location":"template/release-your-project/process/#rationale","title":"Rationale","text":"<p>Public versions are there to signify the release to the audience (mainly for marketing purposes), while the Python version ensures semantic consistency (needed by package users). This approach also enhances security by preventing automated <code>tag</code> pushes to <code>main</code> (no <code>bot</code> automerges).</p>"},{"location":"template/release-your-project/process/#public-version","title":"Public version","text":"<p>Public releases follow Semantic Versioning\u00a0\u29c9 and trigger:</p> <ul> <li>Package release to <code>PyPI</code> (for public repositories, versioned by Python version).</li> <li>Documentation updates.</li> <li>Artifact generation (e.g., Software Bill of Materials\u00a0\u29c9).</li> </ul>"},{"location":"template/release-your-project/process/#python-version","title":"Python version","text":"<p>Managed automatically based on commit messages:</p> <ul> <li><code>fix</code> \u2192 Patch version update</li> <li><code>feat</code> \u2192 Minor version update</li> <li><code>BREAKING</code> (or <code>feat!</code>/<code>fix!</code>) \u2192 Major version update</li> </ul> <p>Tip</p> <p>Check out commition\u00a0\u29c9 for details about Python version calculations.</p>"},{"location":"template/release-your-project/process/#artifacts","title":"Artifacts","text":"<p>Releases include the following artifacts:</p> <ul> <li> <p>Python package (packaging guide\u00a0\u29c9)</p> </li> <li> <p><code>CHANGELOG.md</code> (full changelog)</p> </li> <li> <p><code>LICENSE.md</code> (project license)</p> </li> <li> <p>Documentation (uploaded to <code>gh-pages</code>)</p> </li> <li> <p>OSV-Scanner SARIF\u00a0\u29c9</p> </li> <li> <p>Software Bills of Materials (SBOMs) (CISA guide\u00a0\u29c9):</p> <ol> <li> <p>Python package (via CycloneDX\u00a0\u29c9)</p> </li> <li> <p>Python dependencies (via CycloneDX\u00a0\u29c9)</p> </li> <li> <p>GitHub SBOM (docs\u00a0\u29c9)</p> </li> <li> <p>REUSE SBOM (docs\u00a0\u29c9)</p> </li> </ol> </li> <li> <p>SBOM attestations (actions/attest-sbom\u00a0\u29c9)</p> </li> <li> <p>Python package attestations (PyPI guide\u00a0\u29c9)</p> </li> <li> <p>SLSA Build Provenance (SLSA spec\u00a0\u29c9)</p> </li> </ul> <p>Important</p> <p>Some artifacts depend on repository visibility, the more public the repository, the more artifacts are produced.</p> <p>Note</p> <p>Attestations of Python package SBOMs use hashes of <code>RECORD</code> files as inputs, see here\u00a0\u29c9 for more information about them.</p>"},{"location":"template/release-your-project/process/#repository-visibility-and-compliance","title":"Repository visibility and compliance","text":"Visibility Artifacts produced Compliance level Public All artifacts SLSA Level 3\u00a0\u29c9 Enterprise No provenance, private attestations SLSA Level 3\u00a0\u29c9 Private No attestations, limited artifacts SLSA Level 2\u00a0\u29c9"},{"location":"template/release-your-project/process/#changelog","title":"Changelog","text":"<p>Generated via git-cliff\u00a0\u29c9 (configured in <code>pyproject.toml</code>) and:</p> <ul> <li>The latest version's changelog becomes the release description.</li> <li>Full <code>CHANGELOG.md</code> attached to the release</li> <li><code>CHANGELOG.md</code> inside the repository links to GitHub releases</li> </ul> <p>The changelog includes:</p> <ul> <li>Public version, date, and comparison link</li> <li>Commit statistics (e.g., how many commits done by human vs bots,     types of commit like security, tests, legal etc.)</li> <li>Python changes (Breaking, Features, Fixes, Bots)</li> <li>Other changes (same structure as Python changes)</li> <li>Each commit includes message, author, and metadata (if available)</li> </ul> <p>Tip</p> <p>Read more about changelogs in the FAQ</p>"},{"location":"template/release-your-project/process/#customization","title":"Customization","text":"<p>This process can be adjusted by editing:</p> <ul> <li> <p><code>.github/workflows/release.yml</code></p> </li> <li> <p><code>pyproject.toml</code>:</p> <ol> <li> <p><code>[tool.git-cliff]</code> \u2013 Changelog settings</p> </li> <li> <p><code>[dependency-groups]</code> \u2192 <code>dev-security</code> \u2013 changing SBOM dependencies</p> </li> </ol> </li> </ul> <p>Important</p> <p>Due to pipeline complexity, fine-tuning is more challenging, consult the source files if necessary.</p>"},{"location":"template/release-your-project/process/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/release.yml</code></li> <li><code>.github/workflows/release-upload.yml</code></li> <li><code>.github/workflows/release-sarifs-reusable.yml</code></li> <li><code>.github/workflows/release-sbom-attest-reusable.yml</code></li> <li><code>.github/workflows/release-sbom-run-reusable.yml</code></li> <li><code>.github/workflows/release-sboms-reusable.yml</code></li> <li><code>.github/workflows/release-slsa-provenance-reusable.yml</code></li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Important</p> <p><code>lintkit</code> is a Python framework to quickly create custom linters, while flexible enough for complex checks.</p> <p>It is advised to follow (or skim) all the tutorials in this section in the following order:</p> <ul> <li>Basic tutorial showcasing <code>lintkit</code> capabilities</li> <li>Configuring linter via     <code>loadfig</code>\u00a0\u29c9     (or other tool); continuation of basic tutorial</li> <li>Advanced linter for Python code</li> <li>File linters; continuation of advanced tutorial</li> </ul> <p>Afterwards you might want to check API Reference. You might also be interested in <code>nudger</code>\u00a0\u29c9, which is an <code>opennudge</code>\u00a0\u29c9 concrete linter utilising <code>lintkit</code>.</p>"},{"location":"tutorials/advanced/","title":"Advanced linter","text":"<p>In this tutorial you will learn how to work with <code>lintkit</code>'s ast (abstract syntax tree)\u00a0\u29c9 in Python.</p> <p>Tip</p> <p>If you are unsure what <code>ast</code> is please read <code>ast</code>\u00a0\u29c9 documentation or other guides/tutorials.</p> <p>Afterwards you will be able to:</p> <ul> <li>create linters targeting subparts of the Python files     (e.g. <code>class</code>, <code>def</code> or conditionals)</li> <li>how to share the <code>ast</code> across multiple rules</li> <li>how to use the provided <code>lintkit.check</code> module     to your advantage</li> </ul> <p>Note</p> <p>You will largely focus on creating rules in this tutorial. If you wish to see an end-to-end example, check out basic tutorial and configuration</p> <p>While the tutorial is titled \"advanced\" you should know most of the building blocks by now.</p> <p>We will build a linter which verifies, that no <code>class</code> or <code>function</code> name contains words like <code>util(s)</code> or <code>helper(s)</code>.</p>"},{"location":"tutorials/advanced/#defining-checks","title":"Defining checks","text":"<p>Caution</p> <p>In order to share the functionality we will heavily use (multiple) inheritance and mixins\u00a0\u29c9.</p> <p>Let's start with <code>check</code>ers definitions:</p> <pre><code>import lintkit\n\n\n# abstract because we will have to define `regex` method\nclass _NoWord(lintkit.check.Regex):\n    \"\"\"Shared regex_flags function.\"\"\"\n\n    def regex_flags(self) -&gt; int:\n        \"\"\"Lower or uppercase works.\"\"\"\n        return re.IGNORECASE\n\n\nclass _NoUtils(_NoWord):\n    \"\"\"Match utilities and its variations.\"\"\"\n\n    def regex(self) -&gt; str:\n        # Also _utils etc.\n        return r\"_?util(s|ities)?\"\n\n\nclass _NoHelpers(_NoWord):\n    \"\"\"Match helpers and its variations.\"\"\"\n\n    def regex(self) -&gt; str:\n        return r\"_?help(ers?)?\"\n</code></pre> <p>This constitutes the what while utilizing <code>lintkit.check.Regex</code> which, given a <code>str</code> applies regex search (<code>re.search</code>\u00a0\u29c9) to be precise)</p>"},{"location":"tutorials/advanced/#obtaining-values","title":"Obtaining values","text":"<p>Now it is time to define how we can obtain <code>ast</code> elements like <code>class</code>es or <code>function</code>s.</p> <p>Note</p> <p>Basic knowledge of <code>ast</code>\u00a0\u29c9 module will come handy, as we will targets specific nodes types.</p> <p>We will be using the following <code>ast</code> types:</p> <ul> <li><code>ast.ClassDef</code>\u00a0\u29c9     for <code>class</code> definitions</li> <li><code>ast.FunctionDef</code>\u00a0\u29c9     for <code>function</code> definitions</li> </ul> <p>Fortunately, loading and processing of <code>Python</code> syntax is already performed by the <code>ast</code>\u00a0\u29c9 and <code>lintkit.loader.Python</code>, see below:</p> <pre><code>import abc\nimport ast\n\nfrom collections.abc import Iterable\n\nclass _Definition(lintkit.rule.Node, lintkit.loader.Python, abc.ABC):\n    @abc.abstractmethod\n    def ast_class(self) -&gt; type[ast.ClassDef | ast.FunctionDef]:\n        # Type of class we are after in concrete definitions.\n        # See _ClassDefinition and _FunctionDefinition below\n        raise NotImplementedError\n\n    def values(self) -&gt; Iterable[lintkit.Value[str]]:\n        # Yield node (class or function) names from a Python file\n        data: dict[type[ast.AST], ast.AST] = self.getitem(\"nodes_map\")\n        for node in data[self.ast_class()]:\n            yield lintkit.Value.from_python(node.name, node)\n\n\nclass _ClassDefinition(_Definition):\n    def ast_class(self) -&gt; type[ast.ClassDef]:\n        return ast.ClassDef\n\nclass _FunctionDefinition(_Definition):\n    def ast_class(self) -&gt; type[ast.FunctionDef]:\n        return ast.FunctionDef\n</code></pre> <p>Please note the following:</p> <ul> <li><code>lintkit.loader.Python</code> defines a few useful attributes     (variations of <code>ast</code>) which allows linter creators creating     Python rules easier. <code>nodes_map</code> is a <code>dict</code> mapping <code>ast</code> types     to its instances (e.g. class definition to class definition instances).</li> <li><code>self.getitem</code> is a method you should     use to get the data from any <code>lintkit.loader.Loader</code> subclass.     This method works just like Python's <code>__getitem__</code>, but utilizes     caching across multiple rules (files are loaded and parsed only once).</li> <li><code>lintkit.Value.from_python</code> allows us to keep any value     while keeping the necessary metadata about the node.</li> <li>We are <code>yield</code>ing multiple <code>Value</code>s. These are all     <code>ast.ClassDef</code>s\u00a0\u29c9     or     <code>ast.FunctionDef</code>s\u00a0\u29c9</li> </ul> <p>Note</p> <p><code>lintkit.loader.Python</code> is not optimal memory or compute-wise. If you find it a bottleneck, you might consider creating a custom <code>loader</code></p>"},{"location":"tutorials/advanced/#mixing-it-together","title":"Mixing it together","text":"<p>Once the above have been defined we can mix these elements to create multiple rules:</p> <pre><code>class ClassNoHelpers(_NoHelpers, _ClassDefinitions, code=1):\n    \"\"\"Verify `class` name contains no `helper` word (or its variations).\"\"\"\n\n    def message(self, value: lintkit.Value[str]) -&gt; str:\n        return f\"Class {value} contains helper(s) names.\"\n\nclass ClassNoUtils(_NoUtils, _ClassDefinitions, code=2):\n    \"\"\"Verify `class` name contains no `utils` word (or its variations).\"\"\"\n\n    def message(self, value: lintkit.Value[str]) -&gt; str:\n        return f\"Class {value} contains utils(s) names.\"\n\nclass FunctionNoHelpers(_NoHelpers, _FunctionDefinitions, code=3):\n    \"\"\"Verify `function` name contains no `helper` word (or its variations).\"\"\"\n\n    def message(self, value: lintkit.Value[str]) -&gt; str:\n        return f\"Function {value} contains helper(s) names.\"\n\nclass FunctionNoUtils(_NoUtils, _FunctionDefinitions, code=4):\n    \"\"\"Verify `function` name contains no `utils` word (or its variations).\"\"\"\n\n    def message(self, value: lintkit.Value[str]) -&gt; str:\n        return f\"Function {value} contains util(s) names.\"\n</code></pre> <p>Important</p> <p>Order of inheritance matters. It should go as follows: <code>lintkit.check.Check</code>, <code>lintkit.loader.Loader</code> and <code>lintkit.rule.Rule</code> (or their respective subclasses)</p> <p>Tip</p> <p>You could further refactor the above rules to reuse <code>message</code> method. Left as is to be more approachable.</p> <p>After mixing we can run these rules on some Python files, an example runner could be:</p> <pre><code>import pathlib\nimport sys\n\nimport lintkit\n\n# Assuming this is where the rules were defined\nimport rules\n\n# Defining linter name here is also fine\nlintkit.settings.name: str = \"MY-ADVANCED-LINTER\"\n\nif __name__ == \"__main__\":\n    sys.exit(lintkit.run(*list(pathlib.Path(\".\").rglob(\"*.py\"))))\n</code></pre>"},{"location":"tutorials/advanced/#next-steps","title":"Next steps","text":"<p>Check one of the following tutorials to learn more about what you can do with <code>lintkit</code>:</p> <ul> <li>Basic tutorial showcasing <code>lintkit</code> capabilities</li> <li>Configuring linter via     <code>loadfig</code>\u00a0\u29c9     (or other tool)</li> <li>File rules (extension of this tutorial)</li> </ul>"},{"location":"tutorials/basic/","title":"Basic linter","text":"<p>In this introductory tutorial you will learn how to:</p> <ul> <li>create a basic linter using <code>lintkit</code></li> <li>create a few basic rules verifying     <code>pyproject.toml</code>\u00a0\u29c9</li> </ul>"},{"location":"tutorials/basic/#your-first-rule","title":"Your first rule","text":"<p>Firstly create a file called <code>rules.py</code> with the following content:</p> <pre><code>import typing\n\nimport lintkit\n\nif typing.TYPE_CHECKING:\n    from collections.abc import Iterable\n\n# Define the name for our linter\nlintkit.settings.name = \"MYLINTER\"\n\nclass NameDefined(lintkit.loader.TOML, lintkit.rule.Node, code=1):\n    \"\"\"Checks if `name` property is defined in `pyproject.toml`\"\"\"\n\n    # Should always return `Value` or `None`\n    def values(self) -&gt; Iterable[lintkit.Value[str | None]]:\n        \"\"\"Yield `project.name` from `pyproject.toml`.\n\n        Note:\n            It might not be available, hence we are checking\n            for `None` values.\n\n        \"\"\"\n        # Appropriate `TOML` data will be loaded later\n        data = self.getitem(\"data\")\n\n        # Unpack and yield safely project.name field\n        project = data.get(\"project\")\n        if project is None:\n            yield lintkit.Value()\n        else:\n            name = project.get(\"name\")\n            if name is None:\n                yield lintkit.Value()\n            else:\n                yield lintkit.Value.from_toml(name)\n\n    def message(self, _: lintkit.Value[str | None]) -&gt; str:\n        # No need to use `lintkit.Value` here\n        return \"Field 'project.name' was not defined\"\n\n    def check(self, value: lintkit.Value[str | None]) -&gt; bool:\n        return value is not None\n</code></pre> <p>Please note the following elements:</p> <ul> <li><code>lintkit.settings.name</code> attribute specifies the name our     linter will have (used when outputting errors or defining     in-code ignores).</li> <li><code>lintkit.loader.TOML</code> will load <code>toml</code> file and     save it as a state under <code>data</code></li> <li>Access to <code>loader</code> created attributes should always be performed by     <code>lintkit.loader.Loader.getitem</code></li> <li><code>lintkit.rule.Node</code> specifies we are interested in <code>node</code>/content     of the data (as opposed to the raw contents of the file or     all <code>TOML</code> files). Check out File linters for more information.</li> <li><code>code=1</code> specifies numeric value associated with this rule.     It will later be displayed as a concatenation of     <code>lintkit.settings.name</code> and <code>code</code>, in our case     <code>\"MYLINTER1\"</code>. Many linters have their own codes (or group of codes),     for example <code>ruff</code>\u00a0\u29c9.</li> <li>One has to define     <code>values</code> (yielding values to check),     <code>message</code> (message to display in case     of rule violation), and <code>check</code>     (what does it mean to check the <code>value</code>, actual rule)</li> <li><code>lintkit.Value</code> is a transparent proxy object as     defined by <code>wrapt</code>\u00a0\u29c9     (<code>lintkit.Value[str]</code> should be treated as plain <code>str</code>).     This transparent proxy carries important information     (like comment associated with the line) which is used by     <code>lintkit</code> pipelines</li> </ul> <p>Note</p> <p>Why <code>values</code> method yields? Linter creators can return multiple values, which, in turn, will be <code>check</code>ed one by one. Check out Advanced tutorial for an example.</p> <p>This rule will enable us to verify whether <code>pyproject.toml</code> contains necessary <code>[project]</code> section with field <code>name</code>, so this file would not raise an error:</p> <pre><code>[project]\n\nname = \"my super linter\"\n</code></pre> <p>while this one would:</p> <pre><code>[project]\n\nnnname = \"typos happen :(\"\n</code></pre>"},{"location":"tutorials/basic/#making-the-rules-reusable","title":"Making the rules reusable","text":"<p>You may have noticed, that the following would also pass the linter check:</p> <pre><code>[project]\n\nname = 213\n</code></pre> <p>while the <code>name</code> field in Python's <code>pyproject.toml</code> can only be <code>string</code>. We could try to add appropriate verification like so:</p> <pre><code>...\n\ndef check(self, value: lintkit.Value[str | None]) -&gt; bool:\n    return value is not None and isinstance(value, str)\n</code></pre> <p>but that would have its own downsides:</p> <ul> <li>we are verifying two things in one rule</li> <li>it is not extensible (what if we want to check something else)?</li> </ul> <p>Tip</p> <p>As a rule of thumb, try to make your linters follow \"one check, one rule\" formula.</p> <p>Instead, <code>lintkit</code> provides a way to reuse <code>rule</code> elements via inheritance (change original contents of the file to these):</p> <pre><code>import typing\n\nimport lintkit\n\nif typing.TYPE_CHECKING:\n    from collections.abc import Iterable\n\n# Define the name for our linter\nlintkit.settings.name = \"MYLINTER\"\n\nclass PyProjectNameLoader(lintkit.loader.TOML, lintkit.rule.Node):\n    \"\"\"Safely loads `project.name` property of `pyproject.toml.\"\"\"\n\n    def values(self) -&gt; Iterable[lintkit.Value[str] | None]:\n        \"\"\"Yield `project.name` from `pyproject.toml`.\n\n        Note:\n            It might not be available, hence we are checking\n            for `None` values.\n\n        \"\"\"\n        # Appropriate `TOML` data will be loaded earlier\n        data = self.getitem(\"data\")\n\n        # Unpack and yield safely project.name field\n        project = data.get(\"project\")\n        if project is None:\n            yield None\n        else:\n            name = project.get(\"name\")\n            if name is None:\n                yield None\n            else:\n                yield lintkit.Value.from_toml(name)\n\n# Concrete definitions of the rules\n\nclass NameExists(PyProjectNameLoader, code=1):\n    \"\"\"Checks if `name` property is defined in `pyproject.toml`\"\"\"\n\n    def check(self, value: lintkit.Value[str | None]) -&gt; bool:\n        return value is not None\n\n    def message(self, _: lintkit.Value[str | None]) -&gt; str:\n        return \"Field 'project.name' was not defined\"\n\nclass NameIsString(PyProjectNameLoader, code=2):\n    \"\"\"Checks if `name` property is of type `str`.\"\"\"\n\n    def check(self, value: lintkit.Value[str | None]) -&gt; bool:\n        return isinstance(value, str)\n\n    def message(self, value: lintkit.Value[str | None]) -&gt; str:\n        return f\"Field 'project.name' is not a string (got {type(value)}\"\n\nclass NameNoWhitespaces(PyProjectNameLoader, code=3):\n    \"\"\"Checks if `name` is below has no spaces.\"\"\"\n\n    def check(self, value: lintkit.Value[str | None]) -&gt; bool:\n        return isinstance(value, str) and not any(c.isspace() for c in s)\n\n    def message(self, _: lintkit.Value[str | None]) -&gt; str:\n        return \"Field 'project.name' contains whitespaces\"\n\n# Let's add one simple rule for fun\nclass NameIsShort(PyProjectNameLoader, code=4):\n    \"\"\"Checks if `name` is below `10` characters.\"\"\"\n\n    def check(self, value: lintkit.Value[str | None]) -&gt; bool:\n        return isinstance(value, str) and len(value) &lt; 10\n\n    def message(self, v: lintkit.Value[str | None]) -&gt; str:\n        return f\"Field 'project.name' is too long ({len(v)} &gt; 10 chars)\"\n</code></pre> <p>Important</p> <p><code>rule</code> is defined when you pass its <code>code</code>. Before all subclasses are considered a reusable elements by [<code>lintkit</code>][] (in our case <code>PyProjectNameLoader</code>).</p>"},{"location":"tutorials/basic/#running-the-linter","title":"Running the linter","text":"<p>First, let's define an example <code>pyproject.toml</code> we would like to lint:</p> <pre><code>[project]\n\nname = \"That is a long incorrect project name\"\n</code></pre> <p>Now you can run <code>linter</code> on <code>pyproject.toml</code> (assuming all files are in the same <code>folder</code>), create a file called <code>run.py</code>:</p> <pre><code>import sys\n\nimport lintkit\n\nimport rules\n\nif __name__ == \"__main__\":\n    sys.exit(lintkit.run(\"pyproject.toml\"))\n</code></pre> <p>Tip</p> <p>You can use <code>sys.exit</code> directly with the return code of <code>lintkit.run</code> as it will return <code>True</code> if any rule fails.</p> <p>Run it:</p> <pre><code>&gt; python run.py\n</code></pre> <p>And you should see the following output (exact file path might differ):</p> <pre><code>/pyproject.toml:-:- MYLINTER3: Field 'project.name' contains whitespaces\n/pyproject.toml:-:- MYLINTER4: Field 'project.name' is too long (38 &gt; 10 chars )\n</code></pre> <p>Note</p> <p>Currently <code>TOML</code> does not support line and column numbers (that's why <code>-</code>) unlike <code>YAML</code> and <code>Python</code>. Check out <code>lintkit.loader</code> if you want to find out more.</p>"},{"location":"tutorials/basic/#next-steps","title":"Next steps","text":"<p>Check one of the following tutorials to learn more about what you can do with <code>lintkit</code>:</p> <ul> <li>Configuring linter via     <code>loadfig</code>\u00a0\u29c9     (or other tool); continuation of this tutorial</li> <li>Advanced linter for Python code</li> <li>File linters</li> </ul>"},{"location":"tutorials/configure/","title":"Configure linter","text":"<p>This tutorial walks you through the steps to configure your linter. We will start from the code in the previous tutorial.</p> <p>Warning</p> <p>Gather code from the first Basic linter tutorial to follow along.</p>"},{"location":"tutorials/configure/#update-rule-to-use-config","title":"Update rule to use config","text":"<p>One of the rules in previous tutorial has a magic number which you might want to have customizable (e.g. by providing linter configuration via <code>pyproject.toml</code> like <code>ruff</code>\u00a0\u29c9).</p> <p>Let's do this by adjusting <code>NameIsShort</code> rule first (leave rest of the file as is):</p> <pre><code>... # rest of the file\n\n# Let's add one simple rule for fun\nclass NameIsShort(PyProjectNameLoader, code=4):\n    \"\"\"Checks if `name` is below `N` characters.\"\"\"\n    def __init__(self):\n        # Always call base constructor\n        super().__init__()\n\n        self.max_name_length = 10\n\n    def check(self, value: lintkit.Value[str | None]) -&gt; bool:\n        # Change 10 to attribute\n        return isinstance(value, str) and len(value) &lt; self.max_name_length\n\n    def message(self, v: lintkit.Value | None) -&gt; str:\n        return (\n            f\"Field 'project.name' is too long ({len(v)} &gt; {name_length} chars)\"\n        )\n</code></pre> <p>Read on to see how to inject <code>max_name_length</code> attribute without passing values to <code>__init__</code></p> <p>Tip</p> <p><code>lintkit.rule.Rule</code> is instantiated by <code>lintkit.run</code> call and no arguments are passed.</p>"},{"location":"tutorials/configure/#update-config","title":"Update config","text":"<p>You will continue with previously define <code>pyproject.toml</code>, add the following section to our linter:</p> <pre><code>[tool.mylinter]\n\ninclude_codes = [2, 3, 4]\nexclude_codes = [1, 2, 3]\n\nmax_name_lenth = 5\n</code></pre>"},{"location":"tutorials/configure/#load-and-inject-config","title":"Load and inject config","text":"<p>To load config of linter from <code>pyproject.toml</code> one can use <code>loadfig</code>\u00a0\u29c9 project which is no dependency library loading tool section from <code>pyproject.toml</code>.</p> <p>You can install it with pip (or use your package manager like <code>uv</code>\u00a0\u29c9):</p> <pre><code>&gt; pip install loadfig\n</code></pre> <p>Tip</p> <p>You can use any other config loading tool or write one yourself.</p> <p>Now edit <code>run.py</code>:</p> <pre><code>import sys\n\nimport loadfig\nimport lintkit\n\nimport rules\n\ndef main() -&gt; None:\n    # Simply specify name of the tool\n    config: dict = loadfig.config(\"mylinter\")\n\n    # Add `max_name_length` attribute to all rules\n    # Has to be run after `rules` are imported!\n    lintkit.registry.inject(\n        \"max_name_length\",\n        # None if the value was not defined\n        config.get(\"max_name_length\", None),\n    )\n\n    # Run the linter with code inclusions and exclusions\n    exit_code = lintkit.run(\n        \"pyproject.toml\",\n        include_rules=config.get(\"include_rules\", None),\n        exclude_rules=config.get(\"exclude_rules\", None),\n    )\n\n    sys.exit(exit_code)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Things you should note:</p> <ul> <li><code>lintkit.registry.inject</code> allows you to register variables     (or whole configs) so they are available to all rules</li> <li><code>lintkit.run</code> gives you more flexibility (e.g.     including or excluding code parts).</li> </ul> <p>Note</p> <p>Exclusions take precedence over inclusions. In our case, the only included rule will be effectively <code>4</code>.</p> <p>Tip</p> <p>You can use any other config loading tool or load the config directly using standard <code>tomllib</code> library\u00a0\u29c9</p>"},{"location":"tutorials/configure/#run","title":"Run","text":"<p>You can run the <code>run.py</code> file once again, this time the output should be as follows:</p> <pre><code>/pyproject.toml:-:- MYLINTER4: Field 'project.name' is too long (38 &gt; 5 chars)\n</code></pre>"},{"location":"tutorials/configure/#next-steps","title":"Next steps","text":"<p>Check one of the following tutorials to learn more about what you can do with <code>lintkit</code>:</p> <ul> <li>Previous basic tutorial showcasing <code>lintkit</code> capabilities</li> <li>Advanced linter for Python code</li> <li>File linters</li> </ul>"},{"location":"tutorials/file/","title":"File rules","text":"<p>Up until now our rules worked on <code>Node</code>s - subelements (like Python's class definition or a variable in <code>TOML</code> file) of the file.</p> <p><code>lintkit</code> allows you to also define rules working on filenames, which might come handy in some situations.</p> <p>In this tutorial, we will:</p> <ul> <li>Extend Advanced tutorial to also     verify our Python files do not contain <code>helper</code>/<code>utils</code>.</li> <li>Define a rule running on all elements of a file to verify     we are not using too many <code>if</code>s.</li> <li>Define a rule running on all files to verify all Python <code>class</code>     names are unique.</li> </ul>"},{"location":"tutorials/file/#rule-on-filename","title":"Rule on filename","text":"<p>Caution</p> <p>Make sure you have followed the Advanced tutorial tutorial before proceeding with this one!</p> <p>In order to work with <code>pathlib.Path</code>\u00a0\u29c9 objects representing files we can use <code>lintkit.loader.File</code></p> <pre><code>import lintkit\n\n\nclass _PythonFile(lintkit.rule.Node, lintkit.loader.File):\n    @classmethod\n    def skip(cls, filename: pathlib.Path, _: str) -&gt; bool:\n        return filename.suffix != \".py\"\n\n    def values(self) -&gt; Iterable[lintkit.Value[str]]:\n        yield lintkit.Value(str(self.file))\n\nclass FileNoHelpers(_NoHelpers, _PythonFile, code=5):\n    \"\"\"Verify file name contains no `helper` word (or its variations).\"\"\"\n\n    def message(self, value: lintkit.Value[str]) -&gt; str:\n        return f\"File '{value}' contains helper(s) names.\"\n\nclass FileNoUtils(_NoUtils, _PythonFile, code=6):\n    \"\"\"Verify file name contains no `utils` word (or its variations).\"\"\"\n\n    def message(self, value: lintkit.Value[str]) -&gt; str:\n        return f\"File {value} contains utils(s) names.\"\n</code></pre> <p>Adding this rule to the ones in advanced tutorial will effectively check there are no <code>util</code> or <code>helper</code> files in the project.</p> <p>Tip</p> <p>If you don't override <code>lintkit.loader.File.skip</code> method <code>lintkit.loader.File</code> will target every file.</p>"},{"location":"tutorials/file/#whole-file-rule","title":"Whole file rule","text":"<p>Caution</p> <p>This and following subsections are independent from any previous tutorials.</p> <p><code>lintkit.rule.File</code> allows you to define a rule which acts on all elements (however defined) within a given file.</p> <p>An example should make it clearer:</p> <pre><code>import ast\nimport itertools\n\nimport lintkit\n\nlintkit.settings.name: str = \"FILELINTER\"\n# You might not inherit from `check.Check` as long as you fulfil the interface\nclass TooManyConditionals(lintkit.loader.Python, lintkit.rule.File, code=0):\n    def values(self) -&gt; Iterable[lintkit.Value[str] | None]:\n\n        data: dict[type[ast.AST], ast.AST] = self.getitem(\"nodes_map\")\n        # Get If and ternary operator nodes\n        conditionals = itertools.chain(\n            (data[typ] for typ in (ast.If, ast.IfExp))\n        )\n        # Just return every conditional in the file\n        # We will count them, actual values don't matter\n        for conditional in conditionals:\n            yield lintkit.Value()\n\n    def check(self, value: lintkit.Value):\n        # Error for every value\n        return True\n\n    def finalize(self, fails: int) -&gt; bool:\n        # If there are more than `2` conditionals return True\n        return fails &gt; 2\n\n    def message(self) -&gt; str:\n        return \"More than '2' conditionals in the file\"\n</code></pre> <p>Important</p> <p>Unlike <code>lintkit.rule.Node</code> this <code>rule</code> does not fail when <code>check</code> returns <code>True</code>. Instead, it counts all fails and uses <code>lintkit.rule.File.finalize</code> to decide what constitutes a failure (in our case, if <code>check</code> returns <code>True</code> more than <code>2</code> times).</p> <p>Tip</p> <p>You could have noticed, that <code>message</code> method has no arguments. As we are acting on multiple elements there is no straightforward meaning behind such argument, hence it is not within <code>lintkit.rule.File</code> interface. Remember you can always save any necessary variables within <code>self</code> if you need it though!</p> <p>This <code>Python</code> file would not break this rule:</p> <pre><code>a, b = 2, 3\nif a &gt; b:\n    print(\"a &gt; b\")\nif b &gt; a:\n    print(\"b &gt; a\")\n</code></pre> <p>while this one would (three conditionals present):</p> <pre><code>a, b = 2, 3\nif a &gt; b:\n    print(\"a &gt; b\")\nif b &gt; a:\n    print(\"b &gt; a\")\nif a == b:\n    print(\"b == a\")\n</code></pre> <p>Now, if we run our rule, we will see the following error message:</p> <pre><code>/conditionals.py:-:- FILELINTER0: More than \"2\" conditionals in the file\n</code></pre>"},{"location":"tutorials/file/#all-files-rule","title":"All files rule","text":"<p>You can think of <code>lintkit.rule.All</code> as a further generalization of <code>lintkit.rule.File</code> - you can gather info from all files of interest (in our code <code>*.py</code>) and perform decisions based on that.</p> <p>The following <code>rule</code> would verify whether all <code>class</code> names in all files are unique:</p> <pre><code>import collections\nimport ast\n\nimport lintkit\n\nlintkit.settings.name: str = \"ALLLINTER\"\n\nclass TooManyConditionals(lintkit.loader.Python, lintkit.rule.All, code=0):\n    def __init__(self) -&gt; None:\n        # Remember to call base class __init__ to perform setup\n        super().__init__()\n\n        self.class_names = collections.defaultdict(int)\n        self.offending_classes: list[str] = []\n\n    def values(self) -&gt; Iterable[lintkit.Value[str] | None]:\n        for klass in self.getitem(\"nodes_map\")[ast.ClassDef]:\n            self.class_names[klass.name] += 1\n            # No need to return anything, this rule only gathers data\n            yield None\n\n    def check(self, _: lintkit.Value[str]) -&gt; bool:\n        # check just to be compatible with the interface\n        return False\n\n    def finalize(self, _: int) -&gt; bool:\n        # We are essentially doing the check of all data here\n        unique_classes = True\n        for klass, count in self.class_names.items():\n            if count &gt; 1:\n                self.offending_classes.append(klass)\n                unique_classes = False\n\n        return not unique_classes\n\n    def message(self) -&gt; str:\n        return (\n            f\"The same class names in multiple files: {self.offending_classes}\"\n        )\n</code></pre> <p>Now, if we have two Python files <code>A.py</code> and <code>B.py</code>, both with classes <code>X</code> and <code>Y</code>, we would get the following error:</p> <pre><code>/-:-:- ALLLINTER0: The same class names in multiple files: ['A', 'B']\n</code></pre>"},{"location":"tutorials/file/#next-steps","title":"Next steps","text":"<p>Check one of the following tutorials to learn more about what you can do with <code>lintkit</code>:</p> <ul> <li>Basic tutorial showcasing <code>lintkit</code> capabilities</li> <li>Prerequisite advanced linter tutorial</li> <li>Configuring linter via     <code>loadfig</code>\u00a0\u29c9     (or other tool)</li> </ul>"}]}